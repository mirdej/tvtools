)]}'
{"version":3,"file":"/packages/mousetrap:mousetrap.js","sources":["mousetrap:mousetrap/mousetrap.js","mousetrap:mousetrap/meteor/export.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wB;AACA,G;AACA,gC;AACA,E;AACA,kE;AACA,mE;AACA,0C;AACA,E;AACA,6C;AACA,E;AACA,sE;AACA,oE;AACA,2E;AACA,sE;AACA,iC;AACA,E;AACA,sE;AACA,2B;AACA,E;AACA,iB;AACA,6B;AACA,G;AACA,wC;;AAEA,O;AACA,8D;AACA,M;AACA,+D;AACA,8D;AACA,2B;AACA,M;AACA,qB;AACA,O;AACA,gB;AACA,2B;AACA,qB;AACA,wB;AACA,wB;AACA,uB;AACA,sB;AACA,2B;AACA,sB;AACA,wB;AACA,yB;AACA,2B;AACA,sB;AACA,uB;AACA,uB;AACA,qB;AACA,wB;AACA,uB;AACA,sB;AACA,sB;AACA,uB;AACA,uB;AACA,uB;AACA,U;;AAEA,W;AACA,6D;AACA,U;AACA,iE;AACA,sD;AACA,U;AACA,yB;AACA,W;AACA,wB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,sB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,sB;AACA,qB;AACA,qB;AACA,U;;AAEA,W;AACA,sE;AACA,4C;AACA,U;AACA,8D;AACA,U;AACA,iE;AACA,U;AACA,yB;AACA,W;AACA,sB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,uB;AACA,qB;AACA,qB;AACA,qB;AACA,qB;AACA,U;;AAEA,W;AACA,+D;AACA,oE;AACA,U;AACA,yB;AACA,W;AACA,4B;AACA,4B;AACA,8B;AACA,8B;AACA,4B;AACA,oF;AACA,U;;AAEA,W;AACA,mE;AACA,0E;AACA,uB;AACA,U;AACA,mC;AACA,W;AACA,qB;;AAEA,W;AACA,iE;AACA,U;AACA,yB;AACA,W;AACA,wB;;AAEA,W;AACA,4E;AACA,U;AACA,yB;AACA,W;AACA,wB;;AAEA,W;AACA,uE;AACA,yD;AACA,U;AACA,yB;AACA,W;AACA,6B;;AAEA,W;AACA,gD;AACA,U;AACA,8B;AACA,W;AACA,oB;;AAEA,W;AACA,8D;AACA,U;AACA,iC;AACA,W;AACA,iC;;AAEA,W;AACA,iE;AACA,U;AACA,0B;AACA,W;AACA,oC;;AAEA,W;AACA,iD;AACA,uE;AACA,U;AACA,iC;AACA,W;AACA,oC;;AAEA,O;AACA,iE;AACA,sB;AACA,O;AACA,kC;AACA,gC;AACA,K;;AAEA,O;AACA,wD;AACA,O;AACA,8B;AACA,yB;AACA,K;;AAEA,O;AACA,qC;AACA,M;AACA,2C;AACA,2B;AACA,iC;AACA,oB;AACA,O;AACA,gD;AACA,sC;AACA,2D;AACA,mB;AACA,S;;AAEA,kD;AACA,K;;AAEA,O;AACA,oD;AACA,M;AACA,uB;AACA,uB;AACA,O;AACA,qC;;AAEA,mE;AACA,mC;AACA,yD;;AAEA,wE;AACA,yE;AACA,wE;AACA,oC;AACA,c;AACA,uE;AACA,mE;AACA,uE;AACA,uD;AACA,8B;AACA,oD;AACA,a;;AAEA,6B;AACA,S;;AAEA,8D;AACA,4B;AACA,iC;AACA,S;;AAEA,oC;AACA,yC;AACA,S;;AAEA,0C;;AAEA,sE;AACA,2E;AACA,8E;AACA,0D;AACA,K;;AAEA,O;AACA,qC;AACA,M;AACA,gC;AACA,gC;AACA,yB;AACA,O;AACA,sD;AACA,2E;AACA,K;;AAEA,O;AACA,iE;AACA,M;AACA,iC;AACA,oB;AACA,O;AACA,0C;AACA,sC;;AAEA,oC;AACA,gB;;AAEA,sC;AACA,kC;AACA,uC;AACA,yB;AACA,a;AACA,qC;AACA,S;;AAEA,+B;AACA,wC;AACA,S;AACA,K;;AAEA,O;AACA,sE;AACA,iB;AACA,M;AACA,gC;AACA,+B;AACA,8B;AACA,8E;AACA,mC;AACA,6B;AACA,uB;AACA,O;AACA,qF;AACA,c;AACA,qB;AACA,yB;AACA,4B;;AAEA,yD;AACA,qC;AACA,sB;AACA,S;;AAEA,uE;AACA,0D;AACA,oC;AACA,S;;AAEA,kE;AACA,uC;AACA,4D;AACA,gD;;AAEA,6E;AACA,4D;AACA,mG;AACA,yB;AACA,a;;AAEA,+E;AACA,wC;AACA,4C;AACA,yB;AACA,a;;AAEA,2E;AACA,0E;AACA,+D;AACA,c;AACA,yE;AACA,wE;AACA,sE;AACA,uH;;AAEA,2E;AACA,wE;AACA,0E;AACA,kB;AACA,sD;AACA,iF;AACA,6G;AACA,oD;AACA,uD;AACA,iB;;AAEA,uC;AACA,a;AACA,S;;AAEA,uB;AACA,K;;AAEA,O;AACA,+D;AACA,M;AACA,uB;AACA,uB;AACA,O;AACA,iC;AACA,2B;;AAEA,yB;AACA,oC;AACA,S;;AAEA,uB;AACA,kC;AACA,S;;AAEA,wB;AACA,mC;AACA,S;;AAEA,wB;AACA,mC;AACA,S;;AAEA,yB;AACA,K;;AAEA,O;AACA,sC;AACA,M;AACA,uB;AACA,oB;AACA,O;AACA,iC;AACA,+B;AACA,+B;AACA,mB;AACA,S;;AAEA,8B;AACA,K;;AAEA,O;AACA,uC;AACA,M;AACA,uB;AACA,oB;AACA,O;AACA,kC;AACA,gC;AACA,gC;AACA,mB;AACA,S;;AAEA,8B;AACA,K;;AAEA,O;AACA,2C;AACA,M;AACA,uE;AACA,qE;AACA,M;AACA,iC;AACA,uB;AACA,oB;AACA,O;AACA,0D;;AAEA,oD;AACA,mF;AACA,mB;AACA,S;;AAEA,2C;AACA,+B;AACA,gC;AACA,S;AACA,K;;AAEA,O;AACA,oC;AACA,M;AACA,gC;AACA,+B;AACA,uB;AACA,oB;AACA,O;AACA,kD;AACA,6D;AACA,c;AACA,4B;AACA,yB;AACA,8C;;AAEA,oG;AACA,gD;AACA,mC;AACA,kE;AACA,a;AACA,S;;AAEA,6D;AACA,gD;;AAEA,8C;AACA,yE;AACA,uE;AACA,wE;AACA,kC;AACA,mC;;AAEA,kE;AACA,gD;AACA,kB;AACA,+E;AACA,uE;AACA,kB;AACA,yE;AACA,oD;AACA,qD;AACA,6B;AACA,iB;;AAEA,iD;;AAEA,wE;AACA,iD;AACA,8F;AACA,yB;AACA,a;;AAEA,sE;AACA,wE;AACA,6C;AACA,4E;AACA,a;AACA,S;;AAEA,sE;AACA,qE;AACA,kE;AACA,U;AACA,4E;AACA,yE;AACA,sC;AACA,U;AACA,oE;AACA,yE;AACA,qE;AACA,U;AACA,2E;AACA,4D;AACA,U;AACA,sE;AACA,8E;AACA,sD;AACA,U;AACA,4E;AACA,iC;AACA,6E;AACA,8F;AACA,wC;AACA,S;;AAEA,+E;AACA,K;;AAEA,O;AACA,8B;AACA,M;AACA,uB;AACA,oB;AACA,O;AACA,iC;;AAEA,2C;AACA,yG;AACA,0C;AACA,gC;AACA,S;;AAEA,+C;;AAEA,uC;AACA,yB;AACA,mB;AACA,S;;AAEA,iF;AACA,kE;AACA,qC;AACA,mB;AACA,S;;AAEA,8D;AACA,K;;AAEA,O;AACA,mE;AACA,M;AACA,0B;AACA,yB;AACA,O;AACA,+B;AACA,gF;AACA,K;;AAEA,O;AACA,iE;AACA,M;AACA,wE;AACA,0D;AACA,M;AACA,oB;AACA,O;AACA,oC;AACA,kC;AACA,wD;AACA,K;;AAEA,O;AACA,oE;AACA,6C;AACA,M;AACA,uB;AACA,O;AACA,+B;AACA,4B;AACA,8B;AACA,mC;;AAEA,8E;AACA,gE;AACA,4C;AACA,6B;AACA,iB;;AAEA,+C;AACA,kD;AACA,iB;AACA,a;AACA,S;AACA,4B;AACA,K;;AAEA,O;AACA,yD;AACA,M;AACA,8C;AACA,+B;AACA,wC;AACA,O;AACA,sD;;AAEA,mE;AACA,qD;AACA,sB;AACA,oE;AACA,S;;AAEA,8D;AACA,4B;AACA,uD;AACA,+B;AACA,S;;AAEA,sB;AACA,K;;AAEA,O;AACA,uC;AACA,M;AACA,2D;AACA,0B;AACA,iC;AACA,8B;AACA,oB;AACA,O;AACA,2D;;AAEA,2E;AACA,qC;AACA,mC;;AAEA,W;AACA,8E;AACA,+C;AACA,U;AACA,qC;AACA,8B;AACA,W;AACA,gD;AACA,+B;AACA,iD;AACA,yC;AACA,sC;AACA,c;AACA,S;;AAEA,W;AACA,2E;AACA,0E;AACA,U;AACA,2B;AACA,wB;AACA,W;AACA,uC;AACA,8C;;AAEA,yE;AACA,oE;AACA,qE;AACA,qC;AACA,0D;AACA,a;;AAEA,mE;AACA,2C;AACA,4C;AACA,S;;AAEA,4E;AACA,uE;AACA,gF;AACA,U;AACA,6E;AACA,0E;AACA,yE;AACA,0E;AACA,qD;AACA,+C;AACA,gD;AACA,6H;AACA,oE;AACA,S;AACA,K;;AAEA,O;AACA,yD;AACA,M;AACA,0D;AACA,sB;AACA,O;AACA,2C;AACA,kC;AACA,yB;AACA,S;;AAEA,sC;AACA,K;;AAEA,O;AACA,+C;AACA,M;AACA,+E;AACA,+B;AACA,wB;AACA,O;AACA,+C;AACA,iB;AACA,gB;AACA,c;AACA,2B;;AAEA,yE;AACA,+B;AACA,4C;;AAEA,2C;AACA,0B;;AAEA,kC;AACA,wC;AACA,4C;AACA,a;;AAEA,6D;AACA,8C;AACA,2D;AACA,oE;AACA,sC;AACA,wC;AACA,a;;AAEA,6E;AACA,mC;AACA,oC;AACA,a;AACA,S;;AAEA,mD;AACA,oD;AACA,yD;;AAEA,gB;AACA,qB;AACA,iC;AACA,0B;AACA,U;AACA,K;;AAEA,O;AACA,0C;AACA,M;AACA,kC;AACA,iC;AACA,8B;AACA,2E;AACA,wE;AACA,oB;AACA,O;AACA,8E;;AAEA,yE;AACA,0D;;AAEA,mE;AACA,uD;;AAEA,8C;AACA,iB;;AAEA,6E;AACA,sD;AACA,kC;AACA,mE;AACA,mB;AACA,S;;AAEA,gD;;AAEA,kE;AACA,2C;AACA,0D;;AAEA,mD;AACA,qG;;AAEA,0C;AACA,sD;AACA,mC;AACA,U;AACA,wE;AACA,0C;AACA,iE;AACA,+B;AACA,sC;AACA,gC;AACA,8B;AACA,yB;AACA,8B;AACA,W;AACA,K;;AAEA,O;AACA,uD;AACA,M;AACA,kC;AACA,iC;AACA,uC;AACA,oB;AACA,O;AACA,4D;AACA,uD;AACA,2D;AACA,S;AACA,K;;AAEA,a;AACA,qD;AACA,oD;AACA,kD;;AAEA,qB;;AAEA,W;AACA,sC;AACA,U;AACA,uE;AACA,sE;AACA,U;AACA,wE;AACA,0E;AACA,U;AACA,qC;AACA,qC;AACA,sE;AACA,wB;AACA,W;AACA,gD;AACA,yD;AACA,kD;AACA,wB;AACA,U;;AAEA,W;AACA,wC;AACA,U;AACA,8E;AACA,wE;AACA,2B;AACA,U;AACA,4E;AACA,uC;AACA,U;AACA,4D;AACA,4C;AACA,U;AACA,qC;AACA,iC;AACA,wB;AACA,W;AACA,wC;AACA,+D;AACA,U;;AAEA,W;AACA,wD;AACA,U;AACA,+B;AACA,kC;AACA,wB;AACA,W;AACA,yC;AACA,kD;AACA,0D;AACA,a;AACA,wB;AACA,U;;AAEA,W;AACA,wE;AACA,2E;AACA,+D;AACA,U;AACA,wB;AACA,W;AACA,2B;AACA,4B;AACA,4B;AACA,wB;AACA,U;;AAEA,U;AACA,+D;AACA,S;AACA,0B;AACA,kC;AACA,2B;AACA,U;AACA,4C;;AAEA,4E;AACA,8E;AACA,6B;AACA,a;;AAEA,mD;AACA,2I;AACA,U;;AAEA,W;AACA,6E;AACA,W;AACA,6B;AACA,M;;AAEA,4C;AACA,iC;;AAEA,wC;AACA,qD;AACA,0B;AACA,K;AACA,sB;;;;;;;;;;;;;;;;;;;ACx7BA,gC;AACA,qC;AACA,sI;AACA,+B;AACA,0B;AACA,C","sourcesContent":["/*global define:false */\n/**\n * Copyright 2013 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.4.6\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n            8: 'backspace',\n            9: 'tab',\n            13: 'enter',\n            16: 'shift',\n            17: 'ctrl',\n            18: 'alt',\n            20: 'capslock',\n            27: 'esc',\n            32: 'space',\n            33: 'pageup',\n            34: 'pagedown',\n            35: 'end',\n            36: 'home',\n            37: 'left',\n            38: 'up',\n            39: 'right',\n            40: 'down',\n            45: 'ins',\n            46: 'del',\n            91: 'meta',\n            93: 'meta',\n            224: 'meta'\n        },\n\n        /**\n         * mapping for special characters so they can support\n         *\n         * this dictionary is only used incase you want to bind a\n         * keyup or keydown event to one of these keys\n         *\n         * @type {Object}\n         */\n        _KEYCODE_MAP = {\n            106: '*',\n            107: '+',\n            109: '-',\n            110: '.',\n            111 : '/',\n            186: ';',\n            187: '=',\n            188: ',',\n            189: '-',\n            190: '.',\n            191: '/',\n            192: '`',\n            219: '[',\n            220: '\\\\',\n            221: ']',\n            222: '\\''\n        },\n\n        /**\n         * this is a mapping of keys that require shift on a US keypad\n         * back to the non shift equivelents\n         *\n         * this is so you can use keyup events with these keys\n         *\n         * note that this will only work reliably on US keyboards\n         *\n         * @type {Object}\n         */\n        _SHIFT_MAP = {\n            '~': '`',\n            '!': '1',\n            '@': '2',\n            '#': '3',\n            '$': '4',\n            '%': '5',\n            '^': '6',\n            '&': '7',\n            '*': '8',\n            '(': '9',\n            ')': '0',\n            '_': '-',\n            '+': '=',\n            ':': ';',\n            '\\\"': '\\'',\n            '<': ',',\n            '>': '.',\n            '?': '/',\n            '|': '\\\\'\n        },\n\n        /**\n         * this is a list of special strings you can use to map\n         * to modifier keys when you specify your keyboard shortcuts\n         *\n         * @type {Object}\n         */\n        _SPECIAL_ALIASES = {\n            'option': 'alt',\n            'command': 'meta',\n            'return': 'enter',\n            'escape': 'esc',\n            'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n        },\n\n        /**\n         * variable to store the flipped version of _MAP from above\n         * needed to check if we should use keypress or not when no action\n         * is specified\n         *\n         * @type {Object|undefined}\n         */\n        _REVERSE_MAP,\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        _callbacks = {},\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        _directMap = {},\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        _sequenceLevels = {},\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        _resetTimer,\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        _ignoreNextKeyup = false,\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        _ignoreNextKeypress = false,\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        _nextExpectedAction = false;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n        _MAP[i + 96] = i;\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * resets all sequence counters except for the ones passed in\n     *\n     * @param {Object} doNotReset\n     * @returns void\n     */\n    function _resetSequences(doNotReset) {\n        doNotReset = doNotReset || {};\n\n        var activeSequences = false,\n            key;\n\n        for (key in _sequenceLevels) {\n            if (doNotReset[key]) {\n                activeSequences = true;\n                continue;\n            }\n            _sequenceLevels[key] = 0;\n        }\n\n        if (!activeSequences) {\n            _nextExpectedAction = false;\n        }\n    }\n\n    /**\n     * finds all callbacks that match based on the keycode, modifiers,\n     * and action\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event|Object} e\n     * @param {string=} sequenceName - name of the sequence we are looking for\n     * @param {string=} combination\n     * @param {number=} level\n     * @returns {Array}\n     */\n    function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n        var i,\n            callback,\n            matches = [],\n            action = e.type;\n\n        // if there are no events related to this keycode\n        if (!_callbacks[character]) {\n            return [];\n        }\n\n        // if a modifier key is coming up on its own we should allow it\n        if (action == 'keyup' && _isModifier(character)) {\n            modifiers = [character];\n        }\n\n        // loop through all callbacks for the key that was pressed\n        // and see if any of them match\n        for (i = 0; i < _callbacks[character].length; ++i) {\n            callback = _callbacks[character][i];\n\n            // if a sequence name is not specified, but this is a sequence at\n            // the wrong level then move onto the next match\n            if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                continue;\n            }\n\n            // if the action we are looking for doesn't match the action we got\n            // then we should keep going\n            if (action != callback.action) {\n                continue;\n            }\n\n            // if this is a keypress event and the meta key and control key\n            // are not pressed that means that we need to only look at the\n            // character, otherwise check the modifiers as well\n            //\n            // chrome will not fire a keypress if meta or control is down\n            // safari will fire a keypress if meta or meta+shift is down\n            // firefox will fire a keypress if meta or control is down\n            if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                // when you bind a combination or sequence a second time it\n                // should overwrite the first one.  if a sequenceName or\n                // combination is specified in this call it does just that\n                //\n                // @todo make deleting its own method?\n                var deleteCombo = !sequenceName && callback.combo == combination;\n                var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                if (deleteCombo || deleteSequence) {\n                    _callbacks[character].splice(i, 1);\n                }\n\n                matches.push(callback);\n            }\n        }\n\n        return matches;\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * actually calls the callback function\n     *\n     * if your callback function returns false this will use the jquery\n     * convention - prevent default and stop propogation on the event\n     *\n     * @param {Function} callback\n     * @param {Event} e\n     * @returns void\n     */\n    function _fireCallback(callback, e, combo, sequence) {\n\n        // if this event should not happen stop here\n        if (Mousetrap.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n            return;\n        }\n\n        if (callback(e, combo) === false) {\n            _preventDefault(e);\n            _stopPropagation(e);\n        }\n    }\n\n    /**\n     * handles a character key event\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event} e\n     * @returns void\n     */\n    function _handleKey(character, modifiers, e) {\n        var callbacks = _getMatches(character, modifiers, e),\n            i,\n            doNotReset = {},\n            maxLevel = 0,\n            processedSequenceCallback = false;\n\n        // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n        for (i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].seq) {\n                maxLevel = Math.max(maxLevel, callbacks[i].level);\n            }\n        }\n\n        // loop through matching callbacks for this key event\n        for (i = 0; i < callbacks.length; ++i) {\n\n            // fire for all sequence callbacks\n            // this is because if for example you have multiple sequences\n            // bound such as \"g i\" and \"g t\" they both need to fire the\n            // callback for matching g cause otherwise you can only ever\n            // match the first one\n            if (callbacks[i].seq) {\n\n                // only fire callbacks for the maxLevel to prevent\n                // subsequences from also firing\n                //\n                // for example 'a option b' should not cause 'option b' to fire\n                // even though 'option b' is part of the other sequence\n                //\n                // any sequences that do not match here will be discarded\n                // below by the _resetSequences call\n                if (callbacks[i].level != maxLevel) {\n                    continue;\n                }\n\n                processedSequenceCallback = true;\n\n                // keep a list of which sequences were matches for later\n                doNotReset[callbacks[i].seq] = 1;\n                _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                continue;\n            }\n\n            // if there were no sequence matches but we are still here\n            // that means this is a regular match so we should fire that\n            if (!processedSequenceCallback) {\n                _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n            }\n        }\n\n        // if the key you pressed matches the type of sequence without\n        // being a modifier (ie \"keyup\" or \"keypress\") then we should\n        // reset all sequences that were not matched by this event\n        //\n        // this is so, for example, if you have the sequence \"h a t\" and you\n        // type \"h e a r t\" it does not match.  in this case the \"e\" will\n        // cause the sequence to reset\n        //\n        // modifier keys are ignored because you can have a sequence\n        // that contains modifiers such as \"enter ctrl+space\" and in most\n        // cases the modifier key will be pressed before the next key\n        //\n        // also if you have a sequence such as \"ctrl+b a\" then pressing the\n        // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n        //\n        // the \"keydown\" is expected when there is a modifier, but the\n        // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n        // after and that causes the sequence to reset\n        //\n        // we ignore keypresses in a sequence that directly follow a keydown\n        // for the same character\n        var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n        if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n            _resetSequences(doNotReset);\n        }\n\n        _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n    }\n\n    /**\n     * handles a keydown event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _handleKeyEvent(e) {\n\n        // normalize e.which for key events\n        // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n        if (typeof e.which !== 'number') {\n            e.which = e.keyCode;\n        }\n\n        var character = _characterFromEvent(e);\n\n        // no character found then stop\n        if (!character) {\n            return;\n        }\n\n        // need to use === for the character check because the character can be 0\n        if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n            _ignoreNextKeyup = false;\n            return;\n        }\n\n        Mousetrap.handleKey(character, _eventModifiers(e), e);\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * called to set a 1 second timeout on the specified sequence\n     *\n     * this is so after each key press in the sequence you have 1 second\n     * to press the next key before you have to start over\n     *\n     * @returns void\n     */\n    function _resetSequenceTimer() {\n        clearTimeout(_resetTimer);\n        _resetTimer = setTimeout(_resetSequences, 1000);\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * binds a key sequence to an event\n     *\n     * @param {string} combo - combo specified in bind call\n     * @param {Array} keys\n     * @param {Function} callback\n     * @param {string=} action\n     * @returns void\n     */\n    function _bindSequence(combo, keys, callback, action) {\n\n        // start off by adding a sequence level record for this combination\n        // and setting the level to 0\n        _sequenceLevels[combo] = 0;\n\n        /**\n         * callback to increase the sequence level for this sequence and reset\n         * all other sequences that were active\n         *\n         * @param {string} nextAction\n         * @returns {Function}\n         */\n        function _increaseSequence(nextAction) {\n            return function() {\n                _nextExpectedAction = nextAction;\n                ++_sequenceLevels[combo];\n                _resetSequenceTimer();\n            };\n        }\n\n        /**\n         * wraps the specified callback inside of another function in order\n         * to reset all sequence counters as soon as this sequence is done\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _callbackAndReset(e) {\n            _fireCallback(callback, e, combo);\n\n            // we should ignore the next key up if the action is key down\n            // or keypress.  this is so if you finish a sequence and\n            // release the key the final key will not trigger a keyup\n            if (action !== 'keyup') {\n                _ignoreNextKeyup = _characterFromEvent(e);\n            }\n\n            // weird race condition if a sequence ends with the key\n            // another sequence begins with\n            setTimeout(_resetSequences, 10);\n        }\n\n        // loop through keys one at a time and bind the appropriate callback\n        // function.  for any key leading up to the final one it should\n        // increase the sequence. after the final, it should reset all sequences\n        //\n        // if an action is specified in the original bind call then that will\n        // be used throughout.  otherwise we will pass the action that the\n        // next key in the sequence should match.  this allows a sequence\n        // to mix and match keypress and keydown events depending on which\n        // ones are better suited to the key provided\n        for (var i = 0; i < keys.length; ++i) {\n            var isFinal = i + 1 === keys.length;\n            var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n            _bindSingle(keys[i], wrappedCallback, action, combo, i);\n        }\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys,\n            key,\n            i,\n            modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    /**\n     * binds a single keyboard combination\n     *\n     * @param {string} combination\n     * @param {Function} callback\n     * @param {string=} action\n     * @param {string=} sequenceName - name of sequence if part of sequence\n     * @param {number=} level - what part of the sequence the command is\n     * @returns void\n     */\n    function _bindSingle(combination, callback, action, sequenceName, level) {\n\n        // store a direct mapped reference for use with Mousetrap.trigger\n        _directMap[combination + ':' + action] = callback;\n\n        // make sure multiple spaces in a row become a single space\n        combination = combination.replace(/\\s+/g, ' ');\n\n        var sequence = combination.split(' '),\n            info;\n\n        // if this pattern is a sequence of keys then run through this method\n        // to reprocess each pattern one key at a time\n        if (sequence.length > 1) {\n            _bindSequence(combination, sequence, callback, action);\n            return;\n        }\n\n        info = _getKeyInfo(combination, action);\n\n        // make sure to initialize array if this is the first time\n        // a callback is added for this key\n        _callbacks[info.key] = _callbacks[info.key] || [];\n\n        // remove an existing match if there is one\n        _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n        // add this call back to the array\n        // if it is a sequence put it at the beginning\n        // if not put it at the end\n        //\n        // this is important because the way these are processed expects\n        // the sequence ones to come first\n        _callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n            callback: callback,\n            modifiers: info.modifiers,\n            action: info.action,\n            seq: sequenceName,\n            level: level,\n            combo: combination\n        });\n    }\n\n    /**\n     * binds multiple combinations to the same callback\n     *\n     * @param {Array} combinations\n     * @param {Function} callback\n     * @param {string|undefined} action\n     * @returns void\n     */\n    function _bindMultiple(combinations, callback, action) {\n        for (var i = 0; i < combinations.length; ++i) {\n            _bindSingle(combinations[i], callback, action);\n        }\n    }\n\n    // start!\n    _addEvent(document, 'keypress', _handleKeyEvent);\n    _addEvent(document, 'keydown', _handleKeyEvent);\n    _addEvent(document, 'keyup', _handleKeyEvent);\n\n    var Mousetrap = {\n\n        /**\n         * binds an event to mousetrap\n         *\n         * can be a single key, a combination of keys separated with +,\n         * an array of keys, or a sequence of keys separated by spaces\n         *\n         * be sure to list the modifier keys first to make sure that the\n         * correct key ends up getting bound (the last key in the pattern)\n         *\n         * @param {string|Array} keys\n         * @param {Function} callback\n         * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n         * @returns void\n         */\n        bind: function(keys, callback, action) {\n            keys = keys instanceof Array ? keys : [keys];\n            _bindMultiple(keys, callback, action);\n            return this;\n        },\n\n        /**\n         * unbinds an event to mousetrap\n         *\n         * the unbinding sets the callback function of the specified key combo\n         * to an empty function and deletes the corresponding key in the\n         * _directMap dict.\n         *\n         * TODO: actually remove this from the _callbacks dictionary instead\n         * of binding an empty function\n         *\n         * the keycombo+action has to be exactly the same as\n         * it was defined in the bind method\n         *\n         * @param {string|Array} keys\n         * @param {string} action\n         * @returns void\n         */\n        unbind: function(keys, action) {\n            return Mousetrap.bind(keys, function() {}, action);\n        },\n\n        /**\n         * triggers an event that has already been bound\n         *\n         * @param {string} keys\n         * @param {string=} action\n         * @returns void\n         */\n        trigger: function(keys, action) {\n            if (_directMap[keys + ':' + action]) {\n                _directMap[keys + ':' + action]({}, keys);\n            }\n            return this;\n        },\n\n        /**\n         * resets the library back to its initial state.  this is useful\n         * if you want to clear out the current keyboard shortcuts and bind\n         * new ones - for example if you switch to another page\n         *\n         * @returns void\n         */\n        reset: function() {\n            _callbacks = {};\n            _directMap = {};\n            return this;\n        },\n\n       /**\n        * should we stop this event before firing off callbacks\n        *\n        * @param {Event} e\n        * @param {Element} element\n        * @return {boolean}\n        */\n        stopCallback: function(e, element) {\n\n            // if the element has the class \"mousetrap\" then no need to stop\n            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n                return false;\n            }\n\n            // stop for input, select, and textarea\n            return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n        },\n\n        /**\n         * exposes _handleKey publicly so it can be overwritten by extensions\n         */\n        handleKey: _handleKey\n    };\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(Mousetrap);\n    }\n}) (window, document);\n","// expose Mousetrap to Meteor.js\nif (typeof Package !== 'undefined') {\n  /*global Mousetrap:true*/  // Meteor.js creates a file-scope global for exporting. This comment prevents a potential JSHint warning.\n  Mousetrap = window.Mousetrap;\n  delete window.Mousetrap;\n}\n"]}