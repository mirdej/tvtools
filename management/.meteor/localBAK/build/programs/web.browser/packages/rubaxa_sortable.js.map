)]}'
{"version":3,"sources":["rubaxa:sortable/Sortable.js","rubaxa:sortable/meteor/template.html","rubaxa:sortable/meteor/reactivize.js","rubaxa:sortable/meteor/methods-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,I;AACA,W;AACA,sC;AACA,e;AACA,G;;;AAGA,qB;AACA,c;;AAEA,kD;AACA,kB;AACA,E;AACA,iF;AACA,6B;AACA,E;AACA,2C;AACA,gD;AACA,E;AACA,O;AACA,uB;AACA,iC;AACA,E;AACA,gB;AACA,c;;AAEA,Y;AACA,U;AACA,U;AACA,S;AACA,S;;AAEA,W;AACA,iB;;AAEA,S;AACA,U;;AAEA,W;AACA,W;;AAEA,c;AACA,kB;;AAEA,S;AACA,W;;AAEA,e;AACA,kB;;AAEA,8C;;AAEA,e;AACA,0B;AACA,0B;;AAEA,sE;;AAEA,kB;;AAEA,8F;AACA,2C;AACA,oD;AACA,kE;;AAEA,mC;;AAEA,iC;AACA,+B;AACA,uB;;AAEA,6B;AACA,2B;;AAEA,yB;AACA,wC;AACA,I;;AAEA,6B;AACA,I;;AAEA,iB;AACA,mB;;AAEA,8B;;AAEA,gG;AACA,8D;AACA,kC;AACA,W;AACA,U;AACA,sC;AACA,iC;;AAEA,qB;AACA,qB;;AAEA,kC;AACA,oC;;AAEA,Q;AACA,O;AACA,K;;AAEA,sB;AACA,oC;AACA,+B;AACA,6B;;AAEA,6B;AACA,wB;;AAEA,U;AACA,2D;AACA,uD;AACA,U;AACA,c;AACA,Q;AACA,6B;AACA,+C;AACA,M;AACA,K;;AAEA,mB;AACA,mB;AACA,6C;AACA,uE;AACA,uE;AACA,K;;;AAGA,sB;AACA,+C;AACA,gD;;AAEA,2B;AACA,8B;AACA,K;;;AAGA,+E;AACA,wB;AACA,wB;AACA,wB;;AAEA,mC;;AAEA,c;AACA,gD;AACA,wB;AACA,iF;AACA,e;AACA,2C;AACA,4C;AACA,Q;AACA,a;AACA,M;AACA,K;AACA,I;AACA,Q;AACA,E;;;;AAIA,I;AACA,oB;AACA,6B;AACA,oC;AACA,I;AACA,iC;AACA,+B;AACA,gD;;;AAGA,oB;AACA,qB;;;AAGA,oB;AACA,kB;AACA,wB;AACA,c;AACA,mB;AACA,e;AACA,gB;AACA,gB;AACA,yB;AACA,mB;AACA,uD;AACA,gC;AACA,oB;AACA,gB;AACA,gB;AACA,6C;AACA,qD;AACA,K;AACA,qB;AACA,yB;AACA,yB;AACA,W;AACA,I;;;AAGA,wB;AACA,8B;AACA,0D;AACA,G;;;AAGA,4B;;AAEA,2C;AACA,2C;AACA,G;;;AAGA,0C;AACA,yB;AACA,sB;AACA,I;AACA,K;;;AAGA,8F;;;AAGA,6B;AACA,wB;AACA,8B;AACA,qC;AACA,I;AACA,G;;;AAGA,gB;AACA,yC;AACA,0C;;AAEA,4B;AACA,6B;;AAEA,gD;;AAEA,oB;AACA,sD;AACA,E;;;AAGA,wD;AACA,wB;;AAEA,sD;AACA,oB;AACA,iB;AACA,2B;AACA,oB;AACA,0C;AACA,mC;AACA,4B;AACA,4B;;;AAGA,sE;AACA,0C;AACA,I;;AAEA,oD;;AAEA,iB;AACA,W;AACA,I;;AAEA,4D;AACA,6B;;AAEA,kB;AACA,sC;AACA,+C;AACA,2E;AACA,0B;AACA,0B;AACA,K;AACA,I;AACA,qB;AACA,yD;AACA,8D;;AAEA,oB;AACA,sE;AACA,kB;AACA,M;AACA,O;;AAEA,iB;AACA,0B;AACA,0B;AACA,K;AACA,I;;;AAGA,yE;AACA,W;AACA,I;;;AAGA,yB;AACA,8C;AACA,I;;AAEA,8F;AACA,oB;AACA,kB;AACA,4B;AACA,qC;AACA,gB;;AAEA,yD;AACA,iB;;AAEA,gB;AACA,oB;AACA,gC;AACA,gC;;AAEA,+B;AACA,uC;AACA,wD;AACA,iC;;AAEA,kC;AACA,6B;;AAEA,2B;AACA,4D;AACA,wD;AACA,Q;;AAEA,0C;AACA,oC;AACA,M;;AAEA,iD;AACA,kD;AACA,qD;;AAEA,wB;AACA,wE;AACA,gC;AACA,gE;AACA,gE;;AAEA,oE;AACA,Y;AACA,mB;AACA,K;AACA,I;AACA,I;;AAEA,oC;AACA,6C;;AAEA,sC;;AAEA,8D;AACA,8D;AACA,I;;AAEA,mD;AACA,e;AACA,2B;AACA,c;AACA,oB;AACA,4B;AACA,2B;AACA,M;;AAEA,uC;AACA,I;AACA,gC;AACA,oC;AACA,I;AACA,S;AACA,iC;AACA,gD;AACA,I;;AAEA,Q;AACA,6B;AACA,gC;AACA,Y;AACA,6C;AACA,K;AACA,kB;AACA,I;AACA,I;;AAEA,6B;AACA,0B;AACA,mB;AACA,wD;;AAEA,2B;;AAEA,uB;AACA,oE;AACA,I;AACA,I;;AAEA,iC;AACA,kB;AACA,qC;;AAEA,+E;AACA,qB;AACA,oD;AACA,uC;;AAEA,iB;AACA,S;AACA,sF;AACA,oB;AACA,mC;AACA,mC;AACA,mC;AACA,wB;AACA,uB;AACA,W;AACA,Q;;AAEA,a;AACA,O;;AAEA,4C;AACA,M;AACA,2B;AACA,wC;AACA,K;;AAEA,iC;AACA,I;AACA,I;;;AAGA,+C;AACA,gB;AACA,mD;AACA,yC;AACA,yC;AACA,qH;;AAEA,qB;;AAEA,kD;AACA,+C;AACA,8C;AACA,4C;;AAEA,yB;AACA,I;AACA,I;;;AAGA,mE;AACA,uC;AACA,2B;;AAEA,uB;;AAEA,qC;AACA,qC;AACA,qC;AACA,yC;AACA,I;;AAEA,qB;AACA,8C;AACA,wB;AACA,e;;AAEA,qC;;AAEA,iE;AACA,oE;AACA,uC;AACA,yC;AACA,oC;AACA,uC;AACA,sC;;AAEA,gC;;AAEA,yB;AACA,gD;AACA,6D;AACA,gE;;AAEA,kC;AACA,yB;AACA,mD;AACA,6C;AACA,gD;AACA,Y;AACA,mB;AACA,mD;AACA,4C;AACA,K;;AAEA,2D;AACA,I;AACA,S;AACA,uB;AACA,yC;AACA,yE;AACA,K;;AAEA,gC;AACA,I;;AAEA,oC;AACA,I;;AAEA,yC;AACA,oB;AACA,W;AACA,a;AACA,W;AACA,2B;AACA,0B;AACA,yB;AACA,sC;AACA,2B;;AAEA,uC;AACA,yB;AACA,qD;AACA,I;;AAEA,0C;AACA,Y;AACA,qD;AACA,wC;AACA,qD;AACA,2E;AACA,M;AACA,Q;AACA,qD;AACA,M;AACA,2B;AACA,uC;;AAEA,kB;AACA,Y;AACA,K;;AAEA,yD;AACA,8C;;;AAGA,iB;AACA,sB;;AAEA,6B;AACA,qD;AACA,M;AACA,yB;AACA,iC;AACA,M;;AAEA,Y;AACA,K;;;AAGA,qE;AACA,8D;AACA,O;AACA,kB;AACA,4B;AACA,c;AACA,O;AACA,kD;AACA,M;;AAEA,yB;;AAEA,4B;AACA,qC;AACA,iD;AACA,K;AACA,0G;AACA,6B;AACA,sB;AACA,6B;AACA,M;;;AAGA,qD;AACA,iD;AACA,kD;AACA,8E;AACA,yD;AACA,2D;AACA,qH;AACA,8C;AACA,W;AACA,M;;AAEA,oB;AACA,+B;;AAEA,yB;;AAEA,oB;AACA,yF;AACA,a;AACA,uE;AACA,M;;AAEA,iC;AACA,6B;AACA,a;AACA,2E;AACA,M;;AAEA,qC;AACA,uC;AACA,K;AACA,I;AACA,I;;AAEA,yC;AACA,mC;;AAEA,Y;AACA,qD;;AAEA,uC;AACA,4C;AACA,iD;AACA,iD;AACA,M;;AAEA,kC;;AAEA,mD;AACA,oD;;AAEA,kC;AACA,8C;AACA,oC;AACA,mC;AACA,6B;AACA,W;AACA,I;AACA,I;;AAEA,6B;AACA,6C;;AAEA,kD;AACA,gD;AACA,iD;AACA,oD;AACA,I;;AAEA,qC;AACA,oB;AACA,2B;;AAEA,+B;AACA,iC;;AAEA,qC;;AAEA,mB;AACA,gC;AACA,kD;AACA,4C;;AAEA,uB;;AAEA,a;AACA,yB;AACA,iD;;AAEA,uD;;AAEA,iB;AACA,mC;;AAEA,+B;AACA,0D;;AAEA,wC;AACA,gC;;AAEA,iD;AACA,0F;AACA,+E;;AAEA,kB;AACA,yF;;AAEA,qB;AACA,iF;AACA,M;AACA,W;AACA,qB;AACA,yD;;AAEA,0C;AACA,gE;AACA,iC;;AAEA,0C;AACA,kF;AACA,gF;AACA,O;AACA,M;;AAEA,sB;AACA,gG;AACA,K;;AAEA,c;AACA,Y;AACA,Y;AACA,a;AACA,Y;AACA,a;;AAEA,c;AACA,oB;;AAEA,Y;AACA,c;;AAEA,Y;AACA,a;;AAEA,iB;AACA,2B;;AAEA,mB;AACA,gB;AACA,I;AACA,I;;;AAGA,yC;AACA,uB;;AAEA,qD;AACA,iB;AACA,2B;AACA,0B;AACA,K;AACA,I;AACA,oD;AACA,sB;AACA,I;AACA,I;;;AAGA,K;AACA,iD;AACA,wB;AACA,K;AACA,wB;AACA,kB;AACA,O;AACA,gC;AACA,U;AACA,wB;AACA,2B;;AAEA,uB;AACA,qB;AACA,mD;AACA,wE;AACA,K;AACA,I;;AAEA,gB;AACA,I;;;AAGA,K;AACA,+C;AACA,kD;AACA,K;AACA,0B;AACA,oC;;AAEA,4C;AACA,gC;;AAEA,uD;AACA,oB;AACA,K;AACA,Y;;AAEA,gC;AACA,oB;AACA,mC;AACA,mC;AACA,K;AACA,M;AACA,I;;;AAGA,K;AACA,6B;AACA,K;AACA,qB;AACA,kC;AACA,4B;AACA,I;;;AAGA,K;AACA,wK;AACA,+B;AACA,qE;AACA,gC;AACA,K;AACA,oC;AACA,oE;AACA,I;;;AAGA,K;AACA,mB;AACA,2B;AACA,8B;AACA,iB;AACA,K;AACA,kC;AACA,8B;;AAEA,0B;AACA,yB;AACA,W;AACA,0B;AACA,I;AACA,I;;;AAGA,K;AACA,Y;AACA,K;AACA,wB;AACA,oB;;AAEA,sB;;AAEA,2C;AACA,4C;;AAEA,8B;AACA,+B;;AAEA,iC;AACA,mF;AACA,oC;AACA,M;;AAEA,sF;;AAEA,kB;;AAEA,uB;AACA,G;AACA,G;;;AAGA,6B;AACA,6C;AACA,iD;AACA,mE;AACA,yB;AACA,G;AACA,E;;;AAGA,0B;AACA,sC;AACA,wE;AACA,4D;AACA,I;AACA,E;;;AAGA,kF;AACA,W;AACA,yB;AACA,kC;;AAEA,4C;AACA,+D;;AAEA,O;AACA,Q;AACA,iD;AACA,yD;AACA,kG;AACA,M;AACA,O;AACA,e;AACA,K;AACA,I;AACA,8C;AACA,G;;AAEA,c;AACA,E;;;AAGA,0C;AACA,uC;AACA,uB;AACA,E;;;AAGA,8B;AACA,wC;AACA,E;;;AAGA,+B;AACA,2C;AACA,E;;;AAGA,yC;AACA,W;AACA,sB;AACA,iD;AACA,I;AACA,S;AACA,mG;AACA,gF;AACA,I;AACA,G;AACA,E;;;AAGA,+B;AACA,6B;;AAEA,c;AACA,wB;AACA,wE;AACA,yD;AACA,K;AACA,+B;AACA,2B;AACA,K;;AAEA,6C;AACA,I;AACA,S;AACA,2B;AACA,8B;AACA,K;;AAEA,8D;AACA,I;AACA,G;AACA,E;;;AAGA,yC;AACA,Y;AACA,wE;;AAEA,kB;AACA,wB;AACA,0B;AACA,K;AACA,I;;AAEA,e;AACA,G;;AAEA,Y;AACA,E;;;AAGA,iC;AACA,uB;AACA,E;;;AAGA,uB;AACA,kB;AACA,E;;;AAGA,oC;AACA,mC;AACA,0E;AACA,6E;AACA,E;;;AAGA,I;AACA,e;AACA,6B;AACA,qB;AACA,Y;AACA,I;AACA,2B;AACA,0E;AACA,kB;AACA,W;;AAEA,e;AACA,4B;AACA,G;;AAEA,0B;AACA,E;;AAEA,I;AACA,qD;AACA,a;AACA,qB;AACA,Y;AACA,I;AACA,sC;AACA,gB;AACA,kD;AACA,kD;AACA,Y;AACA,I;AACA,G;AACA,e;AACA,E;;AAEA,mC;AACA,kB;;AAEA,sB;AACA,yB;AACA,qB;AACA,iB;;AAEA,4B;AACA,6B;AACA,oC;AACA,a;AACA,kC;AACA,M;;AAEA,mB;AACA,W;AACA,I;AACA,I;AACA,E;;AAEA,6B;AACA,mB;AACA,yB;AACA,kC;AACA,yB;AACA,K;AACA,I;AACA,G;;AAEA,a;AACA,E;;;AAGA,gB;AACA,mB;AACA,U;AACA,Y;AACA,Y;AACA,c;AACA,c;AACA,+B;AACA,uC;AACA,I;AACA,kB;AACA,sB;AACA,oB;AACA,4B;AACA,e;AACA,G;;;AAGA,4B;;;AAGA,I;AACA,4B;AACA,4B;AACA,kC;AACA,I;AACA,2C;AACA,mC;AACA,G;;AAEA,U;AACA,iB;AACA,G;;;;;;;;;;;;;;;;;;;;AChlCA,iC;AACA,sE;AACA,kB;AACA,gC;AACA,gD;AACA,iB;AACA,mE;AACA,6C;AACA,gD;AACA,qB;AACA,6C;AACA,2D;AACA,W;AACA,S;AACA,gB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACjBA,E;AACA,6D;AACA,oG;;AAEA,K;AACA,mE;AACA,iE;AACA,iF;AACA,kB;AACA,mB;AACA,S;AACA,oC;AACA,gD;AACA,6D;AACA,0E;AACA,4F;AACA,yI;AACA,kI;;AAEA,G;;AAEA,a;;AAEA,yC;AACA,6B;AACA,uH;AACA,0E;AACA,+E;AACA,mF;AACA,gE;AACA,4D;AACA,mD;AACA,6D;AACA,oC;AACA,I;AACA,oF;AACA,mG;AACA,uG;AACA,qF;AACA,6E;AACA,yF;AACA,gF;AACA,sF;AACA,0C;AACA,4E;AACA,4D;AACA,sE;AACA,+C;AACA,4B;AACA,0E;AACA,sF;AACA,S;AACA,qF;AACA,sE;AACA,E;;AAEA,wD;;AAEA,oG;AACA,wF;AACA,6F;AACA,mH;AACA,sC;;AAEA,I;AACA,0E;AACA,qE;AACA,G;AACA,uC;AACA,mF;AACA,uE;AACA,oI;AACA,qF;AACA,oC;AACA,wF;AACA,kE;AACA,wE;AACA,wF;AACA,0F;AACA,qF;AACA,8E;AACA,oF;AACA,qD;AACA,G;AACA,gC;AACA,G;AACA,+D;AACA,4E;AACA,2E;AACA,I;AACA,8F;AACA,sD;AACA,2C;AACA,e;AACA,2E;AACA,+B;AACA,8E;AACA,iD;AACA,iE;AACA,gG;AACA,0G;;AAEA,qG;AACA,6C;AACA,U;AACA,uE;AACA,iE;AACA,gG;AACA,yG;;AAEA,mG;AACA,6C;AACA,G;AACA,uD;AACA,G;;AAEA,mC;AACA,E;;;AAGA,0C;AACA,8B;AACA,qD;;AAEA,uC;AACA,yD;AACA,+E;AACA,kD;AACA,qC;AACA,wC;AACA,oF;AACA,4E;AACA,sE;AACA,+C;AACA,0F;AACA,gF;AACA,sE;AACA,U;AACA,qD;AACA,G;AACA,8C;AACA,G;;AAEA,uC;AACA,mD;AACA,yE;AACA,kD;AACA,qC;AACA,iF;AACA,wC;;AAEA,oF;AACA,iF;AACA,yD;AACA,0G;AACA,oI;AACA,oE;AACA,gC;AACA,kC;AACA,4E;AACA,oE;AACA,U;AACA,kD;AACA,G;AACA,+H;AACA,2C;AACA,G;;AAEA,qD;AACA,yD;AACA,+E;AACA,kD;AACA,qC;AACA,qE;AACA,2D;AACA,iE;AACA,mD;AACA,uD;AACA,8C;AACA,G;;AAEA,mC;AACA,6E;AACA,+C;AACA,iE;AACA,wE;AACA,oD;AACA,uC;AACA,4B;AACA,K;AACA,G;AACA,I;;AAEA,iH;AACA,qF;AACA,E;;;AAGA,2C;AACA,yB;AACA,E;;;;;;;;;;;;;;;;;;;ACxMA,a;;AAEA,gB;AACA,I;AACA,+F;AACA,qE;AACA,iD;AACA,6E;AACA,yC;AACA,I;AACA,yF;AACA,0D;AACA,oC;AACA,iF;AACA,E;AACA,G","file":"/packages/rubaxa_sortable.js","sourcesContent":["/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @license MIT\n */\n\n\n(function (factory) {\n\t\"use strict\";\n\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(factory);\n\t}\n\telse if (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {\n\t\tmodule.exports = factory();\n\t}\n\telse if (typeof Package !== \"undefined\") {\n\t\tSortable = factory();  // export for Meteor.js\n\t}\n\telse {\n\t\t/* jshint sub:true */\n\t\twindow[\"Sortable\"] = factory();\n\t}\n})(function () {\n\t\"use strict\";\n\n\tvar dragEl,\n\t\tghostEl,\n\t\tcloneEl,\n\t\trootEl,\n\t\tnextEl,\n\n\t\tscrollEl,\n\t\tscrollParentEl,\n\n\t\tlastEl,\n\t\tlastCSS,\n\n\t\toldIndex,\n\t\tnewIndex,\n\n\t\tactiveGroup,\n\t\tautoScroll = {},\n\n\t\ttapEvt,\n\t\ttouchEvt,\n\n\t\t/** @const */\n\t\tRSPACE = /\\s+/g,\n\n\t\texpando = 'Sortable' + (new Date).getTime(),\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\n\t\tsupportDraggable = !!('draggable' in document.createElement('div')),\n\n\t\t_silent = false,\n\n\t\t_dispatchEvent = function (sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {\n\t\t\tvar evt = document.createEvent('Event'),\n\t\t\t\toptions = (sortable || rootEl[expando]).options,\n\t\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\n\t\t\tevt.initEvent(name, true, true);\n\n\t\t\tevt.item = targetEl || rootEl;\n\t\t\tevt.from = fromEl || rootEl;\n\t\t\tevt.clone = cloneEl;\n\n\t\t\tevt.oldIndex = startIndex;\n\t\t\tevt.newIndex = newIndex;\n\n\t\t\tif (options[onName]) {\n\t\t\t\toptions[onName].call(sortable, evt);\n\t\t\t}\n\n\t\t\trootEl.dispatchEvent(evt);\n\t\t},\n\n\t\tabs = Math.abs,\n\t\tslice = [].slice,\n\n\t\ttouchDragOverListeners = [],\n\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\t\tif (rootEl && options.scroll) {\n\t\t\t\tvar el,\n\t\t\t\t\trect,\n\t\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\t\tx = evt.clientX,\n\t\t\t\t\ty = evt.clientY,\n\n\t\t\t\t\twinWidth = window.innerWidth,\n\t\t\t\t\twinHeight = window.innerHeight,\n\n\t\t\t\t\tvx,\n\t\t\t\t\tvy\n\t\t\t\t;\n\n\t\t\t\t// Delect scrollEl\n\t\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t\tscrollEl = options.scroll;\n\t\t\t\t\tscrollParentEl = rootEl;\n\n\t\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\t\tscrollEl = rootEl;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||\n\t\t\t\t\t\t\t\t(scrollEl.offsetHeight < scrollEl.scrollHeight)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\t\t} while (scrollEl = scrollEl.parentNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (scrollEl) {\n\t\t\t\t\tel = scrollEl;\n\t\t\t\t\trect = scrollEl.getBoundingClientRect();\n\t\t\t\t\tvx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);\n\t\t\t\t\tvy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);\n\t\t\t\t}\n\n\n\t\t\t\tif (!(vx || vy)) {\n\t\t\t\t\tvx = (winWidth - x <= sens) - (x <= sens);\n\t\t\t\t\tvy = (winHeight - y <= sens) - (y <= sens);\n\n\t\t\t\t\t/* jshint expr:true */\n\t\t\t\t\t(vx || vy) && (el = win);\n\t\t\t\t}\n\n\n\t\t\t\tif (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {\n\t\t\t\t\tautoScroll.el = el;\n\t\t\t\t\tautoScroll.vx = vx;\n\t\t\t\t\tautoScroll.vy = vy;\n\n\t\t\t\t\tclearInterval(autoScroll.pid);\n\n\t\t\t\t\tif (el) {\n\t\t\t\t\t\tautoScroll.pid = setInterval(function () {\n\t\t\t\t\t\t\tif (el === win) {\n\t\t\t\t\t\t\t\twin.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvy && (el.scrollTop += vy * speed);\n\t\t\t\t\t\t\t\tvx && (el.scrollLeft += vx * speed);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 24);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 30)\n\t;\n\n\n\n\t/**\n\t * @class  Sortable\n\t * @param  {HTMLElement}  el\n\t * @param  {Object}       [options]\n\t */\n\tfunction Sortable(el, options) {\n\t\tthis.el = el; // root element\n\t\tthis.options = options = _extend({}, options);\n\n\n\t\t// Export instance\n\t\tel[expando] = this;\n\n\n\t\t// Default options\n\t\tvar defaults = {\n\t\t\tgroup: Math.random(),\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tanimation: 0,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0\n\t\t};\n\n\n\t\t// Set default options\n\t\tfor (var name in defaults) {\n\t\t\t!(name in options) && (options[name] = defaults[name]);\n\t\t}\n\n\n\t\tvar group = options.group;\n\n\t\tif (!group || typeof group != 'object') {\n\t\t\tgroup = options.group = { name: group };\n\t\t}\n\n\n\t\t['pull', 'put'].forEach(function (key) {\n\t\t\tif (!(key in group)) {\n\t\t\t\tgroup[key] = true;\n\t\t\t}\n\t\t});\n\n\n\t\toptions.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';\n\n\n\t\t// Bind all private methods\n\t\tfor (var fn in this) {\n\t\t\tif (fn.charAt(0) === '_') {\n\t\t\t\tthis[fn] = _bind(this, this[fn]);\n\t\t\t}\n\t\t}\n\n\n\t\t// Bind events\n\t\t_on(el, 'mousedown', this._onTapStart);\n\t\t_on(el, 'touchstart', this._onTapStart);\n\n\t\t_on(el, 'dragover', this);\n\t\t_on(el, 'dragenter', this);\n\n\t\ttouchDragOverListeners.push(this._onDragOver);\n\n\t\t// Restore sorting\n\t\toptions.store && this.sort(options.store.get(this));\n\t}\n\n\n\tSortable.prototype = /** @lends Sortable.prototype */ {\n\t\tconstructor: Sortable,\n\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\n\t\t\tvar _this = this,\n\t\t\t\tel = this.el,\n\t\t\t\toptions = this.options,\n\t\t\t\ttype = evt.type,\n\t\t\t\ttouch = evt.touches && evt.touches[0],\n\t\t\t\ttarget = (touch || evt).target,\n\t\t\t\toriginalTarget = target,\n\t\t\t\tfilter = options.filter;\n\n\n\t\t\tif (type === 'mousedown' && evt.button !== 0 || options.disabled) {\n\t\t\t\treturn; // only left button or enabled\n\t\t\t}\n\n\t\t\ttarget = _closest(target, options.draggable, el);\n\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get the index of the dragged element within its parent\n\t\t\toldIndex = _index(target);\n\n\t\t\t// Check filter\n\t\t\tif (typeof filter === 'function') {\n\t\t\t\tif (filter.call(this, evt, target, this)) {\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (filter) {\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el);\n\n\t\t\t\t\tif (criteria) {\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (filter) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\t// Prepare `dragstart`\n\t\t\tthis._prepareDragStart(evt, touch, target);\n\t\t},\n\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target) {\n\t\t\tvar _this = this,\n\t\t\t\tel = _this.el,\n\t\t\t\toptions = _this.options,\n\t\t\t\townerDocument = el.ownerDocument,\n\t\t\t\tdragStartFn;\n\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\n\t\t\t\ttapEvt = evt;\n\n\t\t\t\trootEl = el;\n\t\t\t\tdragEl = target;\n\t\t\t\tnextEl = dragEl.nextSibling;\n\t\t\t\tactiveGroup = options.group;\n\n\t\t\t\tdragStartFn = function () {\n\t\t\t\t\t// Delayed drag has been triggered\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\n\t\t\t\t\t_this._disableDelayedDrag();\n\n\t\t\t\t\t// Make the element draggable\n\t\t\t\t\tdragEl.draggable = true;\n\n\t\t\t\t\t// Disable \"draggable\"\n\t\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\n\t\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Bind the events: dragstart/dragend\n\t\t\t\t\t_this._triggerDragStart(touch);\n\t\t\t\t};\n\n\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);\n\n\t\t\t\tif (options.delay) {\n\t\t\t\t\t// If the user moves the pointer before the delay has been reached:\n\t\t\t\t\t// disable the delayed drag\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);\n\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n\t\t\t\t} else {\n\t\t\t\t\tdragStartFn();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_disableDelayedDrag: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\t_off(ownerDocument, 'mousemove', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchmove', this._disableDelayedDrag);\n\t\t},\n\n\t\t_triggerDragStart: function (/** Touch */touch) {\n\t\t\tif (touch) {\n\t\t\t\t// Touch device support\n\t\t\t\ttapEvt = {\n\t\t\t\t\ttarget: dragEl,\n\t\t\t\t\tclientX: touch.clientX,\n\t\t\t\t\tclientY: touch.clientY\n\t\t\t\t};\n\n\t\t\t\tthis._onDragStart(tapEvt, 'touch');\n\t\t\t}\n\t\t\telse if (!supportDraggable) {\n\t\t\t\tthis._onDragStart(tapEvt, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_on(dragEl, 'dragend', this);\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (document.selection) {\n\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t} else {\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t},\n\n\t\t_dragStarted: function () {\n\t\t\tif (rootEl && dragEl) {\n\t\t\t\t// Apply effect\n\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, true);\n\n\t\t\t\tSortable.active = this;\n\n\t\t\t\t// Drag start event\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);\n\t\t\t}\n\t\t},\n\n\t\t_emulateDragOver: function () {\n\t\t\tif (touchEvt) {\n\t\t\t\t_css(ghostEl, 'display', 'none');\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),\n\t\t\t\t\tparent = target,\n\t\t\t\t\tgroupName = ' ' + this.options.group.name + '',\n\t\t\t\t\ti = touchDragOverListeners.length;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\ttouchDragOverListeners[i]({\n\t\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\n\t\t\t\t_css(ghostEl, 'display', '');\n\t\t\t}\n\t\t},\n\n\n\t\t_onTouchMove: function (/**TouchEvent*/evt) {\n\t\t\tif (tapEvt) {\n\t\t\t\tvar touch = evt.touches ? evt.touches[0] : evt,\n\t\t\t\t\tdx = touch.clientX - tapEvt.clientX,\n\t\t\t\t\tdy = touch.clientY - tapEvt.clientY,\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n\t\t\t\ttouchEvt = touch;\n\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'transform', translate3d);\n\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t},\n\n\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {\n\t\t\tvar dataTransfer = evt.dataTransfer,\n\t\t\t\toptions = this.options;\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (activeGroup.pull == 'clone') {\n\t\t\t\tcloneEl = dragEl.cloneNode(true);\n\t\t\t\t_css(cloneEl, 'display', 'none');\n\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t}\n\n\t\t\tif (useFallback) {\n\t\t\t\tvar rect = dragEl.getBoundingClientRect(),\n\t\t\t\t\tcss = _css(dragEl),\n\t\t\t\t\tghostRect;\n\n\t\t\t\tghostEl = dragEl.cloneNode(true);\n\n\t\t\t\t_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));\n\t\t\t\t_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));\n\t\t\t\t_css(ghostEl, 'width', rect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height);\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');\n\t\t\t\t_css(ghostEl, 'position', 'fixed');\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');\n\n\t\t\t\trootEl.appendChild(ghostEl);\n\n\t\t\t\t// Fixing dimensions.\n\t\t\t\tghostRect = ghostEl.getBoundingClientRect();\n\t\t\t\t_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);\n\n\t\t\t\tif (useFallback === 'touch') {\n\t\t\t\t\t// Bind touch events\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'touchend', this._onDrop);\n\t\t\t\t\t_on(document, 'touchcancel', this._onDrop);\n\t\t\t\t} else {\n\t\t\t\t\t// Old brwoser\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'mouseup', this._onDrop);\n\t\t\t\t}\n\n\t\t\t\tthis._loopId = setInterval(this._emulateDragOver, 150);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (dataTransfer) {\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\t\t\toptions.setData && options.setData.call(this, dataTransfer, dragEl);\n\t\t\t\t}\n\n\t\t\t\t_on(document, 'drop', this);\n\t\t\t}\n\n\t\t\tsetTimeout(this._dragStarted, 0);\n\t\t},\n\n\t\t_onDragOver: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\ttarget,\n\t\t\t\tdragRect,\n\t\t\t\trevert,\n\t\t\t\toptions = this.options,\n\t\t\t\tgroup = options.group,\n\t\t\t\tgroupPut = group.put,\n\t\t\t\tisOwner = (activeGroup === group),\n\t\t\t\tcanSort = options.sort;\n\n\t\t\tif (evt.preventDefault !== void 0) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation();\n\t\t\t}\n\n\t\t\tif (activeGroup && !options.disabled &&\n\t\t\t\t(isOwner\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl))\n\t\t\t\t\t: activeGroup.pull && groupPut && (\n\t\t\t\t\t\t(activeGroup.name === group.name) || // by Name\n\t\t\t\t\t\t(groupPut.indexOf && ~groupPut.indexOf(activeGroup.name)) // by Array\n\t\t\t\t\t)\n\t\t\t\t) &&\n\t\t\t\t(evt.rootEl === void 0 || evt.rootEl === this.el)\n\t\t\t) {\n\t\t\t\t// Smart auto-scrolling\n\t\t\t\t_autoScroll(evt, options, this.el);\n\n\t\t\t\tif (_silent) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttarget = _closest(evt.target, options.draggable, el);\n\t\t\t\tdragRect = dragEl.getBoundingClientRect();\n\n\n\t\t\t\tif (revert) {\n\t\t\t\t\t_cloneHide(true);\n\n\t\t\t\t\tif (cloneEl || nextEl) {\n\t\t\t\t\t\trootEl.insertBefore(dragEl, cloneEl || nextEl);\n\t\t\t\t\t}\n\t\t\t\t\telse if (!canSort) {\n\t\t\t\t\t\trootEl.appendChild(dragEl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tif ((el.children.length === 0) || (el.children[0] === ghostEl) ||\n\t\t\t\t\t(el === evt.target) && (target = _ghostInBottom(el, evt))\n\t\t\t\t) {\n\t\t\t\t\tif (target) {\n\t\t\t\t\t\tif (target.animated) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttargetRect = target.getBoundingClientRect();\n\t\t\t\t\t}\n\n\t\t\t\t\t_cloneHide(isOwner);\n\n\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\ttarget && this._animate(targetRect, target);\n\t\t\t\t}\n\t\t\t\telse if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {\n\t\t\t\t\tif (lastEl !== target) {\n\t\t\t\t\t\tlastEl = target;\n\t\t\t\t\t\tlastCSS = _css(target);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tvar targetRect = target.getBoundingClientRect(),\n\t\t\t\t\t\twidth = targetRect.right - targetRect.left,\n\t\t\t\t\t\theight = targetRect.bottom - targetRect.top,\n\t\t\t\t\t\tfloating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display),\n\t\t\t\t\t\tisWide = (target.offsetWidth > dragEl.offsetWidth),\n\t\t\t\t\t\tisLong = (target.offsetHeight > dragEl.offsetHeight),\n\t\t\t\t\t\thalfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,\n\t\t\t\t\t\tnextSibling = target.nextElementSibling,\n\t\t\t\t\t\tafter\n\t\t\t\t\t;\n\n\t\t\t\t\t_silent = true;\n\t\t\t\t\tsetTimeout(_unsilent, 30);\n\n\t\t\t\t\t_cloneHide(isOwner);\n\n\t\t\t\t\tif (floating) {\n\t\t\t\t\t\tafter = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter = (nextSibling !== dragEl) && !isLong || halfway && isLong;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (after && !nextSibling) {\n\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\tthis._animate(targetRect, target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = target.getBoundingClientRect();\n\n\t\t\t\t_css(target, 'transition', 'none');\n\t\t\t\t_css(target, 'transform', 'translate3d('\n\t\t\t\t\t+ (prevRect.left - currentRect.left) + 'px,'\n\t\t\t\t\t+ (prevRect.top - currentRect.top) + 'px,0)'\n\t\t\t\t);\n\n\t\t\t\ttarget.offsetWidth; // repaint\n\n\t\t\t\t_css(target, 'transition', 'all ' + ms + 'ms');\n\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');\n\n\t\t\t\tclearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\t_css(target, 'transition', '');\n\t\t\t\t\t_css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n\t\t_offUpEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\t_off(document, 'touchmove', this._onTouchMove);\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);\n\t\t},\n\n\t\t_onDrop: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\toptions = this.options;\n\n\t\t\tclearInterval(this._loopId);\n\t\t\tclearInterval(autoScroll.pid);\n\n\t\t\tclearTimeout(this.dragStartTimer);\n\n\t\t\t// Unbind events\n\t\t\t_off(document, 'drop', this);\n\t\t\t_off(document, 'mousemove', this._onTouchMove);\n\t\t\t_off(el, 'dragstart', this._onDragStart);\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (evt) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\t!options.dropBubble && evt.stopPropagation();\n\n\t\t\t\tghostEl && ghostEl.parentNode.removeChild(ghostEl);\n\n\t\t\t\tif (dragEl) {\n\t\t\t\t\t_off(dragEl, 'dragend', this);\n\n\t\t\t\t\t_disableDraggable(dragEl);\n\t\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, false);\n\n\t\t\t\t\tif (rootEl !== dragEl.parentNode) {\n\t\t\t\t\t\tnewIndex = _index(dragEl);\n\n\t\t\t\t\t\t// drag from one list and drop into another\n\t\t\t\t\t\t_dispatchEvent(null, dragEl.parentNode, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t// Add event\n\t\t\t\t\t\t_dispatchEvent(null, dragEl.parentNode, 'add', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t// Remove event\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Remove clone\n\t\t\t\t\t\tcloneEl && cloneEl.parentNode.removeChild(cloneEl);\n\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\n\n\t\t\t\t\t\t\t// drag & drop within the same list\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Drag end event\n\t\t\t\t\tSortable.active && _dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t}\n\n\t\t\t\t// Nulling\n\t\t\t\trootEl =\n\t\t\t\tdragEl =\n\t\t\t\tghostEl =\n\t\t\t\tnextEl =\n\t\t\t\tcloneEl =\n\n\t\t\t\tscrollEl =\n\t\t\t\tscrollParentEl =\n\n\t\t\t\ttapEvt =\n\t\t\t\ttouchEvt =\n\n\t\t\t\tlastEl =\n\t\t\t\tlastCSS =\n\n\t\t\t\tactiveGroup =\n\t\t\t\tSortable.active = null;\n\n\t\t\t\t// Save sorting\n\t\t\t\tthis.save();\n\t\t\t}\n\t\t},\n\n\n\t\thandleEvent: function (/**Event*/evt) {\n\t\t\tvar type = evt.type;\n\n\t\t\tif (type === 'dragover' || type === 'dragenter') {\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tthis._onDragOver(evt);\n\t\t\t\t\t_globalDragOver(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type === 'drop' || type === 'dragend') {\n\t\t\t\tthis._onDrop(evt);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (_closest(el, options.draggable, this.el)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el);\n\t\t},\n\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[expando] = null;\n\n\t\t\t_off(el, 'mousedown', this._onTapStart);\n\t\t\t_off(el, 'touchstart', this._onTapStart);\n\n\t\t\t_off(el, 'dragover', this);\n\t\t\t_off(el, 'dragenter', this);\n\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\ttouchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);\n\n\t\t\tthis._onDrop();\n\n\t\t\tthis.el = el = null;\n\t\t}\n\t};\n\n\n\tfunction _cloneHide(state) {\n\t\tif (cloneEl && (cloneEl.state !== state)) {\n\t\t\t_css(cloneEl, 'display', state ? 'none' : '');\n\t\t\t!state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);\n\t\t\tcloneEl.state = state;\n\t\t}\n\t}\n\n\n\tfunction _bind(ctx, fn) {\n\t\tvar args = slice.call(arguments, 2);\n\t\treturn\tfn.bind ? fn.bind.apply(fn, [ctx].concat(args)) : function () {\n\t\t\treturn fn.apply(ctx, args.concat(slice.call(arguments)));\n\t\t};\n\t}\n\n\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {\n\t\tif (el) {\n\t\t\tctx = ctx || document;\n\t\t\tselector = selector.split('.');\n\n\t\t\tvar tag = selector.shift().toUpperCase(),\n\t\t\t\tre = new RegExp('\\\\s(' + selector.join('|') + ')\\\\s', 'g');\n\n\t\t\tdo {\n\t\t\t\tif (\n\t\t\t\t\t(tag === '>*' && el.parentNode === ctx) || (\n\t\t\t\t\t\t(tag === '' || el.nodeName.toUpperCase() == tag) &&\n\t\t\t\t\t\t(!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (el !== ctx && (el = el.parentNode));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tfunction _globalDragOver(/**Event*/evt) {\n\t\tevt.dataTransfer.dropEffect = 'move';\n\t\tevt.preventDefault();\n\t}\n\n\n\tfunction _on(el, event, fn) {\n\t\tel.addEventListener(event, fn, false);\n\t}\n\n\n\tfunction _off(el, event, fn) {\n\t\tel.removeEventListener(event, fn, false);\n\t}\n\n\n\tfunction _toggleClass(el, name, state) {\n\t\tif (el) {\n\t\t\tif (el.classList) {\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _css(el, prop, val) {\n\t\tvar style = el && el.style;\n\n\t\tif (style) {\n\t\t\tif (val === void 0) {\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');\n\t\t\t\t}\n\t\t\t\telse if (el.currentStyle) {\n\t\t\t\t\tval = el.currentStyle;\n\t\t\t\t}\n\n\t\t\t\treturn prop === void 0 ? val : val[prop];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(prop in style)) {\n\t\t\t\t\tprop = '-webkit-' + prop;\n\t\t\t\t}\n\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _find(ctx, tagName, iterator) {\n\t\tif (ctx) {\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\n\n\t\t\tif (iterator) {\n\t\t\t\tfor (; i < n; i++) {\n\t\t\t\t\titerator(list[i], i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\tfunction _disableDraggable(el) {\n\t\tel.draggable = false;\n\t}\n\n\n\tfunction _unsilent() {\n\t\t_silent = false;\n\t}\n\n\n\t/** @returns {HTMLElement|false} */\n\tfunction _ghostInBottom(el, evt) {\n\t\tvar lastEl = el.lastElementChild, rect = lastEl.getBoundingClientRect();\n\t\treturn (evt.clientY - (rect.top + rect.height) > 5) && lastEl; // min delta\n\t}\n\n\n\t/**\n\t * Generate id\n\t * @param   {HTMLElement} el\n\t * @returns {String}\n\t * @private\n\t */\n\tfunction _generateId(el) {\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\n\t\t\ti = str.length,\n\t\t\tsum = 0;\n\n\t\twhile (i--) {\n\t\t\tsum += str.charCodeAt(i);\n\t\t}\n\n\t\treturn sum.toString(36);\n\t}\n\n\t/**\n\t * Returns the index of an element within its parent\n\t * @param el\n\t * @returns {number}\n\t * @private\n\t */\n\tfunction _index(/**HTMLElement*/el) {\n\t\tvar index = 0;\n\t\twhile (el && (el = el.previousElementSibling)) {\n\t\t\tif (el.nodeName.toUpperCase() !== 'TEMPLATE') {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\tfunction _throttle(callback, ms) {\n\t\tvar args, _this;\n\n\t\treturn function () {\n\t\t\tif (args === void 0) {\n\t\t\t\targs = arguments;\n\t\t\t\t_this = this;\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (args.length === 1) {\n\t\t\t\t\t\tcallback.call(_this, args[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback.apply(_this, args);\n\t\t\t\t\t}\n\n\t\t\t\t\targs = void 0;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction _extend(dst, src) {\n\t\tif (dst && src) {\n\t\t\tfor (var key in src) {\n\t\t\t\tif (src.hasOwnProperty(key)) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\n\t// Export utils\n\tSortable.utils = {\n\t\ton: _on,\n\t\toff: _off,\n\t\tcss: _css,\n\t\tfind: _find,\n\t\tbind: _bind,\n\t\tis: function (el, selector) {\n\t\t\treturn !!_closest(el, selector, el);\n\t\t},\n\t\textend: _extend,\n\t\tthrottle: _throttle,\n\t\tclosest: _closest,\n\t\ttoggleClass: _toggleClass,\n\t\tindex: _index\n\t};\n\n\n\tSortable.version = '1.2.0';\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\t// Export\n\treturn Sortable;\n});\n","\nTemplate.__checkName(\"sortable\");\nTemplate[\"sortable\"] = new Template(\"Template.sortable\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"items\"));\n  }, function() {\n    return [ \"\\n\t\t\", Blaze._InOuterTemplateScope(view, function() {\n      return Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\".\"));\n      }, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateContentBlock);\n        });\n      });\n    }), \"\\n\t\" ];\n  });\n}));\n","/*\nMake a Sortable reactive by binding it to a Mongo.Collection.\nCalls `rubaxa:sortable/collection-update` on the server to update the sortField of affected records.\n\nTODO:\n  * supply consecutive values if the `order` field doesn't have any\n  * .get(DOMElement) - return the Sortable object of a DOMElement\n  * create a new _id automatically onAdd if the event.from list had pull: 'clone'\n  * support arrays\n    * sparse arrays\n  * tests\n    * drop onto existing empty lists\n    * insert back into lists emptied by dropping\n    * performance on dragging into long list at the beginning\n  * handle failures on Collection operations, e.g. add callback to .insert\n  * when adding elements, update ranks just for the half closer to the start/end of the list\n  * revisit http://programmers.stackexchange.com/questions/266451/maintain-ordered-collection-by-updating-as-few-order-fields-as-possible\n  * reproduce the insidious bug where the list isn't always sorted (fiddle with dragging #1 over #2, then back, then #N before #1)\n\n */\n\n'use strict';\n\nTemplate.sortable.created = function () {\n\tvar templateInstance = this;\n\t// `this` is a template instance that can store properties of our choice - http://docs.meteor.com/#/full/template_inst\n\tif (templateInstance.setupDone) return;  // paranoid: only run setup once\n\t// this.data is the data context - http://docs.meteor.com/#/full/template_data\n\t// normalize all options into templateInstance.options, and remove them from .data\n\ttemplateInstance.options = templateInstance.data.options || {};\n\tObject.keys(templateInstance.data).forEach(function (key) {\n\t\tif (key === 'options' || key === 'items') return;\n\t\ttemplateInstance.options[key] = templateInstance.data[key];\n\t\tdelete templateInstance.data[key];\n\t});\n\ttemplateInstance.options.sortField = templateInstance.options.sortField || 'order';\n\t// We can get the collection via the .collection property of the cursor, but changes made that way\n\t// will NOT be sent to the server - https://github.com/meteor/meteor/issues/3271#issuecomment-66656257\n\t// Thus we need to use dburles:mongo-collection-instances to get a *real* collection\n\tif (templateInstance.data.items && templateInstance.data.items.collection) {\n\t\t// cursor passed via items=; its .collection works client-only and has a .name property\n\t\ttemplateInstance.collectionName = templateInstance.data.items.collection.name;\n\t\ttemplateInstance.collection = Mongo.Collection.get(templateInstance.collectionName);\n\t}\telse if (templateInstance.data.items) {\n\t\t// collection passed via items=; does NOT have a .name property, but _name\n\t\ttemplateInstance.collection = templateInstance.data.items;\n\t\ttemplateInstance.collectionName = templateInstance.collection._name;\n\t}\telse if (templateInstance.data.collection) {\n\t  // cursor passed directly\n\t\ttemplateInstance.collectionName = templateInstance.data.collection.name;\n\t\ttemplateInstance.collection = Mongo.Collection.get(templateInstance.collectionName);\n\t} else {\n\t\ttemplateInstance.collection = templateInstance.data;  // collection passed directly\n\t\ttemplateInstance.collectionName = templateInstance.collection._name;\n\t}\n\n\t// TODO if (Array.isArray(templateInstance.collection))\n\n\t// What if user filters some of the items in the cursor, instead of ordering the entire collection?\n\t// Use case: reorder by preference movies of a given genre, a filter within all movies.\n\t// A: Modify all intervening items **that are on the client**, to preserve the overall order\n\t// TODO: update *all* orders via a server method that takes not ids, but start & end elements - mild security risk\n\tdelete templateInstance.data.options;\n\n\t/**\n\t * When an element was moved, adjust its orders and possibly the order of\n\t * other elements, so as to maintain a consistent and correct order.\n\t *\n\t * There are three approaches to this:\n\t * 1) Using arbitrary precision arithmetic and setting only the order of the moved\n\t *    element to the average of the orders of the elements around it -\n\t *    http://programmers.stackexchange.com/questions/266451/maintain-ordered-collection-by-updating-as-few-order-fields-as-possible\n\t *    The downside is that the order field in the DB will increase by one byte every\n\t *    time an element is reordered.\n\t * 2) Adjust the orders of the intervening items. This keeps the orders sane (integers)\n\t *    but is slower because we have to modify multiple documents.\n\t *    TODO: we may be able to update fewer records by only altering the\n\t *    order of the records between the newIndex/oldIndex and the start/end of the list.\n\t * 3) Use regular precision arithmetic, but when the difference between the orders of the\n\t *    moved item and the one before/after it falls below a certain threshold, adjust\n\t *    the order of that other item, and cascade doing so up or down the list.\n\t *    This will keep the `order` field constant in size, and will only occasionally\n\t *    require updating the `order` of other records.\n\t *\n\t * For now, we use approach #2.\n\t *\n\t * @param {String} itemId - the _id of the item that was moved\n\t * @param {Number} orderPrevItem - the order of the item before it, or null\n\t * @param {Number} orderNextItem - the order of the item after it, or null\n\t */\n\ttemplateInstance.adjustOrders = function adjustOrders(itemId, orderPrevItem, orderNextItem) {\n\t\tvar orderField = templateInstance.options.sortField;\n\t\tvar selector = {}, modifier = {$set: {}};\n\t\tvar ids = [];\n\t\tvar startOrder = templateInstance.collection.findOne(itemId)[orderField];\n\t\tif (orderPrevItem !== null) {\n\t\t\t// Element has a previous sibling, therefore it was moved down in the list.\n\t\t\t// Decrease the order of intervening elements.\n\t\t\tselector[orderField] = {$lte: orderPrevItem, $gt: startOrder};\n\t\t\tids = _.pluck(templateInstance.collection.find(selector, {fields: {_id: 1}}).fetch(), '_id');\n\t\t\tMeteor.call('rubaxa:sortable/collection-update', templateInstance.collectionName, ids, orderField, -1);\n\n\t\t\t// Set the order of the dropped element to the order of its predecessor, whose order was decreased\n\t\t\tmodifier.$set[orderField] = orderPrevItem;\n\t\t} else {\n\t\t\t// element moved up the list, increase order of intervening elements\n\t\t\tselector[orderField] = {$gte: orderNextItem, $lt: startOrder};\n\t\t\tids = _.pluck(templateInstance.collection.find(selector, {fields: {_id: 1}}).fetch(), '_id');\n\t\t\tMeteor.call('rubaxa:sortable/collection-update', templateInstance.collectionName, ids, orderField, 1);\n\n\t\t\t// Set the order of the dropped element to the order of its successor, whose order was increased\n\t\t\tmodifier.$set[orderField] = orderNextItem;\n\t\t}\n\t\ttemplateInstance.collection.update(itemId, modifier);\n\t};\n\n\ttemplateInstance.setupDone = true;\n};\n\n\nTemplate.sortable.rendered = function () {\n  var templateInstance = this;\n\tvar orderField = templateInstance.options.sortField;\n\n\t// sorting was changed within the list\n\tvar optionsOnUpdate = templateInstance.options.onUpdate;\n\ttemplateInstance.options.onUpdate = function sortableUpdate(/**Event*/event) {\n\t\tvar itemEl = event.item;  // dragged HTMLElement\n\t\tevent.data = Blaze.getData(itemEl);\n\t\tif (event.newIndex < event.oldIndex) {\n\t\t\t// Element moved up in the list. The dropped element has a next sibling for sure.\n\t\t\tvar orderNextItem = Blaze.getData(itemEl.nextElementSibling)[orderField];\n\t\t\ttemplateInstance.adjustOrders(event.data._id, null, orderNextItem);\n\t\t} else if (event.newIndex > event.oldIndex) {\n\t\t\t// Element moved down in the list. The dropped element has a previous sibling for sure.\n\t\t\tvar orderPrevItem = Blaze.getData(itemEl.previousElementSibling)[orderField];\n\t\t\ttemplateInstance.adjustOrders(event.data._id, orderPrevItem, null);\n\t\t} else {\n\t\t\t// do nothing - drag and drop in the same location\n\t\t}\n\t\tif (optionsOnUpdate) optionsOnUpdate(event);\n\t};\n\n\t// element was added from another list\n\tvar optionsOnAdd = templateInstance.options.onAdd;\n\ttemplateInstance.options.onAdd = function sortableAdd(/**Event*/event) {\n\t\tvar itemEl = event.item;  // dragged HTMLElement\n\t\tevent.data = Blaze.getData(itemEl);\n\t\t// let the user decorate the object with additional properties before insertion\n\t\tif (optionsOnAdd) optionsOnAdd(event);\n\n\t\t// Insert the new element at the end of the list and move it where it was dropped.\n\t\t// We could insert it at the beginning, but that would lead to negative orders.\n\t\tvar sortSpecifier = {}; sortSpecifier[orderField] = -1;\n\t\tevent.data.order = templateInstance.collection.findOne({}, { sort: sortSpecifier, limit: 1 }).order + 1;\n\t\t// TODO: this can obviously be optimized by setting the order directly as the arithmetic average, with the caveats described above\n\t\tvar newElementId = templateInstance.collection.insert(event.data);\n\t\tevent.data._id = newElementId;\n\t\tif (itemEl.nextElementSibling) {\n\t\t\tvar orderNextItem = Blaze.getData(itemEl.nextElementSibling)[orderField];\n\t\t\ttemplateInstance.adjustOrders(newElementId, null, orderNextItem);\n\t\t} else {\n\t\t\t// do nothing - inserted after the last element\n\t\t}\n\t\t// remove the dropped HTMLElement from the list because we have inserted it in the collection, which will update the template\n\t\titemEl.parentElement.removeChild(itemEl);\n\t};\n\n\t// element was removed by dragging into another list\n\tvar optionsOnRemove = templateInstance.options.onRemove;\n\ttemplateInstance.options.onRemove = function sortableRemove(/**Event*/event) {\n\t\tvar itemEl = event.item;  // dragged HTMLElement\n\t\tevent.data = Blaze.getData(itemEl);\n\t\t// don't remove from the collection if group.pull is clone or false\n\t\tif (typeof templateInstance.options.group === 'undefined'\n\t\t\t\t|| typeof templateInstance.options.group.pull === 'undefined'\n\t\t\t\t|| templateInstance.options.group.pull === true\n\t\t) templateInstance.collection.remove(event.data._id);\n\t\tif (optionsOnRemove) optionsOnRemove(event);\n\t};\n\n\t// just compute the `data` context\n\t['onStart', 'onEnd', 'onSort', 'onFilter'].forEach(function (eventHandler) {\n\t\tif (templateInstance.options[eventHandler]) {\n\t\t\tvar userEventHandler = templateInstance.options[eventHandler];\n\t\t\ttemplateInstance.options[eventHandler] = function (/**Event*/event) {\n\t\t\t\tvar itemEl = event.item;  // dragged HTMLElement\n\t\t\t\tevent.data = Blaze.getData(itemEl);\n\t\t\t\tuserEventHandler(event);\n\t\t\t};\n\t\t}\n\t});\n\n\ttemplateInstance.sortable = Sortable.create(templateInstance.firstNode.parentElement, templateInstance.options);\n\t// TODO make the object accessible, e.g. via Sortable.getSortableById() or some such\n};\n\n\nTemplate.sortable.destroyed = function () {\n\tthis.sortable.destroy();\n};\n","'use strict';\n\nMeteor.methods({\n\t/**\n\t * Update the sortField of documents with given ids in a collection, incrementing it by incDec\n\t * @param {String} collectionName - name of the collection to update\n\t * @param {String[]} ids - array of document ids\n\t * @param {String} orderField - the name of the order field, usually \"order\"\n\t * @param {Number} incDec - pass 1 or -1\n\t */\n\t'rubaxa:sortable/collection-update': function (collectionName, ids, sortField, incDec) {\n\t\tvar selector = {_id: {$in: ids}}, modifier = {$inc: {}};\n\t\tmodifier.$inc[sortField] = incDec;\n\t\tMongo.Collection.get(collectionName).update(selector, modifier, {multi: true});\n\t}\n});\n"]}