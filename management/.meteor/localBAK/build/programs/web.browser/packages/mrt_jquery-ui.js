//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mrt:jquery-ui/lib/jquery-ui-1.9.2.custom.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! jQuery UI - v1.9.2 - 2013-03-08                                                                                    // 1
* http://jqueryui.com                                                                                                  // 2
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
* Copyright (c) 2013 jQuery Foundation and other contributors Licensed MIT */                                          // 4
                                                                                                                       // 5
(function( $, undefined ) {                                                                                            // 6
                                                                                                                       // 7
var uuid = 0,                                                                                                          // 8
	runiqueId = /^ui-id-\d+$/;                                                                                            // 9
                                                                                                                       // 10
// prevent duplicate loading                                                                                           // 11
// this is only a problem because we proxy existing functions                                                          // 12
// and we don't want to double proxy them                                                                              // 13
$.ui = $.ui || {};                                                                                                     // 14
if ( $.ui.version ) {                                                                                                  // 15
	return;                                                                                                               // 16
}                                                                                                                      // 17
                                                                                                                       // 18
$.extend( $.ui, {                                                                                                      // 19
	version: "1.9.2",                                                                                                     // 20
                                                                                                                       // 21
	keyCode: {                                                                                                            // 22
		BACKSPACE: 8,                                                                                                        // 23
		COMMA: 188,                                                                                                          // 24
		DELETE: 46,                                                                                                          // 25
		DOWN: 40,                                                                                                            // 26
		END: 35,                                                                                                             // 27
		ENTER: 13,                                                                                                           // 28
		ESCAPE: 27,                                                                                                          // 29
		HOME: 36,                                                                                                            // 30
		LEFT: 37,                                                                                                            // 31
		NUMPAD_ADD: 107,                                                                                                     // 32
		NUMPAD_DECIMAL: 110,                                                                                                 // 33
		NUMPAD_DIVIDE: 111,                                                                                                  // 34
		NUMPAD_ENTER: 108,                                                                                                   // 35
		NUMPAD_MULTIPLY: 106,                                                                                                // 36
		NUMPAD_SUBTRACT: 109,                                                                                                // 37
		PAGE_DOWN: 34,                                                                                                       // 38
		PAGE_UP: 33,                                                                                                         // 39
		PERIOD: 190,                                                                                                         // 40
		RIGHT: 39,                                                                                                           // 41
		SPACE: 32,                                                                                                           // 42
		TAB: 9,                                                                                                              // 43
		UP: 38                                                                                                               // 44
	}                                                                                                                     // 45
});                                                                                                                    // 46
                                                                                                                       // 47
// plugins                                                                                                             // 48
$.fn.extend({                                                                                                          // 49
	_focus: $.fn.focus,                                                                                                   // 50
	focus: function( delay, fn ) {                                                                                        // 51
		return typeof delay === "number" ?                                                                                   // 52
			this.each(function() {                                                                                              // 53
				var elem = this;                                                                                                   // 54
				setTimeout(function() {                                                                                            // 55
					$( elem ).focus();                                                                                                // 56
					if ( fn ) {                                                                                                       // 57
						fn.call( elem );                                                                                                 // 58
					}                                                                                                                 // 59
				}, delay );                                                                                                        // 60
			}) :                                                                                                                // 61
			this._focus.apply( this, arguments );                                                                               // 62
	},                                                                                                                    // 63
                                                                                                                       // 64
	scrollParent: function() {                                                                                            // 65
		var scrollParent;                                                                                                    // 66
		if (($.ui.ie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {      // 67
			scrollParent = this.parents().filter(function() {                                                                   // 68
				return (/(relative|absolute|fixed)/).test($.css(this,'position')) && (/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
			}).eq(0);                                                                                                           // 70
		} else {                                                                                                             // 71
			scrollParent = this.parents().filter(function() {                                                                   // 72
				return (/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));           // 73
			}).eq(0);                                                                                                           // 74
		}                                                                                                                    // 75
                                                                                                                       // 76
		return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;                    // 77
	},                                                                                                                    // 78
                                                                                                                       // 79
	zIndex: function( zIndex ) {                                                                                          // 80
		if ( zIndex !== undefined ) {                                                                                        // 81
			return this.css( "zIndex", zIndex );                                                                                // 82
		}                                                                                                                    // 83
                                                                                                                       // 84
		if ( this.length ) {                                                                                                 // 85
			var elem = $( this[ 0 ] ), position, value;                                                                         // 86
			while ( elem.length && elem[ 0 ] !== document ) {                                                                   // 87
				// Ignore z-index if position is set to a value where z-index is ignored by the browser                            // 88
				// This makes behavior of this function consistent across browsers                                                 // 89
				// WebKit always returns auto if the element is positioned                                                         // 90
				position = elem.css( "position" );                                                                                 // 91
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {                                // 92
					// IE returns 0 when zIndex is not specified                                                                      // 93
					// other browsers return a string                                                                                 // 94
					// we ignore the case of nested elements with an explicit value of 0                                              // 95
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>                                               // 96
					value = parseInt( elem.css( "zIndex" ), 10 );                                                                     // 97
					if ( !isNaN( value ) && value !== 0 ) {                                                                           // 98
						return value;                                                                                                    // 99
					}                                                                                                                 // 100
				}                                                                                                                  // 101
				elem = elem.parent();                                                                                              // 102
			}                                                                                                                   // 103
		}                                                                                                                    // 104
                                                                                                                       // 105
		return 0;                                                                                                            // 106
	},                                                                                                                    // 107
                                                                                                                       // 108
	uniqueId: function() {                                                                                                // 109
		return this.each(function() {                                                                                        // 110
			if ( !this.id ) {                                                                                                   // 111
				this.id = "ui-id-" + (++uuid);                                                                                     // 112
			}                                                                                                                   // 113
		});                                                                                                                  // 114
	},                                                                                                                    // 115
                                                                                                                       // 116
	removeUniqueId: function() {                                                                                          // 117
		return this.each(function() {                                                                                        // 118
			if ( runiqueId.test( this.id ) ) {                                                                                  // 119
				$( this ).removeAttr( "id" );                                                                                      // 120
			}                                                                                                                   // 121
		});                                                                                                                  // 122
	}                                                                                                                     // 123
});                                                                                                                    // 124
                                                                                                                       // 125
// selectors                                                                                                           // 126
function focusable( element, isTabIndexNotNaN ) {                                                                      // 127
	var map, mapName, img,                                                                                                // 128
		nodeName = element.nodeName.toLowerCase();                                                                           // 129
	if ( "area" === nodeName ) {                                                                                          // 130
		map = element.parentNode;                                                                                            // 131
		mapName = map.name;                                                                                                  // 132
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {                                           // 133
			return false;                                                                                                       // 134
		}                                                                                                                    // 135
		img = $( "img[usemap=#" + mapName + "]" )[0];                                                                        // 136
		return !!img && visible( img );                                                                                      // 137
	}                                                                                                                     // 138
	return ( /input|select|textarea|button|object/.test( nodeName ) ?                                                     // 139
		!element.disabled :                                                                                                  // 140
		"a" === nodeName ?                                                                                                   // 141
			element.href || isTabIndexNotNaN :                                                                                  // 142
			isTabIndexNotNaN) &&                                                                                                // 143
		// the element and all of its ancestors must be visible                                                              // 144
		visible( element );                                                                                                  // 145
}                                                                                                                      // 146
                                                                                                                       // 147
function visible( element ) {                                                                                          // 148
	return $.expr.filters.visible( element ) &&                                                                           // 149
		!$( element ).parents().andSelf().filter(function() {                                                                // 150
			return $.css( this, "visibility" ) === "hidden";                                                                    // 151
		}).length;                                                                                                           // 152
}                                                                                                                      // 153
                                                                                                                       // 154
$.extend( $.expr[ ":" ], {                                                                                             // 155
	data: $.expr.createPseudo ?                                                                                           // 156
		$.expr.createPseudo(function( dataName ) {                                                                           // 157
			return function( elem ) {                                                                                           // 158
				return !!$.data( elem, dataName );                                                                                 // 159
			};                                                                                                                  // 160
		}) :                                                                                                                 // 161
		// support: jQuery <1.8                                                                                              // 162
		function( elem, i, match ) {                                                                                         // 163
			return !!$.data( elem, match[ 3 ] );                                                                                // 164
		},                                                                                                                   // 165
                                                                                                                       // 166
	focusable: function( element ) {                                                                                      // 167
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );                                                // 168
	},                                                                                                                    // 169
                                                                                                                       // 170
	tabbable: function( element ) {                                                                                       // 171
		var tabIndex = $.attr( element, "tabindex" ),                                                                        // 172
			isTabIndexNaN = isNaN( tabIndex );                                                                                  // 173
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );                                   // 174
	}                                                                                                                     // 175
});                                                                                                                    // 176
                                                                                                                       // 177
// support                                                                                                             // 178
$(function() {                                                                                                         // 179
	var body = document.body,                                                                                             // 180
		div = body.appendChild( div = document.createElement( "div" ) );                                                     // 181
                                                                                                                       // 182
	// access offsetHeight before setting the style to prevent a layout bug                                               // 183
	// in IE 9 which causes the element to continue to take up space even                                                 // 184
	// after it is removed from the DOM (#8026)                                                                           // 185
	div.offsetHeight;                                                                                                     // 186
                                                                                                                       // 187
	$.extend( div.style, {                                                                                                // 188
		minHeight: "100px",                                                                                                  // 189
		height: "auto",                                                                                                      // 190
		padding: 0,                                                                                                          // 191
		borderWidth: 0                                                                                                       // 192
	});                                                                                                                   // 193
                                                                                                                       // 194
	$.support.minHeight = div.offsetHeight === 100;                                                                       // 195
	$.support.selectstart = "onselectstart" in div;                                                                       // 196
                                                                                                                       // 197
	// set display to none to avoid a layout bug in IE                                                                    // 198
	// http://dev.jquery.com/ticket/4014                                                                                  // 199
	body.removeChild( div ).style.display = "none";                                                                       // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// support: jQuery <1.8                                                                                                // 203
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {                                                                            // 204
	$.each( [ "Width", "Height" ], function( i, name ) {                                                                  // 205
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],                                             // 206
			type = name.toLowerCase(),                                                                                          // 207
			orig = {                                                                                                            // 208
				innerWidth: $.fn.innerWidth,                                                                                       // 209
				innerHeight: $.fn.innerHeight,                                                                                     // 210
				outerWidth: $.fn.outerWidth,                                                                                       // 211
				outerHeight: $.fn.outerHeight                                                                                      // 212
			};                                                                                                                  // 213
                                                                                                                       // 214
		function reduce( elem, size, border, margin ) {                                                                      // 215
			$.each( side, function() {                                                                                          // 216
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;                                                        // 217
				if ( border ) {                                                                                                    // 218
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;                                              // 219
				}                                                                                                                  // 220
				if ( margin ) {                                                                                                    // 221
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;                                                        // 222
				}                                                                                                                  // 223
			});                                                                                                                 // 224
			return size;                                                                                                        // 225
		}                                                                                                                    // 226
                                                                                                                       // 227
		$.fn[ "inner" + name ] = function( size ) {                                                                          // 228
			if ( size === undefined ) {                                                                                         // 229
				return orig[ "inner" + name ].call( this );                                                                        // 230
			}                                                                                                                   // 231
                                                                                                                       // 232
			return this.each(function() {                                                                                       // 233
				$( this ).css( type, reduce( this, size ) + "px" );                                                                // 234
			});                                                                                                                 // 235
		};                                                                                                                   // 236
                                                                                                                       // 237
		$.fn[ "outer" + name] = function( size, margin ) {                                                                   // 238
			if ( typeof size !== "number" ) {                                                                                   // 239
				return orig[ "outer" + name ].call( this, size );                                                                  // 240
			}                                                                                                                   // 241
                                                                                                                       // 242
			return this.each(function() {                                                                                       // 243
				$( this).css( type, reduce( this, size, true, margin ) + "px" );                                                   // 244
			});                                                                                                                 // 245
		};                                                                                                                   // 246
	});                                                                                                                   // 247
}                                                                                                                      // 248
                                                                                                                       // 249
// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)                                                   // 250
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {                                               // 251
	$.fn.removeData = (function( removeData ) {                                                                           // 252
		return function( key ) {                                                                                             // 253
			if ( arguments.length ) {                                                                                           // 254
				return removeData.call( this, $.camelCase( key ) );                                                                // 255
			} else {                                                                                                            // 256
				return removeData.call( this );                                                                                    // 257
			}                                                                                                                   // 258
		};                                                                                                                   // 259
	})( $.fn.removeData );                                                                                                // 260
}                                                                                                                      // 261
                                                                                                                       // 262
                                                                                                                       // 263
                                                                                                                       // 264
                                                                                                                       // 265
                                                                                                                       // 266
// deprecated                                                                                                          // 267
                                                                                                                       // 268
(function() {                                                                                                          // 269
	var uaMatch = /msie ([\w.]+)/.exec( navigator.userAgent.toLowerCase() ) || [];                                        // 270
	$.ui.ie = uaMatch.length ? true : false;                                                                              // 271
	$.ui.ie6 = parseFloat( uaMatch[ 1 ], 10 ) === 6;                                                                      // 272
})();                                                                                                                  // 273
                                                                                                                       // 274
$.fn.extend({                                                                                                          // 275
	disableSelection: function() {                                                                                        // 276
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +                                          // 277
			".ui-disableSelection", function( event ) {                                                                         // 278
				event.preventDefault();                                                                                            // 279
			});                                                                                                                 // 280
	},                                                                                                                    // 281
                                                                                                                       // 282
	enableSelection: function() {                                                                                         // 283
		return this.unbind( ".ui-disableSelection" );                                                                        // 284
	}                                                                                                                     // 285
});                                                                                                                    // 286
                                                                                                                       // 287
$.extend( $.ui, {                                                                                                      // 288
	// $.ui.plugin is deprecated.  Use the proxy pattern instead.                                                         // 289
	plugin: {                                                                                                             // 290
		add: function( module, option, set ) {                                                                               // 291
			var i,                                                                                                              // 292
				proto = $.ui[ module ].prototype;                                                                                  // 293
			for ( i in set ) {                                                                                                  // 294
				proto.plugins[ i ] = proto.plugins[ i ] || [];                                                                     // 295
				proto.plugins[ i ].push( [ option, set[ i ] ] );                                                                   // 296
			}                                                                                                                   // 297
		},                                                                                                                   // 298
		call: function( instance, name, args ) {                                                                             // 299
			var i,                                                                                                              // 300
				set = instance.plugins[ name ];                                                                                    // 301
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {              // 302
				return;                                                                                                            // 303
			}                                                                                                                   // 304
                                                                                                                       // 305
			for ( i = 0; i < set.length; i++ ) {                                                                                // 306
				if ( instance.options[ set[ i ][ 0 ] ] ) {                                                                         // 307
					set[ i ][ 1 ].apply( instance.element, args );                                                                    // 308
				}                                                                                                                  // 309
			}                                                                                                                   // 310
		}                                                                                                                    // 311
	},                                                                                                                    // 312
                                                                                                                       // 313
	contains: $.contains,                                                                                                 // 314
                                                                                                                       // 315
	// only used by resizable                                                                                             // 316
	hasScroll: function( el, a ) {                                                                                        // 317
                                                                                                                       // 318
		//If overflow is hidden, the element might have extra content, but the user wants to hide it                         // 319
		if ( $( el ).css( "overflow" ) === "hidden") {                                                                       // 320
			return false;                                                                                                       // 321
		}                                                                                                                    // 322
                                                                                                                       // 323
		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",                                                     // 324
			has = false;                                                                                                        // 325
                                                                                                                       // 326
		if ( el[ scroll ] > 0 ) {                                                                                            // 327
			return true;                                                                                                        // 328
		}                                                                                                                    // 329
                                                                                                                       // 330
		// TODO: determine which cases actually cause this to happen                                                         // 331
		// if the element doesn't have the scroll set, see if it's possible to                                               // 332
		// set the scroll                                                                                                    // 333
		el[ scroll ] = 1;                                                                                                    // 334
		has = ( el[ scroll ] > 0 );                                                                                          // 335
		el[ scroll ] = 0;                                                                                                    // 336
		return has;                                                                                                          // 337
	},                                                                                                                    // 338
                                                                                                                       // 339
	// these are odd functions, fix the API or move into individual plugins                                               // 340
	isOverAxis: function( x, reference, size ) {                                                                          // 341
		//Determines when x coordinate is over "b" element axis                                                              // 342
		return ( x > reference ) && ( x < ( reference + size ) );                                                            // 343
	},                                                                                                                    // 344
	isOver: function( y, x, top, left, height, width ) {                                                                  // 345
		//Determines when x, y coordinates is over "b" element                                                               // 346
		return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );                                       // 347
	}                                                                                                                     // 348
});                                                                                                                    // 349
                                                                                                                       // 350
})( jQuery );                                                                                                          // 351
(function( $, undefined ) {                                                                                            // 352
                                                                                                                       // 353
var uuid = 0,                                                                                                          // 354
	slice = Array.prototype.slice,                                                                                        // 355
	_cleanData = $.cleanData;                                                                                             // 356
$.cleanData = function( elems ) {                                                                                      // 357
	for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {                                                             // 358
		try {                                                                                                                // 359
			$( elem ).triggerHandler( "remove" );                                                                               // 360
		// http://bugs.jquery.com/ticket/8235                                                                                // 361
		} catch( e ) {}                                                                                                      // 362
	}                                                                                                                     // 363
	_cleanData( elems );                                                                                                  // 364
};                                                                                                                     // 365
                                                                                                                       // 366
$.widget = function( name, base, prototype ) {                                                                         // 367
	var fullName, existingConstructor, constructor, basePrototype,                                                        // 368
		namespace = name.split( "." )[ 0 ];                                                                                  // 369
                                                                                                                       // 370
	name = name.split( "." )[ 1 ];                                                                                        // 371
	fullName = namespace + "-" + name;                                                                                    // 372
                                                                                                                       // 373
	if ( !prototype ) {                                                                                                   // 374
		prototype = base;                                                                                                    // 375
		base = $.Widget;                                                                                                     // 376
	}                                                                                                                     // 377
                                                                                                                       // 378
	// create selector for plugin                                                                                         // 379
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {                                                          // 380
		return !!$.data( elem, fullName );                                                                                   // 381
	};                                                                                                                    // 382
                                                                                                                       // 383
	$[ namespace ] = $[ namespace ] || {};                                                                                // 384
	existingConstructor = $[ namespace ][ name ];                                                                         // 385
	constructor = $[ namespace ][ name ] = function( options, element ) {                                                 // 386
		// allow instantiation without "new" keyword                                                                         // 387
		if ( !this._createWidget ) {                                                                                         // 388
			return new constructor( options, element );                                                                         // 389
		}                                                                                                                    // 390
                                                                                                                       // 391
		// allow instantiation without initializing for simple inheritance                                                   // 392
		// must use "new" keyword (the code above always passes args)                                                        // 393
		if ( arguments.length ) {                                                                                            // 394
			this._createWidget( options, element );                                                                             // 395
		}                                                                                                                    // 396
	};                                                                                                                    // 397
	// extend with the existing constructor to carry over any static properties                                           // 398
	$.extend( constructor, existingConstructor, {                                                                         // 399
		version: prototype.version,                                                                                          // 400
		// copy the object used to create the prototype in case we need to                                                   // 401
		// redefine the widget later                                                                                         // 402
		_proto: $.extend( {}, prototype ),                                                                                   // 403
		// track widgets that inherit from this widget in case this widget is                                                // 404
		// redefined after a widget inherits from it                                                                         // 405
		_childConstructors: []                                                                                               // 406
	});                                                                                                                   // 407
                                                                                                                       // 408
	basePrototype = new base();                                                                                           // 409
	// we need to make the options hash a property directly on the new instance                                           // 410
	// otherwise we'll modify the options hash on the prototype that we're                                                // 411
	// inheriting from                                                                                                    // 412
	basePrototype.options = $.widget.extend( {}, basePrototype.options );                                                 // 413
	$.each( prototype, function( prop, value ) {                                                                          // 414
		if ( $.isFunction( value ) ) {                                                                                       // 415
			prototype[ prop ] = (function() {                                                                                   // 416
				var _super = function() {                                                                                          // 417
						return base.prototype[ prop ].apply( this, arguments );                                                          // 418
					},                                                                                                                // 419
					_superApply = function( args ) {                                                                                  // 420
						return base.prototype[ prop ].apply( this, args );                                                               // 421
					};                                                                                                                // 422
				return function() {                                                                                                // 423
					var __super = this._super,                                                                                        // 424
						__superApply = this._superApply,                                                                                 // 425
						returnValue;                                                                                                     // 426
                                                                                                                       // 427
					this._super = _super;                                                                                             // 428
					this._superApply = _superApply;                                                                                   // 429
                                                                                                                       // 430
					returnValue = value.apply( this, arguments );                                                                     // 431
                                                                                                                       // 432
					this._super = __super;                                                                                            // 433
					this._superApply = __superApply;                                                                                  // 434
                                                                                                                       // 435
					return returnValue;                                                                                               // 436
				};                                                                                                                 // 437
			})();                                                                                                               // 438
		}                                                                                                                    // 439
	});                                                                                                                   // 440
	constructor.prototype = $.widget.extend( basePrototype, {                                                             // 441
		// TODO: remove support for widgetEventPrefix                                                                        // 442
		// always use the name + a colon as the prefix, e.g., draggable:start                                                // 443
		// don't prefix for widgets that aren't DOM-based                                                                    // 444
		widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name                                      // 445
	}, prototype, {                                                                                                       // 446
		constructor: constructor,                                                                                            // 447
		namespace: namespace,                                                                                                // 448
		widgetName: name,                                                                                                    // 449
		// TODO remove widgetBaseClass, see #8155                                                                            // 450
		widgetBaseClass: fullName,                                                                                           // 451
		widgetFullName: fullName                                                                                             // 452
	});                                                                                                                   // 453
                                                                                                                       // 454
	// If this widget is being redefined then we need to find all widgets that                                            // 455
	// are inheriting from it and redefine all of them so that they inherit from                                          // 456
	// the new version of this widget. We're essentially trying to replace one                                            // 457
	// level in the prototype chain.                                                                                      // 458
	if ( existingConstructor ) {                                                                                          // 459
		$.each( existingConstructor._childConstructors, function( i, child ) {                                               // 460
			var childPrototype = child.prototype;                                                                               // 461
                                                                                                                       // 462
			// redefine the child widget using the same prototype that was                                                      // 463
			// originally used, but inherit from the new version of the base                                                    // 464
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );                  // 465
		});                                                                                                                  // 466
		// remove the list of existing child constructors from the old constructor                                           // 467
		// so the old child constructors can be garbage collected                                                            // 468
		delete existingConstructor._childConstructors;                                                                       // 469
	} else {                                                                                                              // 470
		base._childConstructors.push( constructor );                                                                         // 471
	}                                                                                                                     // 472
                                                                                                                       // 473
	$.widget.bridge( name, constructor );                                                                                 // 474
};                                                                                                                     // 475
                                                                                                                       // 476
$.widget.extend = function( target ) {                                                                                 // 477
	var input = slice.call( arguments, 1 ),                                                                               // 478
		inputIndex = 0,                                                                                                      // 479
		inputLength = input.length,                                                                                          // 480
		key,                                                                                                                 // 481
		value;                                                                                                               // 482
	for ( ; inputIndex < inputLength; inputIndex++ ) {                                                                    // 483
		for ( key in input[ inputIndex ] ) {                                                                                 // 484
			value = input[ inputIndex ][ key ];                                                                                 // 485
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {                                           // 486
				// Clone objects                                                                                                   // 487
				if ( $.isPlainObject( value ) ) {                                                                                  // 488
					target[ key ] = $.isPlainObject( target[ key ] ) ?                                                                // 489
						$.widget.extend( {}, target[ key ], value ) :                                                                    // 490
						// Don't extend strings, arrays, etc. with objects                                                               // 491
						$.widget.extend( {}, value );                                                                                    // 492
				// Copy everything else by reference                                                                               // 493
				} else {                                                                                                           // 494
					target[ key ] = value;                                                                                            // 495
				}                                                                                                                  // 496
			}                                                                                                                   // 497
		}                                                                                                                    // 498
	}                                                                                                                     // 499
	return target;                                                                                                        // 500
};                                                                                                                     // 501
                                                                                                                       // 502
$.widget.bridge = function( name, object ) {                                                                           // 503
	var fullName = object.prototype.widgetFullName || name;                                                               // 504
	$.fn[ name ] = function( options ) {                                                                                  // 505
		var isMethodCall = typeof options === "string",                                                                      // 506
			args = slice.call( arguments, 1 ),                                                                                  // 507
			returnValue = this;                                                                                                 // 508
                                                                                                                       // 509
		// allow multiple hashes to be passed on init                                                                        // 510
		options = !isMethodCall && args.length ?                                                                             // 511
			$.widget.extend.apply( null, [ options ].concat(args) ) :                                                           // 512
			options;                                                                                                            // 513
                                                                                                                       // 514
		if ( isMethodCall ) {                                                                                                // 515
			this.each(function() {                                                                                              // 516
				var methodValue,                                                                                                   // 517
					instance = $.data( this, fullName );                                                                              // 518
				if ( !instance ) {                                                                                                 // 519
					return $.error( "cannot call methods on " + name + " prior to initialization; " +                                 // 520
						"attempted to call method '" + options + "'" );                                                                  // 521
				}                                                                                                                  // 522
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {                                         // 523
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );                            // 524
				}                                                                                                                  // 525
				methodValue = instance[ options ].apply( instance, args );                                                         // 526
				if ( methodValue !== instance && methodValue !== undefined ) {                                                     // 527
					returnValue = methodValue && methodValue.jquery ?                                                                 // 528
						returnValue.pushStack( methodValue.get() ) :                                                                     // 529
						methodValue;                                                                                                     // 530
					return false;                                                                                                     // 531
				}                                                                                                                  // 532
			});                                                                                                                 // 533
		} else {                                                                                                             // 534
			this.each(function() {                                                                                              // 535
				var instance = $.data( this, fullName );                                                                           // 536
				if ( instance ) {                                                                                                  // 537
					instance.option( options || {} )._init();                                                                         // 538
				} else {                                                                                                           // 539
					$.data( this, fullName, new object( options, this ) );                                                            // 540
				}                                                                                                                  // 541
			});                                                                                                                 // 542
		}                                                                                                                    // 543
                                                                                                                       // 544
		return returnValue;                                                                                                  // 545
	};                                                                                                                    // 546
};                                                                                                                     // 547
                                                                                                                       // 548
$.Widget = function( /* options, element */ ) {};                                                                      // 549
$.Widget._childConstructors = [];                                                                                      // 550
                                                                                                                       // 551
$.Widget.prototype = {                                                                                                 // 552
	widgetName: "widget",                                                                                                 // 553
	widgetEventPrefix: "",                                                                                                // 554
	defaultElement: "<div>",                                                                                              // 555
	options: {                                                                                                            // 556
		disabled: false,                                                                                                     // 557
                                                                                                                       // 558
		// callbacks                                                                                                         // 559
		create: null                                                                                                         // 560
	},                                                                                                                    // 561
	_createWidget: function( options, element ) {                                                                         // 562
		element = $( element || this.defaultElement || this )[ 0 ];                                                          // 563
		this.element = $( element );                                                                                         // 564
		this.uuid = uuid++;                                                                                                  // 565
		this.eventNamespace = "." + this.widgetName + this.uuid;                                                             // 566
		this.options = $.widget.extend( {},                                                                                  // 567
			this.options,                                                                                                       // 568
			this._getCreateOptions(),                                                                                           // 569
			options );                                                                                                          // 570
                                                                                                                       // 571
		this.bindings = $();                                                                                                 // 572
		this.hoverable = $();                                                                                                // 573
		this.focusable = $();                                                                                                // 574
                                                                                                                       // 575
		if ( element !== this ) {                                                                                            // 576
			// 1.9 BC for #7810                                                                                                 // 577
			// TODO remove dual storage                                                                                         // 578
			$.data( element, this.widgetName, this );                                                                           // 579
			$.data( element, this.widgetFullName, this );                                                                       // 580
			this._on( true, this.element, {                                                                                     // 581
				remove: function( event ) {                                                                                        // 582
					if ( event.target === element ) {                                                                                 // 583
						this.destroy();                                                                                                  // 584
					}                                                                                                                 // 585
				}                                                                                                                  // 586
			});                                                                                                                 // 587
			this.document = $( element.style ?                                                                                  // 588
				// element within the document                                                                                     // 589
				element.ownerDocument :                                                                                            // 590
				// element is window or document                                                                                   // 591
				element.document || element );                                                                                     // 592
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );                                   // 593
		}                                                                                                                    // 594
                                                                                                                       // 595
		this._create();                                                                                                      // 596
		this._trigger( "create", null, this._getCreateEventData() );                                                         // 597
		this._init();                                                                                                        // 598
	},                                                                                                                    // 599
	_getCreateOptions: $.noop,                                                                                            // 600
	_getCreateEventData: $.noop,                                                                                          // 601
	_create: $.noop,                                                                                                      // 602
	_init: $.noop,                                                                                                        // 603
                                                                                                                       // 604
	destroy: function() {                                                                                                 // 605
		this._destroy();                                                                                                     // 606
		// we can probably remove the unbind calls in 2.0                                                                    // 607
		// all event bindings should go through this._on()                                                                   // 608
		this.element                                                                                                         // 609
			.unbind( this.eventNamespace )                                                                                      // 610
			// 1.9 BC for #7810                                                                                                 // 611
			// TODO remove dual storage                                                                                         // 612
			.removeData( this.widgetName )                                                                                      // 613
			.removeData( this.widgetFullName )                                                                                  // 614
			// support: jquery <1.6.3                                                                                           // 615
			// http://bugs.jquery.com/ticket/9413                                                                               // 616
			.removeData( $.camelCase( this.widgetFullName ) );                                                                  // 617
		this.widget()                                                                                                        // 618
			.unbind( this.eventNamespace )                                                                                      // 619
			.removeAttr( "aria-disabled" )                                                                                      // 620
			.removeClass(                                                                                                       // 621
				this.widgetFullName + "-disabled " +                                                                               // 622
				"ui-state-disabled" );                                                                                             // 623
                                                                                                                       // 624
		// clean up events and states                                                                                        // 625
		this.bindings.unbind( this.eventNamespace );                                                                         // 626
		this.hoverable.removeClass( "ui-state-hover" );                                                                      // 627
		this.focusable.removeClass( "ui-state-focus" );                                                                      // 628
	},                                                                                                                    // 629
	_destroy: $.noop,                                                                                                     // 630
                                                                                                                       // 631
	widget: function() {                                                                                                  // 632
		return this.element;                                                                                                 // 633
	},                                                                                                                    // 634
                                                                                                                       // 635
	option: function( key, value ) {                                                                                      // 636
		var options = key,                                                                                                   // 637
			parts,                                                                                                              // 638
			curOption,                                                                                                          // 639
			i;                                                                                                                  // 640
                                                                                                                       // 641
		if ( arguments.length === 0 ) {                                                                                      // 642
			// don't return a reference to the internal hash                                                                    // 643
			return $.widget.extend( {}, this.options );                                                                         // 644
		}                                                                                                                    // 645
                                                                                                                       // 646
		if ( typeof key === "string" ) {                                                                                     // 647
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }                                                     // 648
			options = {};                                                                                                       // 649
			parts = key.split( "." );                                                                                           // 650
			key = parts.shift();                                                                                                // 651
			if ( parts.length ) {                                                                                               // 652
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );                                           // 653
				for ( i = 0; i < parts.length - 1; i++ ) {                                                                         // 654
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};                                                          // 655
					curOption = curOption[ parts[ i ] ];                                                                              // 656
				}                                                                                                                  // 657
				key = parts.pop();                                                                                                 // 658
				if ( value === undefined ) {                                                                                       // 659
					return curOption[ key ] === undefined ? null : curOption[ key ];                                                  // 660
				}                                                                                                                  // 661
				curOption[ key ] = value;                                                                                          // 662
			} else {                                                                                                            // 663
				if ( value === undefined ) {                                                                                       // 664
					return this.options[ key ] === undefined ? null : this.options[ key ];                                            // 665
				}                                                                                                                  // 666
				options[ key ] = value;                                                                                            // 667
			}                                                                                                                   // 668
		}                                                                                                                    // 669
                                                                                                                       // 670
		this._setOptions( options );                                                                                         // 671
                                                                                                                       // 672
		return this;                                                                                                         // 673
	},                                                                                                                    // 674
	_setOptions: function( options ) {                                                                                    // 675
		var key;                                                                                                             // 676
                                                                                                                       // 677
		for ( key in options ) {                                                                                             // 678
			this._setOption( key, options[ key ] );                                                                             // 679
		}                                                                                                                    // 680
                                                                                                                       // 681
		return this;                                                                                                         // 682
	},                                                                                                                    // 683
	_setOption: function( key, value ) {                                                                                  // 684
		this.options[ key ] = value;                                                                                         // 685
                                                                                                                       // 686
		if ( key === "disabled" ) {                                                                                          // 687
			this.widget()                                                                                                       // 688
				.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )                                       // 689
				.attr( "aria-disabled", value );                                                                                   // 690
			this.hoverable.removeClass( "ui-state-hover" );                                                                     // 691
			this.focusable.removeClass( "ui-state-focus" );                                                                     // 692
		}                                                                                                                    // 693
                                                                                                                       // 694
		return this;                                                                                                         // 695
	},                                                                                                                    // 696
                                                                                                                       // 697
	enable: function() {                                                                                                  // 698
		return this._setOption( "disabled", false );                                                                         // 699
	},                                                                                                                    // 700
	disable: function() {                                                                                                 // 701
		return this._setOption( "disabled", true );                                                                          // 702
	},                                                                                                                    // 703
                                                                                                                       // 704
	_on: function( suppressDisabledCheck, element, handlers ) {                                                           // 705
		var delegateElement,                                                                                                 // 706
			instance = this;                                                                                                    // 707
                                                                                                                       // 708
		// no suppressDisabledCheck flag, shuffle arguments                                                                  // 709
		if ( typeof suppressDisabledCheck !== "boolean" ) {                                                                  // 710
			handlers = element;                                                                                                 // 711
			element = suppressDisabledCheck;                                                                                    // 712
			suppressDisabledCheck = false;                                                                                      // 713
		}                                                                                                                    // 714
                                                                                                                       // 715
		// no element argument, shuffle and use this.element                                                                 // 716
		if ( !handlers ) {                                                                                                   // 717
			handlers = element;                                                                                                 // 718
			element = this.element;                                                                                             // 719
			delegateElement = this.widget();                                                                                    // 720
		} else {                                                                                                             // 721
			// accept selectors, DOM elements                                                                                   // 722
			element = delegateElement = $( element );                                                                           // 723
			this.bindings = this.bindings.add( element );                                                                       // 724
		}                                                                                                                    // 725
                                                                                                                       // 726
		$.each( handlers, function( event, handler ) {                                                                       // 727
			function handlerProxy() {                                                                                           // 728
				// allow widgets to customize the disabled handling                                                                // 729
				// - disabled as an array instead of boolean                                                                       // 730
				// - disabled class as method for disabling individual parts                                                       // 731
				if ( !suppressDisabledCheck &&                                                                                     // 732
						( instance.options.disabled === true ||                                                                          // 733
							$( this ).hasClass( "ui-state-disabled" ) ) ) {                                                                 // 734
					return;                                                                                                           // 735
				}                                                                                                                  // 736
				return ( typeof handler === "string" ? instance[ handler ] : handler )                                             // 737
					.apply( instance, arguments );                                                                                    // 738
			}                                                                                                                   // 739
                                                                                                                       // 740
			// copy the guid so direct unbinding works                                                                          // 741
			if ( typeof handler !== "string" ) {                                                                                // 742
				handlerProxy.guid = handler.guid =                                                                                 // 743
					handler.guid || handlerProxy.guid || $.guid++;                                                                    // 744
			}                                                                                                                   // 745
                                                                                                                       // 746
			var match = event.match( /^(\w+)\s*(.*)$/ ),                                                                        // 747
				eventName = match[1] + instance.eventNamespace,                                                                    // 748
				selector = match[2];                                                                                               // 749
			if ( selector ) {                                                                                                   // 750
				delegateElement.delegate( selector, eventName, handlerProxy );                                                     // 751
			} else {                                                                                                            // 752
				element.bind( eventName, handlerProxy );                                                                           // 753
			}                                                                                                                   // 754
		});                                                                                                                  // 755
	},                                                                                                                    // 756
                                                                                                                       // 757
	_off: function( element, eventName ) {                                                                                // 758
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;                  // 759
		element.unbind( eventName ).undelegate( eventName );                                                                 // 760
	},                                                                                                                    // 761
                                                                                                                       // 762
	_delay: function( handler, delay ) {                                                                                  // 763
		function handlerProxy() {                                                                                            // 764
			return ( typeof handler === "string" ? instance[ handler ] : handler )                                              // 765
				.apply( instance, arguments );                                                                                     // 766
		}                                                                                                                    // 767
		var instance = this;                                                                                                 // 768
		return setTimeout( handlerProxy, delay || 0 );                                                                       // 769
	},                                                                                                                    // 770
                                                                                                                       // 771
	_hoverable: function( element ) {                                                                                     // 772
		this.hoverable = this.hoverable.add( element );                                                                      // 773
		this._on( element, {                                                                                                 // 774
			mouseenter: function( event ) {                                                                                     // 775
				$( event.currentTarget ).addClass( "ui-state-hover" );                                                             // 776
			},                                                                                                                  // 777
			mouseleave: function( event ) {                                                                                     // 778
				$( event.currentTarget ).removeClass( "ui-state-hover" );                                                          // 779
			}                                                                                                                   // 780
		});                                                                                                                  // 781
	},                                                                                                                    // 782
                                                                                                                       // 783
	_focusable: function( element ) {                                                                                     // 784
		this.focusable = this.focusable.add( element );                                                                      // 785
		this._on( element, {                                                                                                 // 786
			focusin: function( event ) {                                                                                        // 787
				$( event.currentTarget ).addClass( "ui-state-focus" );                                                             // 788
			},                                                                                                                  // 789
			focusout: function( event ) {                                                                                       // 790
				$( event.currentTarget ).removeClass( "ui-state-focus" );                                                          // 791
			}                                                                                                                   // 792
		});                                                                                                                  // 793
	},                                                                                                                    // 794
                                                                                                                       // 795
	_trigger: function( type, event, data ) {                                                                             // 796
		var prop, orig,                                                                                                      // 797
			callback = this.options[ type ];                                                                                    // 798
                                                                                                                       // 799
		data = data || {};                                                                                                   // 800
		event = $.Event( event );                                                                                            // 801
		event.type = ( type === this.widgetEventPrefix ?                                                                     // 802
			type :                                                                                                              // 803
			this.widgetEventPrefix + type ).toLowerCase();                                                                      // 804
		// the original event may come from any element                                                                      // 805
		// so we need to reset the target on the new event                                                                   // 806
		event.target = this.element[ 0 ];                                                                                    // 807
                                                                                                                       // 808
		// copy original event properties over to the new event                                                              // 809
		orig = event.originalEvent;                                                                                          // 810
		if ( orig ) {                                                                                                        // 811
			for ( prop in orig ) {                                                                                              // 812
				if ( !( prop in event ) ) {                                                                                        // 813
					event[ prop ] = orig[ prop ];                                                                                     // 814
				}                                                                                                                  // 815
			}                                                                                                                   // 816
		}                                                                                                                    // 817
                                                                                                                       // 818
		this.element.trigger( event, data );                                                                                 // 819
		return !( $.isFunction( callback ) &&                                                                                // 820
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||                                            // 821
			event.isDefaultPrevented() );                                                                                       // 822
	}                                                                                                                     // 823
};                                                                                                                     // 824
                                                                                                                       // 825
$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {                                       // 826
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {                                         // 827
		if ( typeof options === "string" ) {                                                                                 // 828
			options = { effect: options };                                                                                      // 829
		}                                                                                                                    // 830
		var hasOptions,                                                                                                      // 831
			effectName = !options ?                                                                                             // 832
				method :                                                                                                           // 833
				options === true || typeof options === "number" ?                                                                  // 834
					defaultEffect :                                                                                                   // 835
					options.effect || defaultEffect;                                                                                  // 836
		options = options || {};                                                                                             // 837
		if ( typeof options === "number" ) {                                                                                 // 838
			options = { duration: options };                                                                                    // 839
		}                                                                                                                    // 840
		hasOptions = !$.isEmptyObject( options );                                                                            // 841
		options.complete = callback;                                                                                         // 842
		if ( options.delay ) {                                                                                               // 843
			element.delay( options.delay );                                                                                     // 844
		}                                                                                                                    // 845
		if ( hasOptions && $.effects && ( $.effects.effect[ effectName ] || $.uiBackCompat !== false && $.effects[ effectName ] ) ) {
			element[ method ]( options );                                                                                       // 847
		} else if ( effectName !== method && element[ effectName ] ) {                                                       // 848
			element[ effectName ]( options.duration, options.easing, callback );                                                // 849
		} else {                                                                                                             // 850
			element.queue(function( next ) {                                                                                    // 851
				$( this )[ method ]();                                                                                             // 852
				if ( callback ) {                                                                                                  // 853
					callback.call( element[ 0 ] );                                                                                    // 854
				}                                                                                                                  // 855
				next();                                                                                                            // 856
			});                                                                                                                 // 857
		}                                                                                                                    // 858
	};                                                                                                                    // 859
});                                                                                                                    // 860
                                                                                                                       // 861
// DEPRECATED                                                                                                          // 862
if ( $.uiBackCompat !== false ) {                                                                                      // 863
	$.Widget.prototype._getCreateOptions = function() {                                                                   // 864
		return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];                                           // 865
	};                                                                                                                    // 866
}                                                                                                                      // 867
                                                                                                                       // 868
})( jQuery );                                                                                                          // 869
(function( $, undefined ) {                                                                                            // 870
                                                                                                                       // 871
var mouseHandled = false;                                                                                              // 872
$( document ).mouseup( function( e ) {                                                                                 // 873
	mouseHandled = false;                                                                                                 // 874
});                                                                                                                    // 875
                                                                                                                       // 876
$.widget("ui.mouse", {                                                                                                 // 877
	version: "1.9.2",                                                                                                     // 878
	options: {                                                                                                            // 879
		cancel: 'input,textarea,button,select,option',                                                                       // 880
		distance: 1,                                                                                                         // 881
		delay: 0                                                                                                             // 882
	},                                                                                                                    // 883
	_mouseInit: function() {                                                                                              // 884
		var that = this;                                                                                                     // 885
                                                                                                                       // 886
		this.element                                                                                                         // 887
			.bind('mousedown.'+this.widgetName, function(event) {                                                               // 888
				return that._mouseDown(event);                                                                                     // 889
			})                                                                                                                  // 890
			.bind('click.'+this.widgetName, function(event) {                                                                   // 891
				if (true === $.data(event.target, that.widgetName + '.preventClickEvent')) {                                       // 892
					$.removeData(event.target, that.widgetName + '.preventClickEvent');                                               // 893
					event.stopImmediatePropagation();                                                                                 // 894
					return false;                                                                                                     // 895
				}                                                                                                                  // 896
			});                                                                                                                 // 897
                                                                                                                       // 898
		this.started = false;                                                                                                // 899
	},                                                                                                                    // 900
                                                                                                                       // 901
	// TODO: make sure destroying one instance of mouse doesn't mess with                                                 // 902
	// other instances of mouse                                                                                           // 903
	_mouseDestroy: function() {                                                                                           // 904
		this.element.unbind('.'+this.widgetName);                                                                            // 905
		if ( this._mouseMoveDelegate ) {                                                                                     // 906
			$(document)                                                                                                         // 907
				.unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)                                                     // 908
				.unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);                                                        // 909
		}                                                                                                                    // 910
	},                                                                                                                    // 911
                                                                                                                       // 912
	_mouseDown: function(event) {                                                                                         // 913
		// don't let more than one widget handle mouseStart                                                                  // 914
		if( mouseHandled ) { return; }                                                                                       // 915
                                                                                                                       // 916
		// we may have missed mouseup (out of window)                                                                        // 917
		(this._mouseStarted && this._mouseUp(event));                                                                        // 918
                                                                                                                       // 919
		this._mouseDownEvent = event;                                                                                        // 920
                                                                                                                       // 921
		var that = this,                                                                                                     // 922
			btnIsLeft = (event.which === 1),                                                                                    // 923
			// event.target.nodeName works around a bug in IE 8 with                                                            // 924
			// disabled inputs (#7620)                                                                                          // 925
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {                                                        // 927
			return true;                                                                                                        // 928
		}                                                                                                                    // 929
                                                                                                                       // 930
		this.mouseDelayMet = !this.options.delay;                                                                            // 931
		if (!this.mouseDelayMet) {                                                                                           // 932
			this._mouseDelayTimer = setTimeout(function() {                                                                     // 933
				that.mouseDelayMet = true;                                                                                         // 934
			}, this.options.delay);                                                                                             // 935
		}                                                                                                                    // 936
                                                                                                                       // 937
		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {                                                   // 938
			this._mouseStarted = (this._mouseStart(event) !== false);                                                           // 939
			if (!this._mouseStarted) {                                                                                          // 940
				event.preventDefault();                                                                                            // 941
				return true;                                                                                                       // 942
			}                                                                                                                   // 943
		}                                                                                                                    // 944
                                                                                                                       // 945
		// Click event may never have fired (Gecko & Opera)                                                                  // 946
		if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {                                         // 947
			$.removeData(event.target, this.widgetName + '.preventClickEvent');                                                 // 948
		}                                                                                                                    // 949
                                                                                                                       // 950
		// these delegates are required to keep context                                                                      // 951
		this._mouseMoveDelegate = function(event) {                                                                          // 952
			return that._mouseMove(event);                                                                                      // 953
		};                                                                                                                   // 954
		this._mouseUpDelegate = function(event) {                                                                            // 955
			return that._mouseUp(event);                                                                                        // 956
		};                                                                                                                   // 957
		$(document)                                                                                                          // 958
			.bind('mousemove.'+this.widgetName, this._mouseMoveDelegate)                                                        // 959
			.bind('mouseup.'+this.widgetName, this._mouseUpDelegate);                                                           // 960
                                                                                                                       // 961
		event.preventDefault();                                                                                              // 962
                                                                                                                       // 963
		mouseHandled = true;                                                                                                 // 964
		return true;                                                                                                         // 965
	},                                                                                                                    // 966
                                                                                                                       // 967
	_mouseMove: function(event) {                                                                                         // 968
		// IE mouseup check - mouseup happened when mouse was out of window                                                  // 969
		if ($.ui.ie && !(document.documentMode >= 9) && !event.button) {                                                     // 970
			return this._mouseUp(event);                                                                                        // 971
		}                                                                                                                    // 972
                                                                                                                       // 973
		if (this._mouseStarted) {                                                                                            // 974
			this._mouseDrag(event);                                                                                             // 975
			return event.preventDefault();                                                                                      // 976
		}                                                                                                                    // 977
                                                                                                                       // 978
		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {                                                   // 979
			this._mouseStarted =                                                                                                // 980
				(this._mouseStart(this._mouseDownEvent, event) !== false);                                                         // 981
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));                                               // 982
		}                                                                                                                    // 983
                                                                                                                       // 984
		return !this._mouseStarted;                                                                                          // 985
	},                                                                                                                    // 986
                                                                                                                       // 987
	_mouseUp: function(event) {                                                                                           // 988
		$(document)                                                                                                          // 989
			.unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)                                                      // 990
			.unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);                                                         // 991
                                                                                                                       // 992
		if (this._mouseStarted) {                                                                                            // 993
			this._mouseStarted = false;                                                                                         // 994
                                                                                                                       // 995
			if (event.target === this._mouseDownEvent.target) {                                                                 // 996
				$.data(event.target, this.widgetName + '.preventClickEvent', true);                                                // 997
			}                                                                                                                   // 998
                                                                                                                       // 999
			this._mouseStop(event);                                                                                             // 1000
		}                                                                                                                    // 1001
                                                                                                                       // 1002
		return false;                                                                                                        // 1003
	},                                                                                                                    // 1004
                                                                                                                       // 1005
	_mouseDistanceMet: function(event) {                                                                                  // 1006
		return (Math.max(                                                                                                    // 1007
				Math.abs(this._mouseDownEvent.pageX - event.pageX),                                                                // 1008
				Math.abs(this._mouseDownEvent.pageY - event.pageY)                                                                 // 1009
			) >= this.options.distance                                                                                          // 1010
		);                                                                                                                   // 1011
	},                                                                                                                    // 1012
                                                                                                                       // 1013
	_mouseDelayMet: function(event) {                                                                                     // 1014
		return this.mouseDelayMet;                                                                                           // 1015
	},                                                                                                                    // 1016
                                                                                                                       // 1017
	// These are placeholder methods, to be overriden by extending plugin                                                 // 1018
	_mouseStart: function(event) {},                                                                                      // 1019
	_mouseDrag: function(event) {},                                                                                       // 1020
	_mouseStop: function(event) {},                                                                                       // 1021
	_mouseCapture: function(event) { return true; }                                                                       // 1022
});                                                                                                                    // 1023
                                                                                                                       // 1024
})(jQuery);                                                                                                            // 1025
(function( $, undefined ) {                                                                                            // 1026
                                                                                                                       // 1027
$.ui = $.ui || {};                                                                                                     // 1028
                                                                                                                       // 1029
var cachedScrollbarWidth,                                                                                              // 1030
	max = Math.max,                                                                                                       // 1031
	abs = Math.abs,                                                                                                       // 1032
	round = Math.round,                                                                                                   // 1033
	rhorizontal = /left|center|right/,                                                                                    // 1034
	rvertical = /top|center|bottom/,                                                                                      // 1035
	roffset = /[\+\-]\d+%?/,                                                                                              // 1036
	rposition = /^\w+/,                                                                                                   // 1037
	rpercent = /%$/,                                                                                                      // 1038
	_position = $.fn.position;                                                                                            // 1039
                                                                                                                       // 1040
function getOffsets( offsets, width, height ) {                                                                        // 1041
	return [                                                                                                              // 1042
		parseInt( offsets[ 0 ], 10 ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),                                  // 1043
		parseInt( offsets[ 1 ], 10 ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )                                  // 1044
	];                                                                                                                    // 1045
}                                                                                                                      // 1046
function parseCss( element, property ) {                                                                               // 1047
	return parseInt( $.css( element, property ), 10 ) || 0;                                                               // 1048
}                                                                                                                      // 1049
                                                                                                                       // 1050
$.position = {                                                                                                         // 1051
	scrollbarWidth: function() {                                                                                          // 1052
		if ( cachedScrollbarWidth !== undefined ) {                                                                          // 1053
			return cachedScrollbarWidth;                                                                                        // 1054
		}                                                                                                                    // 1055
		var w1, w2,                                                                                                          // 1056
			div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];                                                                                       // 1058
                                                                                                                       // 1059
		$( "body" ).append( div );                                                                                           // 1060
		w1 = innerDiv.offsetWidth;                                                                                           // 1061
		div.css( "overflow", "scroll" );                                                                                     // 1062
                                                                                                                       // 1063
		w2 = innerDiv.offsetWidth;                                                                                           // 1064
                                                                                                                       // 1065
		if ( w1 === w2 ) {                                                                                                   // 1066
			w2 = div[0].clientWidth;                                                                                            // 1067
		}                                                                                                                    // 1068
                                                                                                                       // 1069
		div.remove();                                                                                                        // 1070
                                                                                                                       // 1071
		return (cachedScrollbarWidth = w1 - w2);                                                                             // 1072
	},                                                                                                                    // 1073
	getScrollInfo: function( within ) {                                                                                   // 1074
		var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),                                           // 1075
			overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),                                              // 1076
			hasOverflowX = overflowX === "scroll" ||                                                                            // 1077
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),                                          // 1078
			hasOverflowY = overflowY === "scroll" ||                                                                            // 1079
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );                                        // 1080
		return {                                                                                                             // 1081
			width: hasOverflowX ? $.position.scrollbarWidth() : 0,                                                              // 1082
			height: hasOverflowY ? $.position.scrollbarWidth() : 0                                                              // 1083
		};                                                                                                                   // 1084
	},                                                                                                                    // 1085
	getWithinInfo: function( element ) {                                                                                  // 1086
		var withinElement = $( element || window ),                                                                          // 1087
			isWindow = $.isWindow( withinElement[0] );                                                                          // 1088
		return {                                                                                                             // 1089
			element: withinElement,                                                                                             // 1090
			isWindow: isWindow,                                                                                                 // 1091
			offset: withinElement.offset() || { left: 0, top: 0 },                                                              // 1092
			scrollLeft: withinElement.scrollLeft(),                                                                             // 1093
			scrollTop: withinElement.scrollTop(),                                                                               // 1094
			width: isWindow ? withinElement.width() : withinElement.outerWidth(),                                               // 1095
			height: isWindow ? withinElement.height() : withinElement.outerHeight()                                             // 1096
		};                                                                                                                   // 1097
	}                                                                                                                     // 1098
};                                                                                                                     // 1099
                                                                                                                       // 1100
$.fn.position = function( options ) {                                                                                  // 1101
	if ( !options || !options.of ) {                                                                                      // 1102
		return _position.apply( this, arguments );                                                                           // 1103
	}                                                                                                                     // 1104
                                                                                                                       // 1105
	// make a copy, we don't want to modify arguments                                                                     // 1106
	options = $.extend( {}, options );                                                                                    // 1107
                                                                                                                       // 1108
	var atOffset, targetWidth, targetHeight, targetOffset, basePosition,                                                  // 1109
		target = $( options.of ),                                                                                            // 1110
		within = $.position.getWithinInfo( options.within ),                                                                 // 1111
		scrollInfo = $.position.getScrollInfo( within ),                                                                     // 1112
		targetElem = target[0],                                                                                              // 1113
		collision = ( options.collision || "flip" ).split( " " ),                                                            // 1114
		offsets = {};                                                                                                        // 1115
                                                                                                                       // 1116
	if ( targetElem.nodeType === 9 ) {                                                                                    // 1117
		targetWidth = target.width();                                                                                        // 1118
		targetHeight = target.height();                                                                                      // 1119
		targetOffset = { top: 0, left: 0 };                                                                                  // 1120
	} else if ( $.isWindow( targetElem ) ) {                                                                              // 1121
		targetWidth = target.width();                                                                                        // 1122
		targetHeight = target.height();                                                                                      // 1123
		targetOffset = { top: target.scrollTop(), left: target.scrollLeft() };                                               // 1124
	} else if ( targetElem.preventDefault ) {                                                                             // 1125
		// force left top to allow flipping                                                                                  // 1126
		options.at = "left top";                                                                                             // 1127
		targetWidth = targetHeight = 0;                                                                                      // 1128
		targetOffset = { top: targetElem.pageY, left: targetElem.pageX };                                                    // 1129
	} else {                                                                                                              // 1130
		targetWidth = target.outerWidth();                                                                                   // 1131
		targetHeight = target.outerHeight();                                                                                 // 1132
		targetOffset = target.offset();                                                                                      // 1133
	}                                                                                                                     // 1134
	// clone to reuse original targetOffset later                                                                         // 1135
	basePosition = $.extend( {}, targetOffset );                                                                          // 1136
                                                                                                                       // 1137
	// force my and at to have valid horizontal and vertical positions                                                    // 1138
	// if a value is missing or invalid, it will be converted to center                                                   // 1139
	$.each( [ "my", "at" ], function() {                                                                                  // 1140
		var pos = ( options[ this ] || "" ).split( " " ),                                                                    // 1141
			horizontalOffset,                                                                                                   // 1142
			verticalOffset;                                                                                                     // 1143
                                                                                                                       // 1144
		if ( pos.length === 1) {                                                                                             // 1145
			pos = rhorizontal.test( pos[ 0 ] ) ?                                                                                // 1146
				pos.concat( [ "center" ] ) :                                                                                       // 1147
				rvertical.test( pos[ 0 ] ) ?                                                                                       // 1148
					[ "center" ].concat( pos ) :                                                                                      // 1149
					[ "center", "center" ];                                                                                           // 1150
		}                                                                                                                    // 1151
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";                                                       // 1152
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";                                                         // 1153
                                                                                                                       // 1154
		// calculate offsets                                                                                                 // 1155
		horizontalOffset = roffset.exec( pos[ 0 ] );                                                                         // 1156
		verticalOffset = roffset.exec( pos[ 1 ] );                                                                           // 1157
		offsets[ this ] = [                                                                                                  // 1158
			horizontalOffset ? horizontalOffset[ 0 ] : 0,                                                                       // 1159
			verticalOffset ? verticalOffset[ 0 ] : 0                                                                            // 1160
		];                                                                                                                   // 1161
                                                                                                                       // 1162
		// reduce to just the positions without the offsets                                                                  // 1163
		options[ this ] = [                                                                                                  // 1164
			rposition.exec( pos[ 0 ] )[ 0 ],                                                                                    // 1165
			rposition.exec( pos[ 1 ] )[ 0 ]                                                                                     // 1166
		];                                                                                                                   // 1167
	});                                                                                                                   // 1168
                                                                                                                       // 1169
	// normalize collision option                                                                                         // 1170
	if ( collision.length === 1 ) {                                                                                       // 1171
		collision[ 1 ] = collision[ 0 ];                                                                                     // 1172
	}                                                                                                                     // 1173
                                                                                                                       // 1174
	if ( options.at[ 0 ] === "right" ) {                                                                                  // 1175
		basePosition.left += targetWidth;                                                                                    // 1176
	} else if ( options.at[ 0 ] === "center" ) {                                                                          // 1177
		basePosition.left += targetWidth / 2;                                                                                // 1178
	}                                                                                                                     // 1179
                                                                                                                       // 1180
	if ( options.at[ 1 ] === "bottom" ) {                                                                                 // 1181
		basePosition.top += targetHeight;                                                                                    // 1182
	} else if ( options.at[ 1 ] === "center" ) {                                                                          // 1183
		basePosition.top += targetHeight / 2;                                                                                // 1184
	}                                                                                                                     // 1185
                                                                                                                       // 1186
	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );                                                       // 1187
	basePosition.left += atOffset[ 0 ];                                                                                   // 1188
	basePosition.top += atOffset[ 1 ];                                                                                    // 1189
                                                                                                                       // 1190
	return this.each(function() {                                                                                         // 1191
		var collisionPosition, using,                                                                                        // 1192
			elem = $( this ),                                                                                                   // 1193
			elemWidth = elem.outerWidth(),                                                                                      // 1194
			elemHeight = elem.outerHeight(),                                                                                    // 1195
			marginLeft = parseCss( this, "marginLeft" ),                                                                        // 1196
			marginTop = parseCss( this, "marginTop" ),                                                                          // 1197
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,                       // 1198
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,                    // 1199
			position = $.extend( {}, basePosition ),                                                                            // 1200
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );                                         // 1201
                                                                                                                       // 1202
		if ( options.my[ 0 ] === "right" ) {                                                                                 // 1203
			position.left -= elemWidth;                                                                                         // 1204
		} else if ( options.my[ 0 ] === "center" ) {                                                                         // 1205
			position.left -= elemWidth / 2;                                                                                     // 1206
		}                                                                                                                    // 1207
                                                                                                                       // 1208
		if ( options.my[ 1 ] === "bottom" ) {                                                                                // 1209
			position.top -= elemHeight;                                                                                         // 1210
		} else if ( options.my[ 1 ] === "center" ) {                                                                         // 1211
			position.top -= elemHeight / 2;                                                                                     // 1212
		}                                                                                                                    // 1213
                                                                                                                       // 1214
		position.left += myOffset[ 0 ];                                                                                      // 1215
		position.top += myOffset[ 1 ];                                                                                       // 1216
                                                                                                                       // 1217
		// if the browser doesn't support fractions, then round for consistent results                                       // 1218
		if ( !$.support.offsetFractions ) {                                                                                  // 1219
			position.left = round( position.left );                                                                             // 1220
			position.top = round( position.top );                                                                               // 1221
		}                                                                                                                    // 1222
                                                                                                                       // 1223
		collisionPosition = {                                                                                                // 1224
			marginLeft: marginLeft,                                                                                             // 1225
			marginTop: marginTop                                                                                                // 1226
		};                                                                                                                   // 1227
                                                                                                                       // 1228
		$.each( [ "left", "top" ], function( i, dir ) {                                                                      // 1229
			if ( $.ui.position[ collision[ i ] ] ) {                                                                            // 1230
				$.ui.position[ collision[ i ] ][ dir ]( position, {                                                                // 1231
					targetWidth: targetWidth,                                                                                         // 1232
					targetHeight: targetHeight,                                                                                       // 1233
					elemWidth: elemWidth,                                                                                             // 1234
					elemHeight: elemHeight,                                                                                           // 1235
					collisionPosition: collisionPosition,                                                                             // 1236
					collisionWidth: collisionWidth,                                                                                   // 1237
					collisionHeight: collisionHeight,                                                                                 // 1238
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],                                        // 1239
					my: options.my,                                                                                                   // 1240
					at: options.at,                                                                                                   // 1241
					within: within,                                                                                                   // 1242
					elem : elem                                                                                                       // 1243
				});                                                                                                                // 1244
			}                                                                                                                   // 1245
		});                                                                                                                  // 1246
                                                                                                                       // 1247
		if ( $.fn.bgiframe ) {                                                                                               // 1248
			elem.bgiframe();                                                                                                    // 1249
		}                                                                                                                    // 1250
                                                                                                                       // 1251
		if ( options.using ) {                                                                                               // 1252
			// adds feedback as second argument to using callback, if present                                                   // 1253
			using = function( props ) {                                                                                         // 1254
				var left = targetOffset.left - position.left,                                                                      // 1255
					right = left + targetWidth - elemWidth,                                                                           // 1256
					top = targetOffset.top - position.top,                                                                            // 1257
					bottom = top + targetHeight - elemHeight,                                                                         // 1258
					feedback = {                                                                                                      // 1259
						target: {                                                                                                        // 1260
							element: target,                                                                                                // 1261
							left: targetOffset.left,                                                                                        // 1262
							top: targetOffset.top,                                                                                          // 1263
							width: targetWidth,                                                                                             // 1264
							height: targetHeight                                                                                            // 1265
						},                                                                                                               // 1266
						element: {                                                                                                       // 1267
							element: elem,                                                                                                  // 1268
							left: position.left,                                                                                            // 1269
							top: position.top,                                                                                              // 1270
							width: elemWidth,                                                                                               // 1271
							height: elemHeight                                                                                              // 1272
						},                                                                                                               // 1273
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",                                                  // 1274
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"                                                     // 1275
					};                                                                                                                // 1276
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {                                              // 1277
					feedback.horizontal = "center";                                                                                   // 1278
				}                                                                                                                  // 1279
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {                                           // 1280
					feedback.vertical = "middle";                                                                                     // 1281
				}                                                                                                                  // 1282
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {                                       // 1283
					feedback.important = "horizontal";                                                                                // 1284
				} else {                                                                                                           // 1285
					feedback.important = "vertical";                                                                                  // 1286
				}                                                                                                                  // 1287
				options.using.call( this, props, feedback );                                                                       // 1288
			};                                                                                                                  // 1289
		}                                                                                                                    // 1290
                                                                                                                       // 1291
		elem.offset( $.extend( position, { using: using } ) );                                                               // 1292
	});                                                                                                                   // 1293
};                                                                                                                     // 1294
                                                                                                                       // 1295
$.ui.position = {                                                                                                      // 1296
	fit: {                                                                                                                // 1297
		left: function( position, data ) {                                                                                   // 1298
			var within = data.within,                                                                                           // 1299
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,                                           // 1300
				outerWidth = within.width,                                                                                         // 1301
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,                                              // 1302
				overLeft = withinOffset - collisionPosLeft,                                                                        // 1303
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,                                    // 1304
				newOverRight;                                                                                                      // 1305
                                                                                                                       // 1306
			// element is wider than within                                                                                     // 1307
			if ( data.collisionWidth > outerWidth ) {                                                                           // 1308
				// element is initially over the left side of within                                                               // 1309
				if ( overLeft > 0 && overRight <= 0 ) {                                                                            // 1310
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;                        // 1311
					position.left += overLeft - newOverRight;                                                                         // 1312
				// element is initially over right side of within                                                                  // 1313
				} else if ( overRight > 0 && overLeft <= 0 ) {                                                                     // 1314
					position.left = withinOffset;                                                                                     // 1315
				// element is initially over both left and right sides of within                                                   // 1316
				} else {                                                                                                           // 1317
					if ( overLeft > overRight ) {                                                                                     // 1318
						position.left = withinOffset + outerWidth - data.collisionWidth;                                                 // 1319
					} else {                                                                                                          // 1320
						position.left = withinOffset;                                                                                    // 1321
					}                                                                                                                 // 1322
				}                                                                                                                  // 1323
			// too far left -> align with left edge                                                                             // 1324
			} else if ( overLeft > 0 ) {                                                                                        // 1325
				position.left += overLeft;                                                                                         // 1326
			// too far right -> align with right edge                                                                           // 1327
			} else if ( overRight > 0 ) {                                                                                       // 1328
				position.left -= overRight;                                                                                        // 1329
			// adjust based on position and margin                                                                              // 1330
			} else {                                                                                                            // 1331
				position.left = max( position.left - collisionPosLeft, position.left );                                            // 1332
			}                                                                                                                   // 1333
		},                                                                                                                   // 1334
		top: function( position, data ) {                                                                                    // 1335
			var within = data.within,                                                                                           // 1336
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,                                             // 1337
				outerHeight = data.within.height,                                                                                  // 1338
				collisionPosTop = position.top - data.collisionPosition.marginTop,                                                 // 1339
				overTop = withinOffset - collisionPosTop,                                                                          // 1340
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,                                  // 1341
				newOverBottom;                                                                                                     // 1342
                                                                                                                       // 1343
			// element is taller than within                                                                                    // 1344
			if ( data.collisionHeight > outerHeight ) {                                                                         // 1345
				// element is initially over the top of within                                                                     // 1346
				if ( overTop > 0 && overBottom <= 0 ) {                                                                            // 1347
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;                       // 1348
					position.top += overTop - newOverBottom;                                                                          // 1349
				// element is initially over bottom of within                                                                      // 1350
				} else if ( overBottom > 0 && overTop <= 0 ) {                                                                     // 1351
					position.top = withinOffset;                                                                                      // 1352
				// element is initially over both top and bottom of within                                                         // 1353
				} else {                                                                                                           // 1354
					if ( overTop > overBottom ) {                                                                                     // 1355
						position.top = withinOffset + outerHeight - data.collisionHeight;                                                // 1356
					} else {                                                                                                          // 1357
						position.top = withinOffset;                                                                                     // 1358
					}                                                                                                                 // 1359
				}                                                                                                                  // 1360
			// too far up -> align with top                                                                                     // 1361
			} else if ( overTop > 0 ) {                                                                                         // 1362
				position.top += overTop;                                                                                           // 1363
			// too far down -> align with bottom edge                                                                           // 1364
			} else if ( overBottom > 0 ) {                                                                                      // 1365
				position.top -= overBottom;                                                                                        // 1366
			// adjust based on position and margin                                                                              // 1367
			} else {                                                                                                            // 1368
				position.top = max( position.top - collisionPosTop, position.top );                                                // 1369
			}                                                                                                                   // 1370
		}                                                                                                                    // 1371
	},                                                                                                                    // 1372
	flip: {                                                                                                               // 1373
		left: function( position, data ) {                                                                                   // 1374
			var within = data.within,                                                                                           // 1375
				withinOffset = within.offset.left + within.scrollLeft,                                                             // 1376
				outerWidth = within.width,                                                                                         // 1377
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,                                             // 1378
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,                                              // 1379
				overLeft = collisionPosLeft - offsetLeft,                                                                          // 1380
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,                                      // 1381
				myOffset = data.my[ 0 ] === "left" ?                                                                               // 1382
					-data.elemWidth :                                                                                                 // 1383
					data.my[ 0 ] === "right" ?                                                                                        // 1384
						data.elemWidth :                                                                                                 // 1385
						0,                                                                                                               // 1386
				atOffset = data.at[ 0 ] === "left" ?                                                                               // 1387
					data.targetWidth :                                                                                                // 1388
					data.at[ 0 ] === "right" ?                                                                                        // 1389
						-data.targetWidth :                                                                                              // 1390
						0,                                                                                                               // 1391
				offset = -2 * data.offset[ 0 ],                                                                                    // 1392
				newOverRight,                                                                                                      // 1393
				newOverLeft;                                                                                                       // 1394
                                                                                                                       // 1395
			if ( overLeft < 0 ) {                                                                                               // 1396
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;     // 1397
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {                                                        // 1398
					position.left += myOffset + atOffset + offset;                                                                    // 1399
				}                                                                                                                  // 1400
			}                                                                                                                   // 1401
			else if ( overRight > 0 ) {                                                                                         // 1402
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;       // 1403
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {                                                         // 1404
					position.left += myOffset + atOffset + offset;                                                                    // 1405
				}                                                                                                                  // 1406
			}                                                                                                                   // 1407
		},                                                                                                                   // 1408
		top: function( position, data ) {                                                                                    // 1409
			var within = data.within,                                                                                           // 1410
				withinOffset = within.offset.top + within.scrollTop,                                                               // 1411
				outerHeight = within.height,                                                                                       // 1412
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,                                                // 1413
				collisionPosTop = position.top - data.collisionPosition.marginTop,                                                 // 1414
				overTop = collisionPosTop - offsetTop,                                                                             // 1415
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,                                     // 1416
				top = data.my[ 1 ] === "top",                                                                                      // 1417
				myOffset = top ?                                                                                                   // 1418
					-data.elemHeight :                                                                                                // 1419
					data.my[ 1 ] === "bottom" ?                                                                                       // 1420
						data.elemHeight :                                                                                                // 1421
						0,                                                                                                               // 1422
				atOffset = data.at[ 1 ] === "top" ?                                                                                // 1423
					data.targetHeight :                                                                                               // 1424
					data.at[ 1 ] === "bottom" ?                                                                                       // 1425
						-data.targetHeight :                                                                                             // 1426
						0,                                                                                                               // 1427
				offset = -2 * data.offset[ 1 ],                                                                                    // 1428
				newOverTop,                                                                                                        // 1429
				newOverBottom;                                                                                                     // 1430
			if ( overTop < 0 ) {                                                                                                // 1431
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;   // 1432
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;                                                                     // 1434
				}                                                                                                                  // 1435
			}                                                                                                                   // 1436
			else if ( overBottom > 0 ) {                                                                                        // 1437
				newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;          // 1438
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;                                                                     // 1440
				}                                                                                                                  // 1441
			}                                                                                                                   // 1442
		}                                                                                                                    // 1443
	},                                                                                                                    // 1444
	flipfit: {                                                                                                            // 1445
		left: function() {                                                                                                   // 1446
			$.ui.position.flip.left.apply( this, arguments );                                                                   // 1447
			$.ui.position.fit.left.apply( this, arguments );                                                                    // 1448
		},                                                                                                                   // 1449
		top: function() {                                                                                                    // 1450
			$.ui.position.flip.top.apply( this, arguments );                                                                    // 1451
			$.ui.position.fit.top.apply( this, arguments );                                                                     // 1452
		}                                                                                                                    // 1453
	}                                                                                                                     // 1454
};                                                                                                                     // 1455
                                                                                                                       // 1456
// fraction support test                                                                                               // 1457
(function () {                                                                                                         // 1458
	var testElement, testElementParent, testElementStyle, offsetLeft, i,                                                  // 1459
		body = document.getElementsByTagName( "body" )[ 0 ],                                                                 // 1460
		div = document.createElement( "div" );                                                                               // 1461
                                                                                                                       // 1462
	//Create a "fake body" for testing based on method used in jQuery.support                                             // 1463
	testElement = document.createElement( body ? "div" : "body" );                                                        // 1464
	testElementStyle = {                                                                                                  // 1465
		visibility: "hidden",                                                                                                // 1466
		width: 0,                                                                                                            // 1467
		height: 0,                                                                                                           // 1468
		border: 0,                                                                                                           // 1469
		margin: 0,                                                                                                           // 1470
		background: "none"                                                                                                   // 1471
	};                                                                                                                    // 1472
	if ( body ) {                                                                                                         // 1473
		$.extend( testElementStyle, {                                                                                        // 1474
			position: "absolute",                                                                                               // 1475
			left: "-1000px",                                                                                                    // 1476
			top: "-1000px"                                                                                                      // 1477
		});                                                                                                                  // 1478
	}                                                                                                                     // 1479
	for ( i in testElementStyle ) {                                                                                       // 1480
		testElement.style[ i ] = testElementStyle[ i ];                                                                      // 1481
	}                                                                                                                     // 1482
	testElement.appendChild( div );                                                                                       // 1483
	testElementParent = body || document.documentElement;                                                                 // 1484
	testElementParent.insertBefore( testElement, testElementParent.firstChild );                                          // 1485
                                                                                                                       // 1486
	div.style.cssText = "position: absolute; left: 10.7432222px;";                                                        // 1487
                                                                                                                       // 1488
	offsetLeft = $( div ).offset().left;                                                                                  // 1489
	$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;                                                       // 1490
                                                                                                                       // 1491
	testElement.innerHTML = "";                                                                                           // 1492
	testElementParent.removeChild( testElement );                                                                         // 1493
})();                                                                                                                  // 1494
                                                                                                                       // 1495
// DEPRECATED                                                                                                          // 1496
if ( $.uiBackCompat !== false ) {                                                                                      // 1497
	// offset option                                                                                                      // 1498
	(function( $ ) {                                                                                                      // 1499
		var _position = $.fn.position;                                                                                       // 1500
		$.fn.position = function( options ) {                                                                                // 1501
			if ( !options || !options.offset ) {                                                                                // 1502
				return _position.call( this, options );                                                                            // 1503
			}                                                                                                                   // 1504
			var offset = options.offset.split( " " ),                                                                           // 1505
				at = options.at.split( " " );                                                                                      // 1506
			if ( offset.length === 1 ) {                                                                                        // 1507
				offset[ 1 ] = offset[ 0 ];                                                                                         // 1508
			}                                                                                                                   // 1509
			if ( /^\d/.test( offset[ 0 ] ) ) {                                                                                  // 1510
				offset[ 0 ] = "+" + offset[ 0 ];                                                                                   // 1511
			}                                                                                                                   // 1512
			if ( /^\d/.test( offset[ 1 ] ) ) {                                                                                  // 1513
				offset[ 1 ] = "+" + offset[ 1 ];                                                                                   // 1514
			}                                                                                                                   // 1515
			if ( at.length === 1 ) {                                                                                            // 1516
				if ( /left|center|right/.test( at[ 0 ] ) ) {                                                                       // 1517
					at[ 1 ] = "center";                                                                                               // 1518
				} else {                                                                                                           // 1519
					at[ 1 ] = at[ 0 ];                                                                                                // 1520
					at[ 0 ] = "center";                                                                                               // 1521
				}                                                                                                                  // 1522
			}                                                                                                                   // 1523
			return _position.call( this, $.extend( options, {                                                                   // 1524
				at: at[ 0 ] + offset[ 0 ] + " " + at[ 1 ] + offset[ 1 ],                                                           // 1525
				offset: undefined                                                                                                  // 1526
			} ) );                                                                                                              // 1527
		};                                                                                                                   // 1528
	}( jQuery ) );                                                                                                        // 1529
}                                                                                                                      // 1530
                                                                                                                       // 1531
}( jQuery ) );                                                                                                         // 1532
(function( $, undefined ) {                                                                                            // 1533
                                                                                                                       // 1534
$.widget("ui.draggable", $.ui.mouse, {                                                                                 // 1535
	version: "1.9.2",                                                                                                     // 1536
	widgetEventPrefix: "drag",                                                                                            // 1537
	options: {                                                                                                            // 1538
		addClasses: true,                                                                                                    // 1539
		appendTo: "parent",                                                                                                  // 1540
		axis: false,                                                                                                         // 1541
		connectToSortable: false,                                                                                            // 1542
		containment: false,                                                                                                  // 1543
		cursor: "auto",                                                                                                      // 1544
		cursorAt: false,                                                                                                     // 1545
		grid: false,                                                                                                         // 1546
		handle: false,                                                                                                       // 1547
		helper: "original",                                                                                                  // 1548
		iframeFix: false,                                                                                                    // 1549
		opacity: false,                                                                                                      // 1550
		refreshPositions: false,                                                                                             // 1551
		revert: false,                                                                                                       // 1552
		revertDuration: 500,                                                                                                 // 1553
		scope: "default",                                                                                                    // 1554
		scroll: true,                                                                                                        // 1555
		scrollSensitivity: 20,                                                                                               // 1556
		scrollSpeed: 20,                                                                                                     // 1557
		snap: false,                                                                                                         // 1558
		snapMode: "both",                                                                                                    // 1559
		snapTolerance: 20,                                                                                                   // 1560
		stack: false,                                                                                                        // 1561
		zIndex: false                                                                                                        // 1562
	},                                                                                                                    // 1563
	_create: function() {                                                                                                 // 1564
                                                                                                                       // 1565
		if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))                         // 1566
			this.element[0].style.position = 'relative';                                                                        // 1567
                                                                                                                       // 1568
		(this.options.addClasses && this.element.addClass("ui-draggable"));                                                  // 1569
		(this.options.disabled && this.element.addClass("ui-draggable-disabled"));                                           // 1570
                                                                                                                       // 1571
		this._mouseInit();                                                                                                   // 1572
                                                                                                                       // 1573
	},                                                                                                                    // 1574
                                                                                                                       // 1575
	_destroy: function() {                                                                                                // 1576
		this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );                              // 1577
		this._mouseDestroy();                                                                                                // 1578
	},                                                                                                                    // 1579
                                                                                                                       // 1580
	_mouseCapture: function(event) {                                                                                      // 1581
                                                                                                                       // 1582
		var o = this.options;                                                                                                // 1583
                                                                                                                       // 1584
		// among others, prevent a drag on a resizable-handle                                                                // 1585
		if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))                                         // 1586
			return false;                                                                                                       // 1587
                                                                                                                       // 1588
		//Quit if we're not on a valid handle                                                                                // 1589
		this.handle = this._getHandle(event);                                                                                // 1590
		if (!this.handle)                                                                                                    // 1591
			return false;                                                                                                       // 1592
                                                                                                                       // 1593
		$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {                                                   // 1594
			$('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>')                                           // 1595
			.css({                                                                                                              // 1596
				width: this.offsetWidth+"px", height: this.offsetHeight+"px",                                                      // 1597
				position: "absolute", opacity: "0.001", zIndex: 1000                                                               // 1598
			})                                                                                                                  // 1599
			.css($(this).offset())                                                                                              // 1600
			.appendTo("body");                                                                                                  // 1601
		});                                                                                                                  // 1602
                                                                                                                       // 1603
		return true;                                                                                                         // 1604
                                                                                                                       // 1605
	},                                                                                                                    // 1606
                                                                                                                       // 1607
	_mouseStart: function(event) {                                                                                        // 1608
                                                                                                                       // 1609
		var o = this.options;                                                                                                // 1610
                                                                                                                       // 1611
		//Create and append the visible helper                                                                               // 1612
		this.helper = this._createHelper(event);                                                                             // 1613
                                                                                                                       // 1614
		this.helper.addClass("ui-draggable-dragging");                                                                       // 1615
                                                                                                                       // 1616
		//Cache the helper size                                                                                              // 1617
		this._cacheHelperProportions();                                                                                      // 1618
                                                                                                                       // 1619
		//If ddmanager is used for droppables, set the global draggable                                                      // 1620
		if($.ui.ddmanager)                                                                                                   // 1621
			$.ui.ddmanager.current = this;                                                                                      // 1622
                                                                                                                       // 1623
		/*                                                                                                                   // 1624
		 * - Position generation -                                                                                           // 1625
		 * This block generates everything position related - it's the core of draggables.                                   // 1626
		 */                                                                                                                  // 1627
                                                                                                                       // 1628
		//Cache the margins of the original element                                                                          // 1629
		this._cacheMargins();                                                                                                // 1630
                                                                                                                       // 1631
		//Store the helper's css position                                                                                    // 1632
		this.cssPosition = this.helper.css("position");                                                                      // 1633
		this.scrollParent = this.helper.scrollParent();                                                                      // 1634
                                                                                                                       // 1635
		//The element's absolute position on the page minus margins                                                          // 1636
		this.offset = this.positionAbs = this.element.offset();                                                              // 1637
		this.offset = {                                                                                                      // 1638
			top: this.offset.top - this.margins.top,                                                                            // 1639
			left: this.offset.left - this.margins.left                                                                          // 1640
		};                                                                                                                   // 1641
                                                                                                                       // 1642
		$.extend(this.offset, {                                                                                              // 1643
			click: { //Where the click happened, relative to the element                                                        // 1644
				left: event.pageX - this.offset.left,                                                                              // 1645
				top: event.pageY - this.offset.top                                                                                 // 1646
			},                                                                                                                  // 1647
			parent: this._getParentOffset(),                                                                                    // 1648
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});                                                                                                                  // 1650
                                                                                                                       // 1651
		//Generate the original position                                                                                     // 1652
		this.originalPosition = this.position = this._generatePosition(event);                                               // 1653
		this.originalPageX = event.pageX;                                                                                    // 1654
		this.originalPageY = event.pageY;                                                                                    // 1655
                                                                                                                       // 1656
		//Adjust the mouse offset relative to the helper if 'cursorAt' is supplied                                           // 1657
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));                                                            // 1658
                                                                                                                       // 1659
		//Set a containment if given in the options                                                                          // 1660
		if(o.containment)                                                                                                    // 1661
			this._setContainment();                                                                                             // 1662
                                                                                                                       // 1663
		//Trigger event + callbacks                                                                                          // 1664
		if(this._trigger("start", event) === false) {                                                                        // 1665
			this._clear();                                                                                                      // 1666
			return false;                                                                                                       // 1667
		}                                                                                                                    // 1668
                                                                                                                       // 1669
		//Recache the helper size                                                                                            // 1670
		this._cacheHelperProportions();                                                                                      // 1671
                                                                                                                       // 1672
		//Prepare the droppable offsets                                                                                      // 1673
		if ($.ui.ddmanager && !o.dropBehaviour)                                                                              // 1674
			$.ui.ddmanager.prepareOffsets(this, event);                                                                         // 1675
                                                                                                                       // 1676
                                                                                                                       // 1677
		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position
                                                                                                                       // 1679
		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)                  // 1680
		if ( $.ui.ddmanager ) $.ui.ddmanager.dragStart(this, event);                                                         // 1681
                                                                                                                       // 1682
		return true;                                                                                                         // 1683
	},                                                                                                                    // 1684
                                                                                                                       // 1685
	_mouseDrag: function(event, noPropagation) {                                                                          // 1686
                                                                                                                       // 1687
		//Compute the helpers position                                                                                       // 1688
		this.position = this._generatePosition(event);                                                                       // 1689
		this.positionAbs = this._convertPositionTo("absolute");                                                              // 1690
                                                                                                                       // 1691
		//Call plugins and callbacks and use the resulting position if something is returned                                 // 1692
		if (!noPropagation) {                                                                                                // 1693
			var ui = this._uiHash();                                                                                            // 1694
			if(this._trigger('drag', event, ui) === false) {                                                                    // 1695
				this._mouseUp({});                                                                                                 // 1696
				return false;                                                                                                      // 1697
			}                                                                                                                   // 1698
			this.position = ui.position;                                                                                        // 1699
		}                                                                                                                    // 1700
                                                                                                                       // 1701
		if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';              // 1702
		if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';                // 1703
		if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);                                                                 // 1704
                                                                                                                       // 1705
		return false;                                                                                                        // 1706
	},                                                                                                                    // 1707
                                                                                                                       // 1708
	_mouseStop: function(event) {                                                                                         // 1709
                                                                                                                       // 1710
		//If we are using droppables, inform the manager about the drop                                                      // 1711
		var dropped = false;                                                                                                 // 1712
		if ($.ui.ddmanager && !this.options.dropBehaviour)                                                                   // 1713
			dropped = $.ui.ddmanager.drop(this, event);                                                                         // 1714
                                                                                                                       // 1715
		//if a drop comes from outside (a sortable)                                                                          // 1716
		if(this.dropped) {                                                                                                   // 1717
			dropped = this.dropped;                                                                                             // 1718
			this.dropped = false;                                                                                               // 1719
		}                                                                                                                    // 1720
                                                                                                                       // 1721
		//if the original element is no longer in the DOM don't bother to continue (see #8269)                               // 1722
		var element = this.element[0], elementInDom = false;                                                                 // 1723
		while ( element && (element = element.parentNode) ) {                                                                // 1724
			if (element == document ) {                                                                                         // 1725
				elementInDom = true;                                                                                               // 1726
			}                                                                                                                   // 1727
		}                                                                                                                    // 1728
		if ( !elementInDom && this.options.helper === "original" )                                                           // 1729
			return false;                                                                                                       // 1730
                                                                                                                       // 1731
		if((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			var that = this;                                                                                                    // 1733
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {               // 1734
				if(that._trigger("stop", event) !== false) {                                                                       // 1735
					that._clear();                                                                                                    // 1736
				}                                                                                                                  // 1737
			});                                                                                                                 // 1738
		} else {                                                                                                             // 1739
			if(this._trigger("stop", event) !== false) {                                                                        // 1740
				this._clear();                                                                                                     // 1741
			}                                                                                                                   // 1742
		}                                                                                                                    // 1743
                                                                                                                       // 1744
		return false;                                                                                                        // 1745
	},                                                                                                                    // 1746
                                                                                                                       // 1747
	_mouseUp: function(event) {                                                                                           // 1748
		//Remove frame helpers                                                                                               // 1749
		$("div.ui-draggable-iframeFix").each(function() {                                                                    // 1750
			this.parentNode.removeChild(this);                                                                                  // 1751
		});                                                                                                                  // 1752
                                                                                                                       // 1753
		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)                  // 1754
		if( $.ui.ddmanager ) $.ui.ddmanager.dragStop(this, event);                                                           // 1755
                                                                                                                       // 1756
		return $.ui.mouse.prototype._mouseUp.call(this, event);                                                              // 1757
	},                                                                                                                    // 1758
                                                                                                                       // 1759
	cancel: function() {                                                                                                  // 1760
                                                                                                                       // 1761
		if(this.helper.is(".ui-draggable-dragging")) {                                                                       // 1762
			this._mouseUp({});                                                                                                  // 1763
		} else {                                                                                                             // 1764
			this._clear();                                                                                                      // 1765
		}                                                                                                                    // 1766
                                                                                                                       // 1767
		return this;                                                                                                         // 1768
                                                                                                                       // 1769
	},                                                                                                                    // 1770
                                                                                                                       // 1771
	_getHandle: function(event) {                                                                                         // 1772
                                                                                                                       // 1773
		var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;                    // 1774
		$(this.options.handle, this.element)                                                                                 // 1775
			.find("*")                                                                                                          // 1776
			.andSelf()                                                                                                          // 1777
			.each(function() {                                                                                                  // 1778
				if(this == event.target) handle = true;                                                                            // 1779
			});                                                                                                                 // 1780
                                                                                                                       // 1781
		return handle;                                                                                                       // 1782
                                                                                                                       // 1783
	},                                                                                                                    // 1784
                                                                                                                       // 1785
	_createHelper: function(event) {                                                                                      // 1786
                                                                                                                       // 1787
		var o = this.options;                                                                                                // 1788
		var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);
                                                                                                                       // 1790
		if(!helper.parents('body').length)                                                                                   // 1791
			helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));                                // 1792
                                                                                                                       // 1793
		if(helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))                               // 1794
			helper.css("position", "absolute");                                                                                 // 1795
                                                                                                                       // 1796
		return helper;                                                                                                       // 1797
                                                                                                                       // 1798
	},                                                                                                                    // 1799
                                                                                                                       // 1800
	_adjustOffsetFromHelper: function(obj) {                                                                              // 1801
		if (typeof obj == 'string') {                                                                                        // 1802
			obj = obj.split(' ');                                                                                               // 1803
		}                                                                                                                    // 1804
		if ($.isArray(obj)) {                                                                                                // 1805
			obj = {left: +obj[0], top: +obj[1] || 0};                                                                           // 1806
		}                                                                                                                    // 1807
		if ('left' in obj) {                                                                                                 // 1808
			this.offset.click.left = obj.left + this.margins.left;                                                              // 1809
		}                                                                                                                    // 1810
		if ('right' in obj) {                                                                                                // 1811
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;                              // 1812
		}                                                                                                                    // 1813
		if ('top' in obj) {                                                                                                  // 1814
			this.offset.click.top = obj.top + this.margins.top;                                                                 // 1815
		}                                                                                                                    // 1816
		if ('bottom' in obj) {                                                                                               // 1817
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;                              // 1818
		}                                                                                                                    // 1819
	},                                                                                                                    // 1820
                                                                                                                       // 1821
	_getParentOffset: function() {                                                                                        // 1822
                                                                                                                       // 1823
		//Get the offsetParent and cache its position                                                                        // 1824
		this.offsetParent = this.helper.offsetParent();                                                                      // 1825
		var po = this.offsetParent.offset();                                                                                 // 1826
                                                                                                                       // 1827
		// This is a special case where we need to modify a offset calculated on start, since the following happened:        // 1828
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent     // 1829
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();                                                                          // 1833
			po.top += this.scrollParent.scrollTop();                                                                            // 1834
		}                                                                                                                    // 1835
                                                                                                                       // 1836
		if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
		|| (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie)) //Ugly IE fix  // 1838
			po = { top: 0, left: 0 };                                                                                           // 1839
                                                                                                                       // 1840
		return {                                                                                                             // 1841
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),                                          // 1842
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)                                        // 1843
		};                                                                                                                   // 1844
                                                                                                                       // 1845
	},                                                                                                                    // 1846
                                                                                                                       // 1847
	_getRelativeOffset: function() {                                                                                      // 1848
                                                                                                                       // 1849
		if(this.cssPosition == "relative") {                                                                                 // 1850
			var p = this.element.position();                                                                                    // 1851
			return {                                                                                                            // 1852
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),                           // 1853
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()                        // 1854
			};                                                                                                                  // 1855
		} else {                                                                                                             // 1856
			return { top: 0, left: 0 };                                                                                         // 1857
		}                                                                                                                    // 1858
                                                                                                                       // 1859
	},                                                                                                                    // 1860
                                                                                                                       // 1861
	_cacheMargins: function() {                                                                                           // 1862
		this.margins = {                                                                                                     // 1863
			left: (parseInt(this.element.css("marginLeft"),10) || 0),                                                           // 1864
			top: (parseInt(this.element.css("marginTop"),10) || 0),                                                             // 1865
			right: (parseInt(this.element.css("marginRight"),10) || 0),                                                         // 1866
			bottom: (parseInt(this.element.css("marginBottom"),10) || 0)                                                        // 1867
		};                                                                                                                   // 1868
	},                                                                                                                    // 1869
                                                                                                                       // 1870
	_cacheHelperProportions: function() {                                                                                 // 1871
		this.helperProportions = {                                                                                           // 1872
			width: this.helper.outerWidth(),                                                                                    // 1873
			height: this.helper.outerHeight()                                                                                   // 1874
		};                                                                                                                   // 1875
	},                                                                                                                    // 1876
                                                                                                                       // 1877
	_setContainment: function() {                                                                                         // 1878
                                                                                                                       // 1879
		var o = this.options;                                                                                                // 1880
		if(o.containment == 'parent') o.containment = this.helper[0].parentNode;                                             // 1881
		if(o.containment == 'document' || o.containment == 'window') this.containment = [                                    // 1882
			o.containment == 'document' ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,     // 1883
			o.containment == 'document' ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,        // 1884
			(o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
			(o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
		];                                                                                                                   // 1887
                                                                                                                       // 1888
		if(!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {                      // 1889
			var c = $(o.containment);                                                                                           // 1890
			var ce = c[0]; if(!ce) return;                                                                                      // 1891
			var co = c.offset();                                                                                                // 1892
			var over = ($(ce).css("overflow") != 'hidden');                                                                     // 1893
                                                                                                                       // 1894
			this.containment = [                                                                                                // 1895
				(parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0),                   // 1896
				(parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0),                     // 1897
				(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
				(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top  - this.margins.bottom
			];                                                                                                                  // 1900
			this.relative_container = c;                                                                                        // 1901
                                                                                                                       // 1902
		} else if(o.containment.constructor == Array) {                                                                      // 1903
			this.containment = o.containment;                                                                                   // 1904
		}                                                                                                                    // 1905
                                                                                                                       // 1906
	},                                                                                                                    // 1907
                                                                                                                       // 1908
	_convertPositionTo: function(d, pos) {                                                                                // 1909
                                                                                                                       // 1910
		if(!pos) pos = this.position;                                                                                        // 1911
		var mod = d == "absolute" ? 1 : -1;                                                                                  // 1912
		var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                                                                                                                       // 1914
		return {                                                                                                             // 1915
			top: (                                                                                                              // 1916
				pos.top																	// The absolute mouse position                                                             // 1917
				+ this.offset.relative.top * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.top * mod											// The offsetParent's offset without borders (offset + border)            // 1919
				- ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),                                                                                                                  // 1921
			left: (                                                                                                             // 1922
				pos.left																// The absolute mouse position                                                             // 1923
				+ this.offset.relative.left * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.left * mod											// The offsetParent's offset without borders (offset + border)           // 1925
				- ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)                                                                                                                   // 1927
		};                                                                                                                   // 1928
                                                                                                                       // 1929
	},                                                                                                                    // 1930
                                                                                                                       // 1931
	_generatePosition: function(event) {                                                                                  // 1932
                                                                                                                       // 1933
		var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
		var pageX = event.pageX;                                                                                             // 1935
		var pageY = event.pageY;                                                                                             // 1936
                                                                                                                       // 1937
		/*                                                                                                                   // 1938
		 * - Position constraining -                                                                                         // 1939
		 * Constrain the position to a mix of grid, containment.                                                             // 1940
		 */                                                                                                                  // 1941
                                                                                                                       // 1942
		if(this.originalPosition) { //If we are not dragging yet, we won't check for options                                 // 1943
			var containment;                                                                                                    // 1944
			if(this.containment) {                                                                                              // 1945
			if (this.relative_container){                                                                                       // 1946
				var co = this.relative_container.offset();                                                                         // 1947
				containment = [ this.containment[0] + co.left,                                                                     // 1948
					this.containment[1] + co.top,                                                                                     // 1949
					this.containment[2] + co.left,                                                                                    // 1950
					this.containment[3] + co.top ];                                                                                   // 1951
			}                                                                                                                   // 1952
			else {                                                                                                              // 1953
				containment = this.containment;                                                                                    // 1954
			}                                                                                                                   // 1955
                                                                                                                       // 1956
				if(event.pageX - this.offset.click.left < containment[0]) pageX = containment[0] + this.offset.click.left;         // 1957
				if(event.pageY - this.offset.click.top < containment[1]) pageY = containment[1] + this.offset.click.top;           // 1958
				if(event.pageX - this.offset.click.left > containment[2]) pageX = containment[2] + this.offset.click.left;         // 1959
				if(event.pageY - this.offset.click.top > containment[3]) pageY = containment[3] + this.offset.click.top;           // 1960
			}                                                                                                                   // 1961
                                                                                                                       // 1962
			if(o.grid) {                                                                                                        // 1963
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? (!(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : (!(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                                                                                                                       // 1967
				var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? (!(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : (!(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}                                                                                                                   // 1970
                                                                                                                       // 1971
		}                                                                                                                    // 1972
                                                                                                                       // 1973
		return {                                                                                                             // 1974
			top: (                                                                                                              // 1975
				pageY																// The absolute mouse position                                                                // 1976
				- this.offset.click.top													// Click offset (relative to the element)                                      // 1977
				- this.offset.relative.top												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.top												// The offsetParent's offset without borders (offset + border)                 // 1979
				+ ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),                                                                                                                  // 1981
			left: (                                                                                                             // 1982
				pageX																// The absolute mouse position                                                                // 1983
				- this.offset.click.left												// Click offset (relative to the element)                                      // 1984
				- this.offset.relative.left												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.left												// The offsetParent's offset without borders (offset + border)                // 1986
				+ ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)                                                                                                                   // 1988
		};                                                                                                                   // 1989
                                                                                                                       // 1990
	},                                                                                                                    // 1991
                                                                                                                       // 1992
	_clear: function() {                                                                                                  // 1993
		this.helper.removeClass("ui-draggable-dragging");                                                                    // 1994
		if(this.helper[0] != this.element[0] && !this.cancelHelperRemoval) this.helper.remove();                             // 1995
		//if($.ui.ddmanager) $.ui.ddmanager.current = null;                                                                  // 1996
		this.helper = null;                                                                                                  // 1997
		this.cancelHelperRemoval = false;                                                                                    // 1998
	},                                                                                                                    // 1999
                                                                                                                       // 2000
	// From now on bulk stuff - mainly helpers                                                                            // 2001
                                                                                                                       // 2002
	_trigger: function(type, event, ui) {                                                                                 // 2003
		ui = ui || this._uiHash();                                                                                           // 2004
		$.ui.plugin.call(this, type, [event, ui]);                                                                           // 2005
		if(type == "drag") this.positionAbs = this._convertPositionTo("absolute"); //The absolute position has to be recalculated after plugins
		return $.Widget.prototype._trigger.call(this, type, event, ui);                                                      // 2007
	},                                                                                                                    // 2008
                                                                                                                       // 2009
	plugins: {},                                                                                                          // 2010
                                                                                                                       // 2011
	_uiHash: function(event) {                                                                                            // 2012
		return {                                                                                                             // 2013
			helper: this.helper,                                                                                                // 2014
			position: this.position,                                                                                            // 2015
			originalPosition: this.originalPosition,                                                                            // 2016
			offset: this.positionAbs                                                                                            // 2017
		};                                                                                                                   // 2018
	}                                                                                                                     // 2019
                                                                                                                       // 2020
});                                                                                                                    // 2021
                                                                                                                       // 2022
$.ui.plugin.add("draggable", "connectToSortable", {                                                                    // 2023
	start: function(event, ui) {                                                                                          // 2024
                                                                                                                       // 2025
		var inst = $(this).data("draggable"), o = inst.options,                                                              // 2026
			uiSortable = $.extend({}, ui, { item: inst.element });                                                              // 2027
		inst.sortables = [];                                                                                                 // 2028
		$(o.connectToSortable).each(function() {                                                                             // 2029
			var sortable = $.data(this, 'sortable');                                                                            // 2030
			if (sortable && !sortable.options.disabled) {                                                                       // 2031
				inst.sortables.push({                                                                                              // 2032
					instance: sortable,                                                                                               // 2033
					shouldRevert: sortable.options.revert                                                                             // 2034
				});                                                                                                                // 2035
				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
				sortable._trigger("activate", event, uiSortable);                                                                  // 2037
			}                                                                                                                   // 2038
		});                                                                                                                  // 2039
                                                                                                                       // 2040
	},                                                                                                                    // 2041
	stop: function(event, ui) {                                                                                           // 2042
                                                                                                                       // 2043
		//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper                  // 2044
		var inst = $(this).data("draggable"),                                                                                // 2045
			uiSortable = $.extend({}, ui, { item: inst.element });                                                              // 2046
                                                                                                                       // 2047
		$.each(inst.sortables, function() {                                                                                  // 2048
			if(this.instance.isOver) {                                                                                          // 2049
                                                                                                                       // 2050
				this.instance.isOver = 0;                                                                                          // 2051
                                                                                                                       // 2052
				inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance                               // 2053
				this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)
                                                                                                                       // 2055
				//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: 'valid/invalid'
				if(this.shouldRevert) this.instance.options.revert = true;                                                         // 2057
                                                                                                                       // 2058
				//Trigger the stop of the sortable                                                                                 // 2059
				this.instance._mouseStop(event);                                                                                   // 2060
                                                                                                                       // 2061
				this.instance.options.helper = this.instance.options._helper;                                                      // 2062
                                                                                                                       // 2063
				//If the helper has been the original item, restore properties in the sortable                                     // 2064
				if(inst.options.helper == 'original')                                                                              // 2065
					this.instance.currentItem.css({ top: 'auto', left: 'auto' });                                                     // 2066
                                                                                                                       // 2067
			} else {                                                                                                            // 2068
				this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance                            // 2069
				this.instance._trigger("deactivate", event, uiSortable);                                                           // 2070
			}                                                                                                                   // 2071
                                                                                                                       // 2072
		});                                                                                                                  // 2073
                                                                                                                       // 2074
	},                                                                                                                    // 2075
	drag: function(event, ui) {                                                                                           // 2076
                                                                                                                       // 2077
		var inst = $(this).data("draggable"), that = this;                                                                   // 2078
                                                                                                                       // 2079
		var checkPos = function(o) {                                                                                         // 2080
			var dyClick = this.offset.click.top, dxClick = this.offset.click.left;                                              // 2081
			var helperTop = this.positionAbs.top, helperLeft = this.positionAbs.left;                                           // 2082
			var itemHeight = o.height, itemWidth = o.width;                                                                     // 2083
			var itemTop = o.top, itemLeft = o.left;                                                                             // 2084
                                                                                                                       // 2085
			return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);            // 2086
		};                                                                                                                   // 2087
                                                                                                                       // 2088
		$.each(inst.sortables, function(i) {                                                                                 // 2089
                                                                                                                       // 2090
			var innermostIntersecting = false;                                                                                  // 2091
			var thisSortable = this;                                                                                            // 2092
			//Copy over some variables to allow calling the sortable's native _intersectsWith                                   // 2093
			this.instance.positionAbs = inst.positionAbs;                                                                       // 2094
			this.instance.helperProportions = inst.helperProportions;                                                           // 2095
			this.instance.offset.click = inst.offset.click;                                                                     // 2096
                                                                                                                       // 2097
			if(this.instance._intersectsWith(this.instance.containerCache)) {                                                   // 2098
				innermostIntersecting = true;                                                                                      // 2099
				$.each(inst.sortables, function () {                                                                               // 2100
					this.instance.positionAbs = inst.positionAbs;                                                                     // 2101
					this.instance.helperProportions = inst.helperProportions;                                                         // 2102
					this.instance.offset.click = inst.offset.click;                                                                   // 2103
					if  (this != thisSortable                                                                                         // 2104
						&& this.instance._intersectsWith(this.instance.containerCache)                                                   // 2105
						&& $.ui.contains(thisSortable.instance.element[0], this.instance.element[0]))                                    // 2106
						innermostIntersecting = false;                                                                                   // 2107
						return innermostIntersecting;                                                                                    // 2108
				});                                                                                                                // 2109
			}                                                                                                                   // 2110
                                                                                                                       // 2111
                                                                                                                       // 2112
			if(innermostIntersecting) {                                                                                         // 2113
				//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once     // 2114
				if(!this.instance.isOver) {                                                                                        // 2115
                                                                                                                       // 2116
					this.instance.isOver = 1;                                                                                         // 2117
					//Now we fake the start of dragging for the sortable instance,                                                    // 2118
					//by cloning the list group item, appending it to the sortable and using it as inst.currentItem                   // 2119
					//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
					this.instance.currentItem = $(that).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
					this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it           // 2122
					this.instance.options.helper = function() { return ui.helper[0]; };                                               // 2123
                                                                                                                       // 2124
					event.target = this.instance.currentItem[0];                                                                      // 2125
					this.instance._mouseCapture(event, true);                                                                         // 2126
					this.instance._mouseStart(event, true, true);                                                                     // 2127
                                                                                                                       // 2128
					//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
					this.instance.offset.click.top = inst.offset.click.top;                                                           // 2130
					this.instance.offset.click.left = inst.offset.click.left;                                                         // 2131
					this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;                   // 2132
					this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;                      // 2133
                                                                                                                       // 2134
					inst._trigger("toSortable", event);                                                                               // 2135
					inst.dropped = this.instance.element; //draggable revert needs that                                               // 2136
					//hack so receive/update callbacks work (mostly)                                                                  // 2137
					inst.currentItem = inst.element;                                                                                  // 2138
					this.instance.fromOutside = inst;                                                                                 // 2139
                                                                                                                       // 2140
				}                                                                                                                  // 2141
                                                                                                                       // 2142
				//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
				if(this.instance.currentItem) this.instance._mouseDrag(event);                                                     // 2144
                                                                                                                       // 2145
			} else {                                                                                                            // 2146
                                                                                                                       // 2147
				//If it doesn't intersect with the sortable, and it intersected before,                                            // 2148
				//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval   // 2149
				if(this.instance.isOver) {                                                                                         // 2150
                                                                                                                       // 2151
					this.instance.isOver = 0;                                                                                         // 2152
					this.instance.cancelHelperRemoval = true;                                                                         // 2153
                                                                                                                       // 2154
					//Prevent reverting on this forced stop                                                                           // 2155
					this.instance.options.revert = false;                                                                             // 2156
                                                                                                                       // 2157
					// The out event needs to be triggered independently                                                              // 2158
					this.instance._trigger('out', event, this.instance._uiHash(this.instance));                                       // 2159
                                                                                                                       // 2160
					this.instance._mouseStop(event, true);                                                                            // 2161
					this.instance.options.helper = this.instance.options._helper;                                                     // 2162
                                                                                                                       // 2163
					//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
					this.instance.currentItem.remove();                                                                               // 2165
					if(this.instance.placeholder) this.instance.placeholder.remove();                                                 // 2166
                                                                                                                       // 2167
					inst._trigger("fromSortable", event);                                                                             // 2168
					inst.dropped = false; //draggable revert needs that                                                               // 2169
				}                                                                                                                  // 2170
                                                                                                                       // 2171
			};                                                                                                                  // 2172
                                                                                                                       // 2173
		});                                                                                                                  // 2174
                                                                                                                       // 2175
	}                                                                                                                     // 2176
});                                                                                                                    // 2177
                                                                                                                       // 2178
$.ui.plugin.add("draggable", "cursor", {                                                                               // 2179
	start: function(event, ui) {                                                                                          // 2180
		var t = $('body'), o = $(this).data('draggable').options;                                                            // 2181
		if (t.css("cursor")) o._cursor = t.css("cursor");                                                                    // 2182
		t.css("cursor", o.cursor);                                                                                           // 2183
	},                                                                                                                    // 2184
	stop: function(event, ui) {                                                                                           // 2185
		var o = $(this).data('draggable').options;                                                                           // 2186
		if (o._cursor) $('body').css("cursor", o._cursor);                                                                   // 2187
	}                                                                                                                     // 2188
});                                                                                                                    // 2189
                                                                                                                       // 2190
$.ui.plugin.add("draggable", "opacity", {                                                                              // 2191
	start: function(event, ui) {                                                                                          // 2192
		var t = $(ui.helper), o = $(this).data('draggable').options;                                                         // 2193
		if(t.css("opacity")) o._opacity = t.css("opacity");                                                                  // 2194
		t.css('opacity', o.opacity);                                                                                         // 2195
	},                                                                                                                    // 2196
	stop: function(event, ui) {                                                                                           // 2197
		var o = $(this).data('draggable').options;                                                                           // 2198
		if(o._opacity) $(ui.helper).css('opacity', o._opacity);                                                              // 2199
	}                                                                                                                     // 2200
});                                                                                                                    // 2201
                                                                                                                       // 2202
$.ui.plugin.add("draggable", "scroll", {                                                                               // 2203
	start: function(event, ui) {                                                                                          // 2204
		var i = $(this).data("draggable");                                                                                   // 2205
		if(i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') i.overflowOffset = i.scrollParent.offset(); // 2206
	},                                                                                                                    // 2207
	drag: function(event, ui) {                                                                                           // 2208
                                                                                                                       // 2209
		var i = $(this).data("draggable"), o = i.options, scrolled = false;                                                  // 2210
                                                                                                                       // 2211
		if(i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {                                           // 2212
                                                                                                                       // 2213
			if(!o.axis || o.axis != 'x') {                                                                                      // 2214
				if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)                    // 2215
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;                             // 2216
				else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity)                                                  // 2217
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;                             // 2218
			}                                                                                                                   // 2219
                                                                                                                       // 2220
			if(!o.axis || o.axis != 'y') {                                                                                      // 2221
				if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)                    // 2222
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;                           // 2223
				else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity)                                                 // 2224
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;                           // 2225
			}                                                                                                                   // 2226
                                                                                                                       // 2227
		} else {                                                                                                             // 2228
                                                                                                                       // 2229
			if(!o.axis || o.axis != 'x') {                                                                                      // 2230
				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity)                                                    // 2231
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);                                        // 2232
				else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)                        // 2233
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);                                        // 2234
			}                                                                                                                   // 2235
                                                                                                                       // 2236
			if(!o.axis || o.axis != 'y') {                                                                                      // 2237
				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity)                                                   // 2238
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);                                      // 2239
				else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)                        // 2240
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);                                      // 2241
			}                                                                                                                   // 2242
                                                                                                                       // 2243
		}                                                                                                                    // 2244
                                                                                                                       // 2245
		if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)                                                         // 2246
			$.ui.ddmanager.prepareOffsets(i, event);                                                                            // 2247
                                                                                                                       // 2248
	}                                                                                                                     // 2249
});                                                                                                                    // 2250
                                                                                                                       // 2251
$.ui.plugin.add("draggable", "snap", {                                                                                 // 2252
	start: function(event, ui) {                                                                                          // 2253
                                                                                                                       // 2254
		var i = $(this).data("draggable"), o = i.options;                                                                    // 2255
		i.snapElements = [];                                                                                                 // 2256
                                                                                                                       // 2257
		$(o.snap.constructor != String ? ( o.snap.items || ':data(draggable)' ) : o.snap).each(function() {                  // 2258
			var $t = $(this); var $o = $t.offset();                                                                             // 2259
			if(this != i.element[0]) i.snapElements.push({                                                                      // 2260
				item: this,                                                                                                        // 2261
				width: $t.outerWidth(), height: $t.outerHeight(),                                                                  // 2262
				top: $o.top, left: $o.left                                                                                         // 2263
			});                                                                                                                 // 2264
		});                                                                                                                  // 2265
                                                                                                                       // 2266
	},                                                                                                                    // 2267
	drag: function(event, ui) {                                                                                           // 2268
                                                                                                                       // 2269
		var inst = $(this).data("draggable"), o = inst.options;                                                              // 2270
		var d = o.snapTolerance;                                                                                             // 2271
                                                                                                                       // 2272
		var x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,                                                     // 2273
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;                                                        // 2274
                                                                                                                       // 2275
		for (var i = inst.snapElements.length - 1; i >= 0; i--){                                                             // 2276
                                                                                                                       // 2277
			var l = inst.snapElements[i].left, r = l + inst.snapElements[i].width,                                              // 2278
				t = inst.snapElements[i].top, b = t + inst.snapElements[i].height;                                                 // 2279
                                                                                                                       // 2280
			//Yes, I know, this is insane ;)                                                                                    // 2281
			if(!((l-d < x1 && x1 < r+d && t-d < y1 && y1 < b+d) || (l-d < x1 && x1 < r+d && t-d < y2 && y2 < b+d) || (l-d < x2 && x2 < r+d && t-d < y1 && y1 < b+d) || (l-d < x2 && x2 < r+d && t-d < y2 && y2 < b+d))) {
				if(inst.snapElements[i].snapping) (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				inst.snapElements[i].snapping = false;                                                                             // 2284
				continue;                                                                                                          // 2285
			}                                                                                                                   // 2286
                                                                                                                       // 2287
			if(o.snapMode != 'inner') {                                                                                         // 2288
				var ts = Math.abs(t - y2) <= d;                                                                                    // 2289
				var bs = Math.abs(b - y1) <= d;                                                                                    // 2290
				var ls = Math.abs(l - x2) <= d;                                                                                    // 2291
				var rs = Math.abs(r - x1) <= d;                                                                                    // 2292
				if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;          // 2294
				if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
				if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;       // 2296
			}                                                                                                                   // 2297
                                                                                                                       // 2298
			var first = (ts || bs || ls || rs);                                                                                 // 2299
                                                                                                                       // 2300
			if(o.snapMode != 'outer') {                                                                                         // 2301
				var ts = Math.abs(t - y1) <= d;                                                                                    // 2302
				var bs = Math.abs(b - y2) <= d;                                                                                    // 2303
				var ls = Math.abs(l - x1) <= d;                                                                                    // 2304
				var rs = Math.abs(r - x2) <= d;                                                                                    // 2305
				if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;          // 2306
				if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;       // 2308
				if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
			}                                                                                                                   // 2310
                                                                                                                       // 2311
			if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))                                               // 2312
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);                                                    // 2314
                                                                                                                       // 2315
		};                                                                                                                   // 2316
                                                                                                                       // 2317
	}                                                                                                                     // 2318
});                                                                                                                    // 2319
                                                                                                                       // 2320
$.ui.plugin.add("draggable", "stack", {                                                                                // 2321
	start: function(event, ui) {                                                                                          // 2322
                                                                                                                       // 2323
		var o = $(this).data("draggable").options;                                                                           // 2324
                                                                                                                       // 2325
		var group = $.makeArray($(o.stack)).sort(function(a,b) {                                                             // 2326
			return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);                             // 2327
		});                                                                                                                  // 2328
		if (!group.length) { return; }                                                                                       // 2329
                                                                                                                       // 2330
		var min = parseInt(group[0].style.zIndex) || 0;                                                                      // 2331
		$(group).each(function(i) {                                                                                          // 2332
			this.style.zIndex = min + i;                                                                                        // 2333
		});                                                                                                                  // 2334
                                                                                                                       // 2335
		this[0].style.zIndex = min + group.length;                                                                           // 2336
                                                                                                                       // 2337
	}                                                                                                                     // 2338
});                                                                                                                    // 2339
                                                                                                                       // 2340
$.ui.plugin.add("draggable", "zIndex", {                                                                               // 2341
	start: function(event, ui) {                                                                                          // 2342
		var t = $(ui.helper), o = $(this).data("draggable").options;                                                         // 2343
		if(t.css("zIndex")) o._zIndex = t.css("zIndex");                                                                     // 2344
		t.css('zIndex', o.zIndex);                                                                                           // 2345
	},                                                                                                                    // 2346
	stop: function(event, ui) {                                                                                           // 2347
		var o = $(this).data("draggable").options;                                                                           // 2348
		if(o._zIndex) $(ui.helper).css('zIndex', o._zIndex);                                                                 // 2349
	}                                                                                                                     // 2350
});                                                                                                                    // 2351
                                                                                                                       // 2352
})(jQuery);                                                                                                            // 2353
(function( $, undefined ) {                                                                                            // 2354
                                                                                                                       // 2355
$.widget("ui.droppable", {                                                                                             // 2356
	version: "1.9.2",                                                                                                     // 2357
	widgetEventPrefix: "drop",                                                                                            // 2358
	options: {                                                                                                            // 2359
		accept: '*',                                                                                                         // 2360
		activeClass: false,                                                                                                  // 2361
		addClasses: true,                                                                                                    // 2362
		greedy: false,                                                                                                       // 2363
		hoverClass: false,                                                                                                   // 2364
		scope: 'default',                                                                                                    // 2365
		tolerance: 'intersect'                                                                                               // 2366
	},                                                                                                                    // 2367
	_create: function() {                                                                                                 // 2368
                                                                                                                       // 2369
		var o = this.options, accept = o.accept;                                                                             // 2370
		this.isover = 0; this.isout = 1;                                                                                     // 2371
                                                                                                                       // 2372
		this.accept = $.isFunction(accept) ? accept : function(d) {                                                          // 2373
			return d.is(accept);                                                                                                // 2374
		};                                                                                                                   // 2375
                                                                                                                       // 2376
		//Store the droppable's proportions                                                                                  // 2377
		this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };                     // 2378
                                                                                                                       // 2379
		// Add the reference and positions to the manager                                                                    // 2380
		$.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];                                       // 2381
		$.ui.ddmanager.droppables[o.scope].push(this);                                                                       // 2382
                                                                                                                       // 2383
		(o.addClasses && this.element.addClass("ui-droppable"));                                                             // 2384
                                                                                                                       // 2385
	},                                                                                                                    // 2386
                                                                                                                       // 2387
	_destroy: function() {                                                                                                // 2388
		var drop = $.ui.ddmanager.droppables[this.options.scope];                                                            // 2389
		for ( var i = 0; i < drop.length; i++ )                                                                              // 2390
			if ( drop[i] == this )                                                                                              // 2391
				drop.splice(i, 1);                                                                                                 // 2392
                                                                                                                       // 2393
		this.element.removeClass("ui-droppable ui-droppable-disabled");                                                      // 2394
	},                                                                                                                    // 2395
                                                                                                                       // 2396
	_setOption: function(key, value) {                                                                                    // 2397
                                                                                                                       // 2398
		if(key == 'accept') {                                                                                                // 2399
			this.accept = $.isFunction(value) ? value : function(d) {                                                           // 2400
				return d.is(value);                                                                                                // 2401
			};                                                                                                                  // 2402
		}                                                                                                                    // 2403
		$.Widget.prototype._setOption.apply(this, arguments);                                                                // 2404
	},                                                                                                                    // 2405
                                                                                                                       // 2406
	_activate: function(event) {                                                                                          // 2407
		var draggable = $.ui.ddmanager.current;                                                                              // 2408
		if(this.options.activeClass) this.element.addClass(this.options.activeClass);                                        // 2409
		(draggable && this._trigger('activate', event, this.ui(draggable)));                                                 // 2410
	},                                                                                                                    // 2411
                                                                                                                       // 2412
	_deactivate: function(event) {                                                                                        // 2413
		var draggable = $.ui.ddmanager.current;                                                                              // 2414
		if(this.options.activeClass) this.element.removeClass(this.options.activeClass);                                     // 2415
		(draggable && this._trigger('deactivate', event, this.ui(draggable)));                                               // 2416
	},                                                                                                                    // 2417
                                                                                                                       // 2418
	_over: function(event) {                                                                                              // 2419
                                                                                                                       // 2420
		var draggable = $.ui.ddmanager.current;                                                                              // 2421
		if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element
                                                                                                                       // 2423
		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {                                // 2424
			if(this.options.hoverClass) this.element.addClass(this.options.hoverClass);                                         // 2425
			this._trigger('over', event, this.ui(draggable));                                                                   // 2426
		}                                                                                                                    // 2427
                                                                                                                       // 2428
	},                                                                                                                    // 2429
                                                                                                                       // 2430
	_out: function(event) {                                                                                               // 2431
                                                                                                                       // 2432
		var draggable = $.ui.ddmanager.current;                                                                              // 2433
		if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element
                                                                                                                       // 2435
		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {                                // 2436
			if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);                                      // 2437
			this._trigger('out', event, this.ui(draggable));                                                                    // 2438
		}                                                                                                                    // 2439
                                                                                                                       // 2440
	},                                                                                                                    // 2441
                                                                                                                       // 2442
	_drop: function(event,custom) {                                                                                       // 2443
                                                                                                                       // 2444
		var draggable = custom || $.ui.ddmanager.current;                                                                    // 2445
		if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return false; // Bail if draggable and droppable are same element
                                                                                                                       // 2447
		var childrenIntersection = false;                                                                                    // 2448
		this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {                                // 2449
			var inst = $.data(this, 'droppable');                                                                               // 2450
			if(                                                                                                                 // 2451
				inst.options.greedy                                                                                                // 2452
				&& !inst.options.disabled                                                                                          // 2453
				&& inst.options.scope == draggable.options.scope                                                                   // 2454
				&& inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element))                                 // 2455
				&& $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)            // 2456
			) { childrenIntersection = true; return false; }                                                                    // 2457
		});                                                                                                                  // 2458
		if(childrenIntersection) return false;                                                                               // 2459
                                                                                                                       // 2460
		if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {                                 // 2461
			if(this.options.activeClass) this.element.removeClass(this.options.activeClass);                                    // 2462
			if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);                                      // 2463
			this._trigger('drop', event, this.ui(draggable));                                                                   // 2464
			return this.element;                                                                                                // 2465
		}                                                                                                                    // 2466
                                                                                                                       // 2467
		return false;                                                                                                        // 2468
                                                                                                                       // 2469
	},                                                                                                                    // 2470
                                                                                                                       // 2471
	ui: function(c) {                                                                                                     // 2472
		return {                                                                                                             // 2473
			draggable: (c.currentItem || c.element),                                                                            // 2474
			helper: c.helper,                                                                                                   // 2475
			position: c.position,                                                                                               // 2476
			offset: c.positionAbs                                                                                               // 2477
		};                                                                                                                   // 2478
	}                                                                                                                     // 2479
                                                                                                                       // 2480
});                                                                                                                    // 2481
                                                                                                                       // 2482
$.ui.intersect = function(draggable, droppable, toleranceMode) {                                                       // 2483
                                                                                                                       // 2484
	if (!droppable.offset) return false;                                                                                  // 2485
                                                                                                                       // 2486
	var x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,    // 2487
		y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height;       // 2488
	var l = droppable.offset.left, r = l + droppable.proportions.width,                                                   // 2489
		t = droppable.offset.top, b = t + droppable.proportions.height;                                                      // 2490
                                                                                                                       // 2491
	switch (toleranceMode) {                                                                                              // 2492
		case 'fit':                                                                                                          // 2493
			return (l <= x1 && x2 <= r                                                                                          // 2494
				&& t <= y1 && y2 <= b);                                                                                            // 2495
			break;                                                                                                              // 2496
		case 'intersect':                                                                                                    // 2497
			return (l < x1 + (draggable.helperProportions.width / 2) // Right Half                                              // 2498
				&& x2 - (draggable.helperProportions.width / 2) < r // Left Half                                                   // 2499
				&& t < y1 + (draggable.helperProportions.height / 2) // Bottom Half                                                // 2500
				&& y2 - (draggable.helperProportions.height / 2) < b ); // Top Half                                                // 2501
			break;                                                                                                              // 2502
		case 'pointer':                                                                                                      // 2503
			var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left),
				draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top),
				isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
			return isOver;                                                                                                      // 2507
			break;                                                                                                              // 2508
		case 'touch':                                                                                                        // 2509
			return (                                                                                                            // 2510
					(y1 >= t && y1 <= b) ||	// Top edge touching                                                                      // 2511
					(y2 >= t && y2 <= b) ||	// Bottom edge touching                                                                   // 2512
					(y1 < t && y2 > b)		// Surrounded vertically                                                                      // 2513
				) && (                                                                                                             // 2514
					(x1 >= l && x1 <= r) ||	// Left edge touching                                                                     // 2515
					(x2 >= l && x2 <= r) ||	// Right edge touching                                                                    // 2516
					(x1 < l && x2 > r)		// Surrounded horizontally                                                                    // 2517
				);                                                                                                                 // 2518
			break;                                                                                                              // 2519
		default:                                                                                                             // 2520
			return false;                                                                                                       // 2521
			break;                                                                                                              // 2522
		}                                                                                                                    // 2523
                                                                                                                       // 2524
};                                                                                                                     // 2525
                                                                                                                       // 2526
/*                                                                                                                     // 2527
	This manager tracks offsets of draggables and droppables                                                              // 2528
*/                                                                                                                     // 2529
$.ui.ddmanager = {                                                                                                     // 2530
	current: null,                                                                                                        // 2531
	droppables: { 'default': [] },                                                                                        // 2532
	prepareOffsets: function(t, event) {                                                                                  // 2533
                                                                                                                       // 2534
		var m = $.ui.ddmanager.droppables[t.options.scope] || [];                                                            // 2535
		var type = event ? event.type : null; // workaround for #2317                                                        // 2536
		var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();                                          // 2537
                                                                                                                       // 2538
		droppablesLoop: for (var i = 0; i < m.length; i++) {                                                                 // 2539
                                                                                                                       // 2540
			if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) continue;	//No disabled and non-accepted
			for (var j=0; j < list.length; j++) { if(list[j] == m[i].element[0]) { m[i].proportions.height = 0; continue droppablesLoop; } }; //Filter out elements in the current dragged item
			m[i].visible = m[i].element.css("display") != "none"; if(!m[i].visible) continue; 									//If the element is not visible, continue
                                                                                                                       // 2544
			if(type == "mousedown") m[i]._activate.call(m[i], event); //Activate the droppable if used directly from draggables // 2545
                                                                                                                       // 2546
			m[i].offset = m[i].element.offset();                                                                                // 2547
			m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };                    // 2548
                                                                                                                       // 2549
		}                                                                                                                    // 2550
                                                                                                                       // 2551
	},                                                                                                                    // 2552
	drop: function(draggable, event) {                                                                                    // 2553
                                                                                                                       // 2554
		var dropped = false;                                                                                                 // 2555
		$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {                                        // 2556
                                                                                                                       // 2557
			if(!this.options) return;                                                                                           // 2558
			if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))              // 2559
				dropped = this._drop.call(this, event) || dropped;                                                                 // 2560
                                                                                                                       // 2561
			if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				this.isout = 1; this.isover = 0;                                                                                   // 2563
				this._deactivate.call(this, event);                                                                                // 2564
			}                                                                                                                   // 2565
                                                                                                                       // 2566
		});                                                                                                                  // 2567
		return dropped;                                                                                                      // 2568
                                                                                                                       // 2569
	},                                                                                                                    // 2570
	dragStart: function( draggable, event ) {                                                                             // 2571
		//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {                                      // 2573
			if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );                        // 2574
		});                                                                                                                  // 2575
	},                                                                                                                    // 2576
	drag: function(draggable, event) {                                                                                    // 2577
                                                                                                                       // 2578
		//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.  // 2579
		if(draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);                              // 2580
                                                                                                                       // 2581
		//Run through all droppables and check their positions based on specific tolerance options                           // 2582
		$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {                                        // 2583
                                                                                                                       // 2584
			if(this.options.disabled || this.greedyChild || !this.visible) return;                                              // 2585
			var intersects = $.ui.intersect(draggable, this, this.options.tolerance);                                           // 2586
                                                                                                                       // 2587
			var c = !intersects && this.isover == 1 ? 'isout' : (intersects && this.isover == 0 ? 'isover' : null);             // 2588
			if(!c) return;                                                                                                      // 2589
                                                                                                                       // 2590
			var parentInstance;                                                                                                 // 2591
			if (this.options.greedy) {                                                                                          // 2592
				// find droppable parents with same scope                                                                          // 2593
				var scope = this.options.scope;                                                                                    // 2594
				var parent = this.element.parents(':data(droppable)').filter(function () {                                         // 2595
					return $.data(this, 'droppable').options.scope === scope;                                                         // 2596
				});                                                                                                                // 2597
                                                                                                                       // 2598
				if (parent.length) {                                                                                               // 2599
					parentInstance = $.data(parent[0], 'droppable');                                                                  // 2600
					parentInstance.greedyChild = (c == 'isover' ? 1 : 0);                                                             // 2601
				}                                                                                                                  // 2602
			}                                                                                                                   // 2603
                                                                                                                       // 2604
			// we just moved into a greedy child                                                                                // 2605
			if (parentInstance && c == 'isover') {                                                                              // 2606
				parentInstance['isover'] = 0;                                                                                      // 2607
				parentInstance['isout'] = 1;                                                                                       // 2608
				parentInstance._out.call(parentInstance, event);                                                                   // 2609
			}                                                                                                                   // 2610
                                                                                                                       // 2611
			this[c] = 1; this[c == 'isout' ? 'isover' : 'isout'] = 0;                                                           // 2612
			this[c == "isover" ? "_over" : "_out"].call(this, event);                                                           // 2613
                                                                                                                       // 2614
			// we just moved out of a greedy child                                                                              // 2615
			if (parentInstance && c == 'isout') {                                                                               // 2616
				parentInstance['isout'] = 0;                                                                                       // 2617
				parentInstance['isover'] = 1;                                                                                      // 2618
				parentInstance._over.call(parentInstance, event);                                                                  // 2619
			}                                                                                                                   // 2620
		});                                                                                                                  // 2621
                                                                                                                       // 2622
	},                                                                                                                    // 2623
	dragStop: function( draggable, event ) {                                                                              // 2624
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );                                               // 2625
		//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );                         // 2627
	}                                                                                                                     // 2628
};                                                                                                                     // 2629
                                                                                                                       // 2630
})(jQuery);                                                                                                            // 2631
(function( $, undefined ) {                                                                                            // 2632
                                                                                                                       // 2633
$.widget("ui.resizable", $.ui.mouse, {                                                                                 // 2634
	version: "1.9.2",                                                                                                     // 2635
	widgetEventPrefix: "resize",                                                                                          // 2636
	options: {                                                                                                            // 2637
		alsoResize: false,                                                                                                   // 2638
		animate: false,                                                                                                      // 2639
		animateDuration: "slow",                                                                                             // 2640
		animateEasing: "swing",                                                                                              // 2641
		aspectRatio: false,                                                                                                  // 2642
		autoHide: false,                                                                                                     // 2643
		containment: false,                                                                                                  // 2644
		ghost: false,                                                                                                        // 2645
		grid: false,                                                                                                         // 2646
		handles: "e,s,se",                                                                                                   // 2647
		helper: false,                                                                                                       // 2648
		maxHeight: null,                                                                                                     // 2649
		maxWidth: null,                                                                                                      // 2650
		minHeight: 10,                                                                                                       // 2651
		minWidth: 10,                                                                                                        // 2652
		zIndex: 1000                                                                                                         // 2653
	},                                                                                                                    // 2654
	_create: function() {                                                                                                 // 2655
                                                                                                                       // 2656
		var that = this, o = this.options;                                                                                   // 2657
		this.element.addClass("ui-resizable");                                                                               // 2658
                                                                                                                       // 2659
		$.extend(this, {                                                                                                     // 2660
			_aspectRatio: !!(o.aspectRatio),                                                                                    // 2661
			aspectRatio: o.aspectRatio,                                                                                         // 2662
			originalElement: this.element,                                                                                      // 2663
			_proportionallyResizeElements: [],                                                                                  // 2664
			_helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null                                // 2665
		});                                                                                                                  // 2666
                                                                                                                       // 2667
		//Wrap the element if it cannot hold child nodes                                                                     // 2668
		if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {                                     // 2669
                                                                                                                       // 2670
			//Create a wrapper element and set the wrapper to the new current internal element                                  // 2671
			this.element.wrap(                                                                                                  // 2672
				$('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({                                                // 2673
					position: this.element.css('position'),                                                                           // 2674
					width: this.element.outerWidth(),                                                                                 // 2675
					height: this.element.outerHeight(),                                                                               // 2676
					top: this.element.css('top'),                                                                                     // 2677
					left: this.element.css('left')                                                                                    // 2678
				})                                                                                                                 // 2679
			);                                                                                                                  // 2680
                                                                                                                       // 2681
			//Overwrite the original this.element                                                                               // 2682
			this.element = this.element.parent().data(                                                                          // 2683
				"resizable", this.element.data('resizable')                                                                        // 2684
			);                                                                                                                  // 2685
                                                                                                                       // 2686
			this.elementIsWrapper = true;                                                                                       // 2687
                                                                                                                       // 2688
			//Move margins to the wrapper                                                                                       // 2689
			this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
			this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});                          // 2691
                                                                                                                       // 2692
			//Prevent Safari textarea resize                                                                                    // 2693
			this.originalResizeStyle = this.originalElement.css('resize');                                                      // 2694
			this.originalElement.css('resize', 'none');                                                                         // 2695
                                                                                                                       // 2696
			//Push the actual element to our proportionallyResize internal array                                                // 2697
			this._proportionallyResizeElements.push(this.originalElement.css({ position: 'static', zoom: 1, display: 'block' }));
                                                                                                                       // 2699
			// avoid IE jump (hard set the margin)                                                                              // 2700
			this.originalElement.css({ margin: this.originalElement.css('margin') });                                           // 2701
                                                                                                                       // 2702
			// fix handlers offset                                                                                              // 2703
			this._proportionallyResize();                                                                                       // 2704
                                                                                                                       // 2705
		}                                                                                                                    // 2706
                                                                                                                       // 2707
		this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : { n: '.ui-resizable-n', e: '.ui-resizable-e', s: '.ui-resizable-s', w: '.ui-resizable-w', se: '.ui-resizable-se', sw: '.ui-resizable-sw', ne: '.ui-resizable-ne', nw: '.ui-resizable-nw' });
		if(this.handles.constructor == String) {                                                                             // 2709
                                                                                                                       // 2710
			if(this.handles == 'all') this.handles = 'n,e,s,w,se,sw,ne,nw';                                                     // 2711
			var n = this.handles.split(","); this.handles = {};                                                                 // 2712
                                                                                                                       // 2713
			for(var i = 0; i < n.length; i++) {                                                                                 // 2714
                                                                                                                       // 2715
				var handle = $.trim(n[i]), hname = 'ui-resizable-'+handle;                                                         // 2716
				var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');                                             // 2717
                                                                                                                       // 2718
				// Apply zIndex to all handles - see #7960                                                                         // 2719
				axis.css({ zIndex: o.zIndex });                                                                                    // 2720
                                                                                                                       // 2721
				//TODO : What's going on here?                                                                                     // 2722
				if ('se' == handle) {                                                                                              // 2723
					axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');                                                           // 2724
				};                                                                                                                 // 2725
                                                                                                                       // 2726
				//Insert into internal handles object and append to element                                                        // 2727
				this.handles[handle] = '.ui-resizable-'+handle;                                                                    // 2728
				this.element.append(axis);                                                                                         // 2729
			}                                                                                                                   // 2730
                                                                                                                       // 2731
		}                                                                                                                    // 2732
                                                                                                                       // 2733
		this._renderAxis = function(target) {                                                                                // 2734
                                                                                                                       // 2735
			target = target || this.element;                                                                                    // 2736
                                                                                                                       // 2737
			for(var i in this.handles) {                                                                                        // 2738
                                                                                                                       // 2739
				if(this.handles[i].constructor == String)                                                                          // 2740
					this.handles[i] = $(this.handles[i], this.element).show();                                                        // 2741
                                                                                                                       // 2742
				//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)                            // 2743
				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {            // 2744
                                                                                                                       // 2745
					var axis = $(this.handles[i], this.element), padWrapper = 0;                                                      // 2746
                                                                                                                       // 2747
					//Checking the correct pad and border                                                                             // 2748
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();                                  // 2749
                                                                                                                       // 2750
					//The padding type i have to apply...                                                                             // 2751
					var padPos = [ 'padding',                                                                                         // 2752
						/ne|nw|n/.test(i) ? 'Top' :                                                                                      // 2753
						/se|sw|s/.test(i) ? 'Bottom' :                                                                                   // 2754
						/^e$/.test(i) ? 'Right' : 'Left' ].join("");                                                                     // 2755
                                                                                                                       // 2756
					target.css(padPos, padWrapper);                                                                                   // 2757
                                                                                                                       // 2758
					this._proportionallyResize();                                                                                     // 2759
                                                                                                                       // 2760
				}                                                                                                                  // 2761
                                                                                                                       // 2762
				//TODO: What's that good for? There's not anything to be executed left                                             // 2763
				if(!$(this.handles[i]).length)                                                                                     // 2764
					continue;                                                                                                         // 2765
                                                                                                                       // 2766
			}                                                                                                                   // 2767
		};                                                                                                                   // 2768
                                                                                                                       // 2769
		//TODO: make renderAxis a prototype function                                                                         // 2770
		this._renderAxis(this.element);                                                                                      // 2771
                                                                                                                       // 2772
		this._handles = $('.ui-resizable-handle', this.element)                                                              // 2773
			.disableSelection();                                                                                                // 2774
                                                                                                                       // 2775
		//Matching axis name                                                                                                 // 2776
		this._handles.mouseover(function() {                                                                                 // 2777
			if (!that.resizing) {                                                                                               // 2778
				if (this.className)                                                                                                // 2779
					var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);                                           // 2780
				//Axis, default = se                                                                                               // 2781
				that.axis = axis && axis[1] ? axis[1] : 'se';                                                                      // 2782
			}                                                                                                                   // 2783
		});                                                                                                                  // 2784
                                                                                                                       // 2785
		//If we want to auto hide the elements                                                                               // 2786
		if (o.autoHide) {                                                                                                    // 2787
			this._handles.hide();                                                                                               // 2788
			$(this.element)                                                                                                     // 2789
				.addClass("ui-resizable-autohide")                                                                                 // 2790
				.mouseenter(function() {                                                                                           // 2791
					if (o.disabled) return;                                                                                           // 2792
					$(this).removeClass("ui-resizable-autohide");                                                                     // 2793
					that._handles.show();                                                                                             // 2794
				})                                                                                                                 // 2795
				.mouseleave(function(){                                                                                            // 2796
					if (o.disabled) return;                                                                                           // 2797
					if (!that.resizing) {                                                                                             // 2798
						$(this).addClass("ui-resizable-autohide");                                                                       // 2799
						that._handles.hide();                                                                                            // 2800
					}                                                                                                                 // 2801
				});                                                                                                                // 2802
		}                                                                                                                    // 2803
                                                                                                                       // 2804
		//Initialize the mouse interaction                                                                                   // 2805
		this._mouseInit();                                                                                                   // 2806
                                                                                                                       // 2807
	},                                                                                                                    // 2808
                                                                                                                       // 2809
	_destroy: function() {                                                                                                // 2810
                                                                                                                       // 2811
		this._mouseDestroy();                                                                                                // 2812
                                                                                                                       // 2813
		var _destroy = function(exp) {                                                                                       // 2814
			$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")                                      // 2815
				.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find('.ui-resizable-handle').remove();    // 2816
		};                                                                                                                   // 2817
                                                                                                                       // 2818
		//TODO: Unwrap at same DOM position                                                                                  // 2819
		if (this.elementIsWrapper) {                                                                                         // 2820
			_destroy(this.element);                                                                                             // 2821
			var wrapper = this.element;                                                                                         // 2822
			this.originalElement.css({                                                                                          // 2823
				position: wrapper.css('position'),                                                                                 // 2824
				width: wrapper.outerWidth(),                                                                                       // 2825
				height: wrapper.outerHeight(),                                                                                     // 2826
				top: wrapper.css('top'),                                                                                           // 2827
				left: wrapper.css('left')                                                                                          // 2828
			}).insertAfter( wrapper );                                                                                          // 2829
			wrapper.remove();                                                                                                   // 2830
		}                                                                                                                    // 2831
                                                                                                                       // 2832
		this.originalElement.css('resize', this.originalResizeStyle);                                                        // 2833
		_destroy(this.originalElement);                                                                                      // 2834
                                                                                                                       // 2835
		return this;                                                                                                         // 2836
	},                                                                                                                    // 2837
                                                                                                                       // 2838
	_mouseCapture: function(event) {                                                                                      // 2839
		var handle = false;                                                                                                  // 2840
		for (var i in this.handles) {                                                                                        // 2841
			if ($(this.handles[i])[0] == event.target) {                                                                        // 2842
				handle = true;                                                                                                     // 2843
			}                                                                                                                   // 2844
		}                                                                                                                    // 2845
                                                                                                                       // 2846
		return !this.options.disabled && handle;                                                                             // 2847
	},                                                                                                                    // 2848
                                                                                                                       // 2849
	_mouseStart: function(event) {                                                                                        // 2850
                                                                                                                       // 2851
		var o = this.options, iniPos = this.element.position(), el = this.element;                                           // 2852
                                                                                                                       // 2853
		this.resizing = true;                                                                                                // 2854
		this.documentScroll = { top: $(document).scrollTop(), left: $(document).scrollLeft() };                              // 2855
                                                                                                                       // 2856
		// bugfix for http://dev.jquery.com/ticket/1749                                                                      // 2857
		if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {                                               // 2858
			el.css({ position: 'absolute', top: iniPos.top, left: iniPos.left });                                               // 2859
		}                                                                                                                    // 2860
                                                                                                                       // 2861
		this._renderProxy();                                                                                                 // 2862
                                                                                                                       // 2863
		var curleft = num(this.helper.css('left')), curtop = num(this.helper.css('top'));                                    // 2864
                                                                                                                       // 2865
		if (o.containment) {                                                                                                 // 2866
			curleft += $(o.containment).scrollLeft() || 0;                                                                      // 2867
			curtop += $(o.containment).scrollTop() || 0;                                                                        // 2868
		}                                                                                                                    // 2869
                                                                                                                       // 2870
		//Store needed variables                                                                                             // 2871
		this.offset = this.helper.offset();                                                                                  // 2872
		this.position = { left: curleft, top: curtop };                                                                      // 2873
		this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalPosition = { left: curleft, top: curtop };                                                              // 2876
		this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };                     // 2877
		this.originalMousePosition = { left: event.pageX, top: event.pageY };                                                // 2878
                                                                                                                       // 2879
		//Aspect Ratio                                                                                                       // 2880
		this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
                                                                                                                       // 2882
		var cursor = $('.ui-resizable-' + this.axis).css('cursor');                                                          // 2883
		$('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);                                          // 2884
                                                                                                                       // 2885
		el.addClass("ui-resizable-resizing");                                                                                // 2886
		this._propagate("start", event);                                                                                     // 2887
		return true;                                                                                                         // 2888
	},                                                                                                                    // 2889
                                                                                                                       // 2890
	_mouseDrag: function(event) {                                                                                         // 2891
                                                                                                                       // 2892
		//Increase performance, avoid regex                                                                                  // 2893
		var el = this.helper, o = this.options, props = {},                                                                  // 2894
			that = this, smp = this.originalMousePosition, a = this.axis;                                                       // 2895
                                                                                                                       // 2896
		var dx = (event.pageX-smp.left)||0, dy = (event.pageY-smp.top)||0;                                                   // 2897
		var trigger = this._change[a];                                                                                       // 2898
		if (!trigger) return false;                                                                                          // 2899
                                                                                                                       // 2900
		// Calculate the attrs that will be change                                                                           // 2901
		var data = trigger.apply(this, [event, dx, dy]);                                                                     // 2902
                                                                                                                       // 2903
		// Put this in the mouseDrag handler since the user can start pressing shift while resizing                          // 2904
		this._updateVirtualBoundaries(event.shiftKey);                                                                       // 2905
		if (this._aspectRatio || event.shiftKey)                                                                             // 2906
			data = this._updateRatio(data, event);                                                                              // 2907
                                                                                                                       // 2908
		data = this._respectSize(data, event);                                                                               // 2909
                                                                                                                       // 2910
		// plugins callbacks need to be called first                                                                         // 2911
		this._propagate("resize", event);                                                                                    // 2912
                                                                                                                       // 2913
		el.css({                                                                                                             // 2914
			top: this.position.top + "px", left: this.position.left + "px",                                                     // 2915
			width: this.size.width + "px", height: this.size.height + "px"                                                      // 2916
		});                                                                                                                  // 2917
                                                                                                                       // 2918
		if (!this._helper && this._proportionallyResizeElements.length)                                                      // 2919
			this._proportionallyResize();                                                                                       // 2920
                                                                                                                       // 2921
		this._updateCache(data);                                                                                             // 2922
                                                                                                                       // 2923
		// calling the user callback at the end                                                                              // 2924
		this._trigger('resize', event, this.ui());                                                                           // 2925
                                                                                                                       // 2926
		return false;                                                                                                        // 2927
	},                                                                                                                    // 2928
                                                                                                                       // 2929
	_mouseStop: function(event) {                                                                                         // 2930
                                                                                                                       // 2931
		this.resizing = false;                                                                                               // 2932
		var o = this.options, that = this;                                                                                   // 2933
                                                                                                                       // 2934
		if(this._helper) {                                                                                                   // 2935
			var pr = this._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),                // 2936
				soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : that.sizeDiff.height,              // 2937
				soffsetw = ista ? 0 : that.sizeDiff.width;                                                                         // 2938
                                                                                                                       // 2939
			var s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) },                    // 2940
				left = (parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left)) || null,       // 2941
				top = (parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top)) || null;           // 2942
                                                                                                                       // 2943
			if (!o.animate)                                                                                                     // 2944
				this.element.css($.extend(s, { top: top, left: left }));                                                           // 2945
                                                                                                                       // 2946
			that.helper.height(that.size.height);                                                                               // 2947
			that.helper.width(that.size.width);                                                                                 // 2948
                                                                                                                       // 2949
			if (this._helper && !o.animate) this._proportionallyResize();                                                       // 2950
		}                                                                                                                    // 2951
                                                                                                                       // 2952
		$('body').css('cursor', 'auto');                                                                                     // 2953
                                                                                                                       // 2954
		this.element.removeClass("ui-resizable-resizing");                                                                   // 2955
                                                                                                                       // 2956
		this._propagate("stop", event);                                                                                      // 2957
                                                                                                                       // 2958
		if (this._helper) this.helper.remove();                                                                              // 2959
		return false;                                                                                                        // 2960
                                                                                                                       // 2961
	},                                                                                                                    // 2962
                                                                                                                       // 2963
	_updateVirtualBoundaries: function(forceAspectRatio) {                                                                // 2964
		var o = this.options, pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b;                                               // 2965
                                                                                                                       // 2966
		b = {                                                                                                                // 2967
			minWidth: isNumber(o.minWidth) ? o.minWidth : 0,                                                                    // 2968
			maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,                                                             // 2969
			minHeight: isNumber(o.minHeight) ? o.minHeight : 0,                                                                 // 2970
			maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity                                                           // 2971
		};                                                                                                                   // 2972
                                                                                                                       // 2973
		if(this._aspectRatio || forceAspectRatio) {                                                                          // 2974
			// We want to create an enclosing box whose aspect ration is the requested one                                      // 2975
			// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension             // 2976
			pMinWidth = b.minHeight * this.aspectRatio;                                                                         // 2977
			pMinHeight = b.minWidth / this.aspectRatio;                                                                         // 2978
			pMaxWidth = b.maxHeight * this.aspectRatio;                                                                         // 2979
			pMaxHeight = b.maxWidth / this.aspectRatio;                                                                         // 2980
                                                                                                                       // 2981
			if(pMinWidth > b.minWidth) b.minWidth = pMinWidth;                                                                  // 2982
			if(pMinHeight > b.minHeight) b.minHeight = pMinHeight;                                                              // 2983
			if(pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;                                                                  // 2984
			if(pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;                                                              // 2985
		}                                                                                                                    // 2986
		this._vBoundaries = b;                                                                                               // 2987
	},                                                                                                                    // 2988
                                                                                                                       // 2989
	_updateCache: function(data) {                                                                                        // 2990
		var o = this.options;                                                                                                // 2991
		this.offset = this.helper.offset();                                                                                  // 2992
		if (isNumber(data.left)) this.position.left = data.left;                                                             // 2993
		if (isNumber(data.top)) this.position.top = data.top;                                                                // 2994
		if (isNumber(data.height)) this.size.height = data.height;                                                           // 2995
		if (isNumber(data.width)) this.size.width = data.width;                                                              // 2996
	},                                                                                                                    // 2997
                                                                                                                       // 2998
	_updateRatio: function(data, event) {                                                                                 // 2999
                                                                                                                       // 3000
		var o = this.options, cpos = this.position, csize = this.size, a = this.axis;                                        // 3001
                                                                                                                       // 3002
		if (isNumber(data.height)) data.width = (data.height * this.aspectRatio);                                            // 3003
		else if (isNumber(data.width)) data.height = (data.width / this.aspectRatio);                                        // 3004
                                                                                                                       // 3005
		if (a == 'sw') {                                                                                                     // 3006
			data.left = cpos.left + (csize.width - data.width);                                                                 // 3007
			data.top = null;                                                                                                    // 3008
		}                                                                                                                    // 3009
		if (a == 'nw') {                                                                                                     // 3010
			data.top = cpos.top + (csize.height - data.height);                                                                 // 3011
			data.left = cpos.left + (csize.width - data.width);                                                                 // 3012
		}                                                                                                                    // 3013
                                                                                                                       // 3014
		return data;                                                                                                         // 3015
	},                                                                                                                    // 3016
                                                                                                                       // 3017
	_respectSize: function(data, event) {                                                                                 // 3018
                                                                                                                       // 3019
		var el = this.helper, o = this._vBoundaries, pRatio = this._aspectRatio || event.shiftKey, a = this.axis,            // 3020
				ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
					isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height);
                                                                                                                       // 3023
		if (isminw) data.width = o.minWidth;                                                                                 // 3024
		if (isminh) data.height = o.minHeight;                                                                               // 3025
		if (ismaxw) data.width = o.maxWidth;                                                                                 // 3026
		if (ismaxh) data.height = o.maxHeight;                                                                               // 3027
                                                                                                                       // 3028
		var dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height;            // 3029
		var cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);                                                                  // 3030
                                                                                                                       // 3031
		if (isminw && cw) data.left = dw - o.minWidth;                                                                       // 3032
		if (ismaxw && cw) data.left = dw - o.maxWidth;                                                                       // 3033
		if (isminh && ch)	data.top = dh - o.minHeight;                                                                       // 3034
		if (ismaxh && ch)	data.top = dh - o.maxHeight;                                                                       // 3035
                                                                                                                       // 3036
		// fixing jump error on top/left - bug #2330                                                                         // 3037
		var isNotwh = !data.width && !data.height;                                                                           // 3038
		if (isNotwh && !data.left && data.top) data.top = null;                                                              // 3039
		else if (isNotwh && !data.top && data.left) data.left = null;                                                        // 3040
                                                                                                                       // 3041
		return data;                                                                                                         // 3042
	},                                                                                                                    // 3043
                                                                                                                       // 3044
	_proportionallyResize: function() {                                                                                   // 3045
                                                                                                                       // 3046
		var o = this.options;                                                                                                // 3047
		if (!this._proportionallyResizeElements.length) return;                                                              // 3048
		var element = this.helper || this.element;                                                                           // 3049
                                                                                                                       // 3050
		for (var i=0; i < this._proportionallyResizeElements.length; i++) {                                                  // 3051
                                                                                                                       // 3052
			var prel = this._proportionallyResizeElements[i];                                                                   // 3053
                                                                                                                       // 3054
			if (!this.borderDif) {                                                                                              // 3055
				var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
					p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];       // 3057
                                                                                                                       // 3058
				this.borderDif = $.map(b, function(v, i) {                                                                         // 3059
					var border = parseInt(v,10)||0, padding = parseInt(p[i],10)||0;                                                   // 3060
					return border + padding;                                                                                          // 3061
				});                                                                                                                // 3062
			}                                                                                                                   // 3063
                                                                                                                       // 3064
			prel.css({                                                                                                          // 3065
				height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,                                           // 3066
				width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0                                              // 3067
			});                                                                                                                 // 3068
                                                                                                                       // 3069
		};                                                                                                                   // 3070
                                                                                                                       // 3071
	},                                                                                                                    // 3072
                                                                                                                       // 3073
	_renderProxy: function() {                                                                                            // 3074
                                                                                                                       // 3075
		var el = this.element, o = this.options;                                                                             // 3076
		this.elementOffset = el.offset();                                                                                    // 3077
                                                                                                                       // 3078
		if(this._helper) {                                                                                                   // 3079
                                                                                                                       // 3080
			this.helper = this.helper || $('<div style="overflow:hidden;"></div>');                                             // 3081
                                                                                                                       // 3082
			// fix ie6 offset TODO: This seems broken                                                                           // 3083
			var ie6offset = ($.ui.ie6 ? 1 : 0),                                                                                 // 3084
			pxyoffset = ( $.ui.ie6 ? 2 : -1 );                                                                                  // 3085
                                                                                                                       // 3086
			this.helper.addClass(this._helper).css({                                                                            // 3087
				width: this.element.outerWidth() + pxyoffset,                                                                      // 3088
				height: this.element.outerHeight() + pxyoffset,                                                                    // 3089
				position: 'absolute',                                                                                              // 3090
				left: this.elementOffset.left - ie6offset +'px',                                                                   // 3091
				top: this.elementOffset.top - ie6offset +'px',                                                                     // 3092
				zIndex: ++o.zIndex //TODO: Don't modify option                                                                     // 3093
			});                                                                                                                 // 3094
                                                                                                                       // 3095
			this.helper                                                                                                         // 3096
				.appendTo("body")                                                                                                  // 3097
				.disableSelection();                                                                                               // 3098
                                                                                                                       // 3099
		} else {                                                                                                             // 3100
			this.helper = this.element;                                                                                         // 3101
		}                                                                                                                    // 3102
                                                                                                                       // 3103
	},                                                                                                                    // 3104
                                                                                                                       // 3105
	_change: {                                                                                                            // 3106
		e: function(event, dx, dy) {                                                                                         // 3107
			return { width: this.originalSize.width + dx };                                                                     // 3108
		},                                                                                                                   // 3109
		w: function(event, dx, dy) {                                                                                         // 3110
			var o = this.options, cs = this.originalSize, sp = this.originalPosition;                                           // 3111
			return { left: sp.left + dx, width: cs.width - dx };                                                                // 3112
		},                                                                                                                   // 3113
		n: function(event, dx, dy) {                                                                                         // 3114
			var o = this.options, cs = this.originalSize, sp = this.originalPosition;                                           // 3115
			return { top: sp.top + dy, height: cs.height - dy };                                                                // 3116
		},                                                                                                                   // 3117
		s: function(event, dx, dy) {                                                                                         // 3118
			return { height: this.originalSize.height + dy };                                                                   // 3119
		},                                                                                                                   // 3120
		se: function(event, dx, dy) {                                                                                        // 3121
			return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));                // 3122
		},                                                                                                                   // 3123
		sw: function(event, dx, dy) {                                                                                        // 3124
			return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));                // 3125
		},                                                                                                                   // 3126
		ne: function(event, dx, dy) {                                                                                        // 3127
			return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));                // 3128
		},                                                                                                                   // 3129
		nw: function(event, dx, dy) {                                                                                        // 3130
			return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));                // 3131
		}                                                                                                                    // 3132
	},                                                                                                                    // 3133
                                                                                                                       // 3134
	_propagate: function(n, event) {                                                                                      // 3135
		$.ui.plugin.call(this, n, [event, this.ui()]);                                                                       // 3136
		(n != "resize" && this._trigger(n, event, this.ui()));                                                               // 3137
	},                                                                                                                    // 3138
                                                                                                                       // 3139
	plugins: {},                                                                                                          // 3140
                                                                                                                       // 3141
	ui: function() {                                                                                                      // 3142
		return {                                                                                                             // 3143
			originalElement: this.originalElement,                                                                              // 3144
			element: this.element,                                                                                              // 3145
			helper: this.helper,                                                                                                // 3146
			position: this.position,                                                                                            // 3147
			size: this.size,                                                                                                    // 3148
			originalSize: this.originalSize,                                                                                    // 3149
			originalPosition: this.originalPosition                                                                             // 3150
		};                                                                                                                   // 3151
	}                                                                                                                     // 3152
                                                                                                                       // 3153
});                                                                                                                    // 3154
                                                                                                                       // 3155
/*                                                                                                                     // 3156
 * Resizable Extensions                                                                                                // 3157
 */                                                                                                                    // 3158
                                                                                                                       // 3159
$.ui.plugin.add("resizable", "alsoResize", {                                                                           // 3160
                                                                                                                       // 3161
	start: function (event, ui) {                                                                                         // 3162
		var that = $(this).data("resizable"), o = that.options;                                                              // 3163
                                                                                                                       // 3164
		var _store = function (exp) {                                                                                        // 3165
			$(exp).each(function() {                                                                                            // 3166
				var el = $(this);                                                                                                  // 3167
				el.data("resizable-alsoresize", {                                                                                  // 3168
					width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),                                               // 3169
					left: parseInt(el.css('left'), 10), top: parseInt(el.css('top'), 10)                                              // 3170
				});                                                                                                                // 3171
			});                                                                                                                 // 3172
		};                                                                                                                   // 3173
                                                                                                                       // 3174
		if (typeof(o.alsoResize) == 'object' && !o.alsoResize.parentNode) {                                                  // 3175
			if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }                                  // 3176
			else { $.each(o.alsoResize, function (exp) { _store(exp); }); }                                                     // 3177
		}else{                                                                                                               // 3178
			_store(o.alsoResize);                                                                                               // 3179
		}                                                                                                                    // 3180
	},                                                                                                                    // 3181
                                                                                                                       // 3182
	resize: function (event, ui) {                                                                                        // 3183
		var that = $(this).data("resizable"), o = that.options, os = that.originalSize, op = that.originalPosition;          // 3184
                                                                                                                       // 3185
		var delta = {                                                                                                        // 3186
			height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,                              // 3187
			top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0                                   // 3188
		},                                                                                                                   // 3189
                                                                                                                       // 3190
		_alsoResize = function (exp, c) {                                                                                    // 3191
			$(exp).each(function() {                                                                                            // 3192
				var el = $(this), start = $(this).data("resizable-alsoresize"), style = {},                                        // 3193
					css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];
                                                                                                                       // 3195
				$.each(css, function (i, prop) {                                                                                   // 3196
					var sum = (start[prop]||0) + (delta[prop]||0);                                                                    // 3197
					if (sum && sum >= 0)                                                                                              // 3198
						style[prop] = sum || null;                                                                                       // 3199
				});                                                                                                                // 3200
                                                                                                                       // 3201
				el.css(style);                                                                                                     // 3202
			});                                                                                                                 // 3203
		};                                                                                                                   // 3204
                                                                                                                       // 3205
		if (typeof(o.alsoResize) == 'object' && !o.alsoResize.nodeType) {                                                    // 3206
			$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });                                                   // 3207
		}else{                                                                                                               // 3208
			_alsoResize(o.alsoResize);                                                                                          // 3209
		}                                                                                                                    // 3210
	},                                                                                                                    // 3211
                                                                                                                       // 3212
	stop: function (event, ui) {                                                                                          // 3213
		$(this).removeData("resizable-alsoresize");                                                                          // 3214
	}                                                                                                                     // 3215
});                                                                                                                    // 3216
                                                                                                                       // 3217
$.ui.plugin.add("resizable", "animate", {                                                                              // 3218
                                                                                                                       // 3219
	stop: function(event, ui) {                                                                                           // 3220
		var that = $(this).data("resizable"), o = that.options;                                                              // 3221
                                                                                                                       // 3222
		var pr = that._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),                 // 3223
					soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : that.sizeDiff.height,             // 3224
						soffsetw = ista ? 0 : that.sizeDiff.width;                                                                       // 3225
                                                                                                                       // 3226
		var style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },                          // 3227
					left = (parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left)) || null,      // 3228
						top = (parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top)) || null;         // 3229
                                                                                                                       // 3230
		that.element.animate(                                                                                                // 3231
			$.extend(style, top && left ? { top: top, left: left } : {}), {                                                     // 3232
				duration: o.animateDuration,                                                                                       // 3233
				easing: o.animateEasing,                                                                                           // 3234
				step: function() {                                                                                                 // 3235
                                                                                                                       // 3236
					var data = {                                                                                                      // 3237
						width: parseInt(that.element.css('width'), 10),                                                                  // 3238
						height: parseInt(that.element.css('height'), 10),                                                                // 3239
						top: parseInt(that.element.css('top'), 10),                                                                      // 3240
						left: parseInt(that.element.css('left'), 10)                                                                     // 3241
					};                                                                                                                // 3242
                                                                                                                       // 3243
					if (pr && pr.length) $(pr[0]).css({ width: data.width, height: data.height });                                    // 3244
                                                                                                                       // 3245
					// propagating resize, and updating values for each animation step                                                // 3246
					that._updateCache(data);                                                                                          // 3247
					that._propagate("resize", event);                                                                                 // 3248
                                                                                                                       // 3249
				}                                                                                                                  // 3250
			}                                                                                                                   // 3251
		);                                                                                                                   // 3252
	}                                                                                                                     // 3253
                                                                                                                       // 3254
});                                                                                                                    // 3255
                                                                                                                       // 3256
$.ui.plugin.add("resizable", "containment", {                                                                          // 3257
                                                                                                                       // 3258
	start: function(event, ui) {                                                                                          // 3259
		var that = $(this).data("resizable"), o = that.options, el = that.element;                                           // 3260
		var oc = o.containment,	ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;          // 3261
		if (!ce) return;                                                                                                     // 3262
                                                                                                                       // 3263
		that.containerElement = $(ce);                                                                                       // 3264
                                                                                                                       // 3265
		if (/document/.test(oc) || oc == document) {                                                                         // 3266
			that.containerOffset = { left: 0, top: 0 };                                                                         // 3267
			that.containerPosition = { left: 0, top: 0 };                                                                       // 3268
                                                                                                                       // 3269
			that.parentData = {                                                                                                 // 3270
				element: $(document), left: 0, top: 0,                                                                             // 3271
				width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight                  // 3272
			};                                                                                                                  // 3273
		}                                                                                                                    // 3274
                                                                                                                       // 3275
		// i'm a node, so compute top, left, right, bottom                                                                   // 3276
		else {                                                                                                               // 3277
			var element = $(ce), p = [];                                                                                        // 3278
			$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });     // 3279
                                                                                                                       // 3280
			that.containerOffset = element.offset();                                                                            // 3281
			that.containerPosition = element.position();                                                                        // 3282
			that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };              // 3283
                                                                                                                       // 3284
			var co = that.containerOffset, ch = that.containerSize.height,	cw = that.containerSize.width,                       // 3285
						width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw ), height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);
                                                                                                                       // 3287
			that.parentData = {                                                                                                 // 3288
				element: ce, left: co.left, top: co.top, width: width, height: height                                              // 3289
			};                                                                                                                  // 3290
		}                                                                                                                    // 3291
	},                                                                                                                    // 3292
                                                                                                                       // 3293
	resize: function(event, ui) {                                                                                         // 3294
		var that = $(this).data("resizable"), o = that.options,                                                              // 3295
				ps = that.containerSize, co = that.containerOffset, cs = that.size, cp = that.position,                            // 3296
				pRatio = that._aspectRatio || event.shiftKey, cop = { top:0, left:0 }, ce = that.containerElement;                 // 3297
                                                                                                                       // 3298
		if (ce[0] != document && (/static/).test(ce.css('position'))) cop = co;                                              // 3299
                                                                                                                       // 3300
		if (cp.left < (that._helper ? co.left : 0)) {                                                                        // 3301
			that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
			if (pRatio) that.size.height = that.size.width / that.aspectRatio;                                                  // 3303
			that.position.left = o.helper ? co.left : 0;                                                                        // 3304
		}                                                                                                                    // 3305
                                                                                                                       // 3306
		if (cp.top < (that._helper ? co.top : 0)) {                                                                          // 3307
			that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);            // 3308
			if (pRatio) that.size.width = that.size.height * that.aspectRatio;                                                  // 3309
			that.position.top = that._helper ? co.top : 0;                                                                      // 3310
		}                                                                                                                    // 3311
                                                                                                                       // 3312
		that.offset.left = that.parentData.left+that.position.left;                                                          // 3313
		that.offset.top = that.parentData.top+that.position.top;                                                             // 3314
                                                                                                                       // 3315
		var woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width ),
					hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );
                                                                                                                       // 3318
		var isParent = that.containerElement.get(0) == that.element.parent().get(0),                                         // 3319
			isOffsetRelative = /relative|absolute/.test(that.containerElement.css('position'));                                 // 3320
                                                                                                                       // 3321
		if(isParent && isOffsetRelative) woset -= that.parentData.left;                                                      // 3322
                                                                                                                       // 3323
		if (woset + that.size.width >= that.parentData.width) {                                                              // 3324
			that.size.width = that.parentData.width - woset;                                                                    // 3325
			if (pRatio) that.size.height = that.size.width / that.aspectRatio;                                                  // 3326
		}                                                                                                                    // 3327
                                                                                                                       // 3328
		if (hoset + that.size.height >= that.parentData.height) {                                                            // 3329
			that.size.height = that.parentData.height - hoset;                                                                  // 3330
			if (pRatio) that.size.width = that.size.height * that.aspectRatio;                                                  // 3331
		}                                                                                                                    // 3332
	},                                                                                                                    // 3333
                                                                                                                       // 3334
	stop: function(event, ui){                                                                                            // 3335
		var that = $(this).data("resizable"), o = that.options, cp = that.position,                                          // 3336
				co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement;                               // 3337
                                                                                                                       // 3338
		var helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
                                                                                                                       // 3340
		if (that._helper && !o.animate && (/relative/).test(ce.css('position')))                                             // 3341
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });                                           // 3342
                                                                                                                       // 3343
		if (that._helper && !o.animate && (/static/).test(ce.css('position')))                                               // 3344
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });                                           // 3345
                                                                                                                       // 3346
	}                                                                                                                     // 3347
});                                                                                                                    // 3348
                                                                                                                       // 3349
$.ui.plugin.add("resizable", "ghost", {                                                                                // 3350
                                                                                                                       // 3351
	start: function(event, ui) {                                                                                          // 3352
                                                                                                                       // 3353
		var that = $(this).data("resizable"), o = that.options, cs = that.size;                                              // 3354
                                                                                                                       // 3355
		that.ghost = that.originalElement.clone();                                                                           // 3356
		that.ghost                                                                                                           // 3357
			.css({ opacity: .25, display: 'block', position: 'relative', height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
			.addClass('ui-resizable-ghost')                                                                                     // 3359
			.addClass(typeof o.ghost == 'string' ? o.ghost : '');                                                               // 3360
                                                                                                                       // 3361
		that.ghost.appendTo(that.helper);                                                                                    // 3362
                                                                                                                       // 3363
	},                                                                                                                    // 3364
                                                                                                                       // 3365
	resize: function(event, ui){                                                                                          // 3366
		var that = $(this).data("resizable"), o = that.options;                                                              // 3367
		if (that.ghost) that.ghost.css({ position: 'relative', height: that.size.height, width: that.size.width });          // 3368
	},                                                                                                                    // 3369
                                                                                                                       // 3370
	stop: function(event, ui){                                                                                            // 3371
		var that = $(this).data("resizable"), o = that.options;                                                              // 3372
		if (that.ghost && that.helper) that.helper.get(0).removeChild(that.ghost.get(0));                                    // 3373
	}                                                                                                                     // 3374
                                                                                                                       // 3375
});                                                                                                                    // 3376
                                                                                                                       // 3377
$.ui.plugin.add("resizable", "grid", {                                                                                 // 3378
                                                                                                                       // 3379
	resize: function(event, ui) {                                                                                         // 3380
		var that = $(this).data("resizable"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, ratio = o._aspectRatio || event.shiftKey;
		o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;                                                      // 3382
		var ox = Math.round((cs.width - os.width) / (o.grid[0]||1)) * (o.grid[0]||1), oy = Math.round((cs.height - os.height) / (o.grid[1]||1)) * (o.grid[1]||1);
                                                                                                                       // 3384
		if (/^(se|s|e)$/.test(a)) {                                                                                          // 3385
			that.size.width = os.width + ox;                                                                                    // 3386
			that.size.height = os.height + oy;                                                                                  // 3387
		}                                                                                                                    // 3388
		else if (/^(ne)$/.test(a)) {                                                                                         // 3389
			that.size.width = os.width + ox;                                                                                    // 3390
			that.size.height = os.height + oy;                                                                                  // 3391
			that.position.top = op.top - oy;                                                                                    // 3392
		}                                                                                                                    // 3393
		else if (/^(sw)$/.test(a)) {                                                                                         // 3394
			that.size.width = os.width + ox;                                                                                    // 3395
			that.size.height = os.height + oy;                                                                                  // 3396
			that.position.left = op.left - ox;                                                                                  // 3397
		}                                                                                                                    // 3398
		else {                                                                                                               // 3399
			that.size.width = os.width + ox;                                                                                    // 3400
			that.size.height = os.height + oy;                                                                                  // 3401
			that.position.top = op.top - oy;                                                                                    // 3402
			that.position.left = op.left - ox;                                                                                  // 3403
		}                                                                                                                    // 3404
	}                                                                                                                     // 3405
                                                                                                                       // 3406
});                                                                                                                    // 3407
                                                                                                                       // 3408
var num = function(v) {                                                                                                // 3409
	return parseInt(v, 10) || 0;                                                                                          // 3410
};                                                                                                                     // 3411
                                                                                                                       // 3412
var isNumber = function(value) {                                                                                       // 3413
	return !isNaN(parseInt(value, 10));                                                                                   // 3414
};                                                                                                                     // 3415
                                                                                                                       // 3416
})(jQuery);                                                                                                            // 3417
(function( $, undefined ) {                                                                                            // 3418
                                                                                                                       // 3419
$.widget("ui.selectable", $.ui.mouse, {                                                                                // 3420
	version: "1.9.2",                                                                                                     // 3421
	options: {                                                                                                            // 3422
		appendTo: 'body',                                                                                                    // 3423
		autoRefresh: true,                                                                                                   // 3424
		distance: 0,                                                                                                         // 3425
		filter: '*',                                                                                                         // 3426
		tolerance: 'touch'                                                                                                   // 3427
	},                                                                                                                    // 3428
	_create: function() {                                                                                                 // 3429
		var that = this;                                                                                                     // 3430
                                                                                                                       // 3431
		this.element.addClass("ui-selectable");                                                                              // 3432
                                                                                                                       // 3433
		this.dragged = false;                                                                                                // 3434
                                                                                                                       // 3435
		// cache selectee children based on filter                                                                           // 3436
		var selectees;                                                                                                       // 3437
		this.refresh = function() {                                                                                          // 3438
			selectees = $(that.options.filter, that.element[0]);                                                                // 3439
			selectees.addClass("ui-selectee");                                                                                  // 3440
			selectees.each(function() {                                                                                         // 3441
				var $this = $(this);                                                                                               // 3442
				var pos = $this.offset();                                                                                          // 3443
				$.data(this, "selectable-item", {                                                                                  // 3444
					element: this,                                                                                                    // 3445
					$element: $this,                                                                                                  // 3446
					left: pos.left,                                                                                                   // 3447
					top: pos.top,                                                                                                     // 3448
					right: pos.left + $this.outerWidth(),                                                                             // 3449
					bottom: pos.top + $this.outerHeight(),                                                                            // 3450
					startselected: false,                                                                                             // 3451
					selected: $this.hasClass('ui-selected'),                                                                          // 3452
					selecting: $this.hasClass('ui-selecting'),                                                                        // 3453
					unselecting: $this.hasClass('ui-unselecting')                                                                     // 3454
				});                                                                                                                // 3455
			});                                                                                                                 // 3456
		};                                                                                                                   // 3457
		this.refresh();                                                                                                      // 3458
                                                                                                                       // 3459
		this.selectees = selectees.addClass("ui-selectee");                                                                  // 3460
                                                                                                                       // 3461
		this._mouseInit();                                                                                                   // 3462
                                                                                                                       // 3463
		this.helper = $("<div class='ui-selectable-helper'></div>");                                                         // 3464
	},                                                                                                                    // 3465
                                                                                                                       // 3466
	_destroy: function() {                                                                                                // 3467
		this.selectees                                                                                                       // 3468
			.removeClass("ui-selectee")                                                                                         // 3469
			.removeData("selectable-item");                                                                                     // 3470
		this.element                                                                                                         // 3471
			.removeClass("ui-selectable ui-selectable-disabled");                                                               // 3472
		this._mouseDestroy();                                                                                                // 3473
	},                                                                                                                    // 3474
                                                                                                                       // 3475
	_mouseStart: function(event) {                                                                                        // 3476
		var that = this;                                                                                                     // 3477
                                                                                                                       // 3478
		this.opos = [event.pageX, event.pageY];                                                                              // 3479
                                                                                                                       // 3480
		if (this.options.disabled)                                                                                           // 3481
			return;                                                                                                             // 3482
                                                                                                                       // 3483
		var options = this.options;                                                                                          // 3484
                                                                                                                       // 3485
		this.selectees = $(options.filter, this.element[0]);                                                                 // 3486
                                                                                                                       // 3487
		this._trigger("start", event);                                                                                       // 3488
                                                                                                                       // 3489
		$(options.appendTo).append(this.helper);                                                                             // 3490
		// position helper (lasso)                                                                                           // 3491
		this.helper.css({                                                                                                    // 3492
			"left": event.clientX,                                                                                              // 3493
			"top": event.clientY,                                                                                               // 3494
			"width": 0,                                                                                                         // 3495
			"height": 0                                                                                                         // 3496
		});                                                                                                                  // 3497
                                                                                                                       // 3498
		if (options.autoRefresh) {                                                                                           // 3499
			this.refresh();                                                                                                     // 3500
		}                                                                                                                    // 3501
                                                                                                                       // 3502
		this.selectees.filter('.ui-selected').each(function() {                                                              // 3503
			var selectee = $.data(this, "selectable-item");                                                                     // 3504
			selectee.startselected = true;                                                                                      // 3505
			if (!event.metaKey && !event.ctrlKey) {                                                                             // 3506
				selectee.$element.removeClass('ui-selected');                                                                      // 3507
				selectee.selected = false;                                                                                         // 3508
				selectee.$element.addClass('ui-unselecting');                                                                      // 3509
				selectee.unselecting = true;                                                                                       // 3510
				// selectable UNSELECTING callback                                                                                 // 3511
				that._trigger("unselecting", event, {                                                                              // 3512
					unselecting: selectee.element                                                                                     // 3513
				});                                                                                                                // 3514
			}                                                                                                                   // 3515
		});                                                                                                                  // 3516
                                                                                                                       // 3517
		$(event.target).parents().andSelf().each(function() {                                                                // 3518
			var selectee = $.data(this, "selectable-item");                                                                     // 3519
			if (selectee) {                                                                                                     // 3520
				var doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass('ui-selected');                   // 3521
				selectee.$element                                                                                                  // 3522
					.removeClass(doSelect ? "ui-unselecting" : "ui-selected")                                                         // 3523
					.addClass(doSelect ? "ui-selecting" : "ui-unselecting");                                                          // 3524
				selectee.unselecting = !doSelect;                                                                                  // 3525
				selectee.selecting = doSelect;                                                                                     // 3526
				selectee.selected = doSelect;                                                                                      // 3527
				// selectable (UN)SELECTING callback                                                                               // 3528
				if (doSelect) {                                                                                                    // 3529
					that._trigger("selecting", event, {                                                                               // 3530
						selecting: selectee.element                                                                                      // 3531
					});                                                                                                               // 3532
				} else {                                                                                                           // 3533
					that._trigger("unselecting", event, {                                                                             // 3534
						unselecting: selectee.element                                                                                    // 3535
					});                                                                                                               // 3536
				}                                                                                                                  // 3537
				return false;                                                                                                      // 3538
			}                                                                                                                   // 3539
		});                                                                                                                  // 3540
                                                                                                                       // 3541
	},                                                                                                                    // 3542
                                                                                                                       // 3543
	_mouseDrag: function(event) {                                                                                         // 3544
		var that = this;                                                                                                     // 3545
		this.dragged = true;                                                                                                 // 3546
                                                                                                                       // 3547
		if (this.options.disabled)                                                                                           // 3548
			return;                                                                                                             // 3549
                                                                                                                       // 3550
		var options = this.options;                                                                                          // 3551
                                                                                                                       // 3552
		var x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;                                        // 3553
		if (x1 > x2) { var tmp = x2; x2 = x1; x1 = tmp; }                                                                    // 3554
		if (y1 > y2) { var tmp = y2; y2 = y1; y1 = tmp; }                                                                    // 3555
		this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});                                                   // 3556
                                                                                                                       // 3557
		this.selectees.each(function() {                                                                                     // 3558
			var selectee = $.data(this, "selectable-item");                                                                     // 3559
			//prevent helper from being selected if appendTo: selectable                                                        // 3560
			if (!selectee || selectee.element == that.element[0])                                                               // 3561
				return;                                                                                                            // 3562
			var hit = false;                                                                                                    // 3563
			if (options.tolerance == 'touch') {                                                                                 // 3564
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );               // 3565
			} else if (options.tolerance == 'fit') {                                                                            // 3566
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);                    // 3567
			}                                                                                                                   // 3568
                                                                                                                       // 3569
			if (hit) {                                                                                                          // 3570
				// SELECT                                                                                                          // 3571
				if (selectee.selected) {                                                                                           // 3572
					selectee.$element.removeClass('ui-selected');                                                                     // 3573
					selectee.selected = false;                                                                                        // 3574
				}                                                                                                                  // 3575
				if (selectee.unselecting) {                                                                                        // 3576
					selectee.$element.removeClass('ui-unselecting');                                                                  // 3577
					selectee.unselecting = false;                                                                                     // 3578
				}                                                                                                                  // 3579
				if (!selectee.selecting) {                                                                                         // 3580
					selectee.$element.addClass('ui-selecting');                                                                       // 3581
					selectee.selecting = true;                                                                                        // 3582
					// selectable SELECTING callback                                                                                  // 3583
					that._trigger("selecting", event, {                                                                               // 3584
						selecting: selectee.element                                                                                      // 3585
					});                                                                                                               // 3586
				}                                                                                                                  // 3587
			} else {                                                                                                            // 3588
				// UNSELECT                                                                                                        // 3589
				if (selectee.selecting) {                                                                                          // 3590
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {                                                 // 3591
						selectee.$element.removeClass('ui-selecting');                                                                   // 3592
						selectee.selecting = false;                                                                                      // 3593
						selectee.$element.addClass('ui-selected');                                                                       // 3594
						selectee.selected = true;                                                                                        // 3595
					} else {                                                                                                          // 3596
						selectee.$element.removeClass('ui-selecting');                                                                   // 3597
						selectee.selecting = false;                                                                                      // 3598
						if (selectee.startselected) {                                                                                    // 3599
							selectee.$element.addClass('ui-unselecting');                                                                   // 3600
							selectee.unselecting = true;                                                                                    // 3601
						}                                                                                                                // 3602
						// selectable UNSELECTING callback                                                                               // 3603
						that._trigger("unselecting", event, {                                                                            // 3604
							unselecting: selectee.element                                                                                   // 3605
						});                                                                                                              // 3606
					}                                                                                                                 // 3607
				}                                                                                                                  // 3608
				if (selectee.selected) {                                                                                           // 3609
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {                                                // 3610
						selectee.$element.removeClass('ui-selected');                                                                    // 3611
						selectee.selected = false;                                                                                       // 3612
                                                                                                                       // 3613
						selectee.$element.addClass('ui-unselecting');                                                                    // 3614
						selectee.unselecting = true;                                                                                     // 3615
						// selectable UNSELECTING callback                                                                               // 3616
						that._trigger("unselecting", event, {                                                                            // 3617
							unselecting: selectee.element                                                                                   // 3618
						});                                                                                                              // 3619
					}                                                                                                                 // 3620
				}                                                                                                                  // 3621
			}                                                                                                                   // 3622
		});                                                                                                                  // 3623
                                                                                                                       // 3624
		return false;                                                                                                        // 3625
	},                                                                                                                    // 3626
                                                                                                                       // 3627
	_mouseStop: function(event) {                                                                                         // 3628
		var that = this;                                                                                                     // 3629
                                                                                                                       // 3630
		this.dragged = false;                                                                                                // 3631
                                                                                                                       // 3632
		var options = this.options;                                                                                          // 3633
                                                                                                                       // 3634
		$('.ui-unselecting', this.element[0]).each(function() {                                                              // 3635
			var selectee = $.data(this, "selectable-item");                                                                     // 3636
			selectee.$element.removeClass('ui-unselecting');                                                                    // 3637
			selectee.unselecting = false;                                                                                       // 3638
			selectee.startselected = false;                                                                                     // 3639
			that._trigger("unselected", event, {                                                                                // 3640
				unselected: selectee.element                                                                                       // 3641
			});                                                                                                                 // 3642
		});                                                                                                                  // 3643
		$('.ui-selecting', this.element[0]).each(function() {                                                                // 3644
			var selectee = $.data(this, "selectable-item");                                                                     // 3645
			selectee.$element.removeClass('ui-selecting').addClass('ui-selected');                                              // 3646
			selectee.selecting = false;                                                                                         // 3647
			selectee.selected = true;                                                                                           // 3648
			selectee.startselected = true;                                                                                      // 3649
			that._trigger("selected", event, {                                                                                  // 3650
				selected: selectee.element                                                                                         // 3651
			});                                                                                                                 // 3652
		});                                                                                                                  // 3653
		this._trigger("stop", event);                                                                                        // 3654
                                                                                                                       // 3655
		this.helper.remove();                                                                                                // 3656
                                                                                                                       // 3657
		return false;                                                                                                        // 3658
	}                                                                                                                     // 3659
                                                                                                                       // 3660
});                                                                                                                    // 3661
                                                                                                                       // 3662
})(jQuery);                                                                                                            // 3663
(function( $, undefined ) {                                                                                            // 3664
                                                                                                                       // 3665
$.widget("ui.sortable", $.ui.mouse, {                                                                                  // 3666
	version: "1.9.2",                                                                                                     // 3667
	widgetEventPrefix: "sort",                                                                                            // 3668
	ready: false,                                                                                                         // 3669
	options: {                                                                                                            // 3670
		appendTo: "parent",                                                                                                  // 3671
		axis: false,                                                                                                         // 3672
		connectWith: false,                                                                                                  // 3673
		containment: false,                                                                                                  // 3674
		cursor: 'auto',                                                                                                      // 3675
		cursorAt: false,                                                                                                     // 3676
		dropOnEmpty: true,                                                                                                   // 3677
		forcePlaceholderSize: false,                                                                                         // 3678
		forceHelperSize: false,                                                                                              // 3679
		grid: false,                                                                                                         // 3680
		handle: false,                                                                                                       // 3681
		helper: "original",                                                                                                  // 3682
		items: '> *',                                                                                                        // 3683
		opacity: false,                                                                                                      // 3684
		placeholder: false,                                                                                                  // 3685
		revert: false,                                                                                                       // 3686
		scroll: true,                                                                                                        // 3687
		scrollSensitivity: 20,                                                                                               // 3688
		scrollSpeed: 20,                                                                                                     // 3689
		scope: "default",                                                                                                    // 3690
		tolerance: "intersect",                                                                                              // 3691
		zIndex: 1000                                                                                                         // 3692
	},                                                                                                                    // 3693
	_create: function() {                                                                                                 // 3694
                                                                                                                       // 3695
		var o = this.options;                                                                                                // 3696
		this.containerCache = {};                                                                                            // 3697
		this.element.addClass("ui-sortable");                                                                                // 3698
                                                                                                                       // 3699
		//Get the items                                                                                                      // 3700
		this.refresh();                                                                                                      // 3701
                                                                                                                       // 3702
		//Let's determine if the items are being displayed horizontally                                                      // 3703
		this.floating = this.items.length ? o.axis === 'x' || (/left|right/).test(this.items[0].item.css('float')) || (/inline|table-cell/).test(this.items[0].item.css('display')) : false;
                                                                                                                       // 3705
		//Let's determine the parent's offset                                                                                // 3706
		this.offset = this.element.offset();                                                                                 // 3707
                                                                                                                       // 3708
		//Initialize mouse events for interaction                                                                            // 3709
		this._mouseInit();                                                                                                   // 3710
                                                                                                                       // 3711
		//We're ready to go                                                                                                  // 3712
		this.ready = true                                                                                                    // 3713
                                                                                                                       // 3714
	},                                                                                                                    // 3715
                                                                                                                       // 3716
	_destroy: function() {                                                                                                // 3717
		this.element                                                                                                         // 3718
			.removeClass("ui-sortable ui-sortable-disabled");                                                                   // 3719
		this._mouseDestroy();                                                                                                // 3720
                                                                                                                       // 3721
		for ( var i = this.items.length - 1; i >= 0; i-- )                                                                   // 3722
			this.items[i].item.removeData(this.widgetName + "-item");                                                           // 3723
                                                                                                                       // 3724
		return this;                                                                                                         // 3725
	},                                                                                                                    // 3726
                                                                                                                       // 3727
	_setOption: function(key, value){                                                                                     // 3728
		if ( key === "disabled" ) {                                                                                          // 3729
			this.options[ key ] = value;                                                                                        // 3730
                                                                                                                       // 3731
			this.widget().toggleClass( "ui-sortable-disabled", !!value );                                                       // 3732
		} else {                                                                                                             // 3733
			// Don't call widget base _setOption for disable as it adds ui-state-disabled class                                 // 3734
			$.Widget.prototype._setOption.apply(this, arguments);                                                               // 3735
		}                                                                                                                    // 3736
	},                                                                                                                    // 3737
                                                                                                                       // 3738
	_mouseCapture: function(event, overrideHandle) {                                                                      // 3739
		var that = this;                                                                                                     // 3740
                                                                                                                       // 3741
		if (this.reverting) {                                                                                                // 3742
			return false;                                                                                                       // 3743
		}                                                                                                                    // 3744
                                                                                                                       // 3745
		if(this.options.disabled || this.options.type == 'static') return false;                                             // 3746
                                                                                                                       // 3747
		//We have to refresh the items data once first                                                                       // 3748
		this._refreshItems(event);                                                                                           // 3749
                                                                                                                       // 3750
		//Find out if the clicked node (or one of its parents) is a actual item in this.items                                // 3751
		var currentItem = null, nodes = $(event.target).parents().each(function() {                                          // 3752
			if($.data(this, that.widgetName + '-item') == that) {                                                               // 3753
				currentItem = $(this);                                                                                             // 3754
				return false;                                                                                                      // 3755
			}                                                                                                                   // 3756
		});                                                                                                                  // 3757
		if($.data(event.target, that.widgetName + '-item') == that) currentItem = $(event.target);                           // 3758
                                                                                                                       // 3759
		if(!currentItem) return false;                                                                                       // 3760
		if(this.options.handle && !overrideHandle) {                                                                         // 3761
			var validHandle = false;                                                                                            // 3762
                                                                                                                       // 3763
			$(this.options.handle, currentItem).find("*").andSelf().each(function() { if(this == event.target) validHandle = true; });
			if(!validHandle) return false;                                                                                      // 3765
		}                                                                                                                    // 3766
                                                                                                                       // 3767
		this.currentItem = currentItem;                                                                                      // 3768
		this._removeCurrentsFromItems();                                                                                     // 3769
		return true;                                                                                                         // 3770
                                                                                                                       // 3771
	},                                                                                                                    // 3772
                                                                                                                       // 3773
	_mouseStart: function(event, overrideHandle, noActivation) {                                                          // 3774
                                                                                                                       // 3775
		var o = this.options;                                                                                                // 3776
		this.currentContainer = this;                                                                                        // 3777
                                                                                                                       // 3778
		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture                // 3779
		this.refreshPositions();                                                                                             // 3780
                                                                                                                       // 3781
		//Create and append the visible helper                                                                               // 3782
		this.helper = this._createHelper(event);                                                                             // 3783
                                                                                                                       // 3784
		//Cache the helper size                                                                                              // 3785
		this._cacheHelperProportions();                                                                                      // 3786
                                                                                                                       // 3787
		/*                                                                                                                   // 3788
		 * - Position generation -                                                                                           // 3789
		 * This block generates everything position related - it's the core of draggables.                                   // 3790
		 */                                                                                                                  // 3791
                                                                                                                       // 3792
		//Cache the margins of the original element                                                                          // 3793
		this._cacheMargins();                                                                                                // 3794
                                                                                                                       // 3795
		//Get the next scrolling parent                                                                                      // 3796
		this.scrollParent = this.helper.scrollParent();                                                                      // 3797
                                                                                                                       // 3798
		//The element's absolute position on the page minus margins                                                          // 3799
		this.offset = this.currentItem.offset();                                                                             // 3800
		this.offset = {                                                                                                      // 3801
			top: this.offset.top - this.margins.top,                                                                            // 3802
			left: this.offset.left - this.margins.left                                                                          // 3803
		};                                                                                                                   // 3804
                                                                                                                       // 3805
		$.extend(this.offset, {                                                                                              // 3806
			click: { //Where the click happened, relative to the element                                                        // 3807
				left: event.pageX - this.offset.left,                                                                              // 3808
				top: event.pageY - this.offset.top                                                                                 // 3809
			},                                                                                                                  // 3810
			parent: this._getParentOffset(),                                                                                    // 3811
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});                                                                                                                  // 3813
                                                                                                                       // 3814
		// Only after we got the offset, we can change the helper's position to absolute                                     // 3815
		// TODO: Still need to figure out a way to make relative sorting possible                                            // 3816
		this.helper.css("position", "absolute");                                                                             // 3817
		this.cssPosition = this.helper.css("position");                                                                      // 3818
                                                                                                                       // 3819
		//Generate the original position                                                                                     // 3820
		this.originalPosition = this._generatePosition(event);                                                               // 3821
		this.originalPageX = event.pageX;                                                                                    // 3822
		this.originalPageY = event.pageY;                                                                                    // 3823
                                                                                                                       // 3824
		//Adjust the mouse offset relative to the helper if 'cursorAt' is supplied                                           // 3825
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));                                                            // 3826
                                                                                                                       // 3827
		//Cache the former DOM position                                                                                      // 3828
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };                       // 3829
                                                                                                                       // 3830
		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] != this.currentItem[0]) {                                                                          // 3832
			this.currentItem.hide();                                                                                            // 3833
		}                                                                                                                    // 3834
                                                                                                                       // 3835
		//Create the placeholder                                                                                             // 3836
		this._createPlaceholder();                                                                                           // 3837
                                                                                                                       // 3838
		//Set a containment if given in the options                                                                          // 3839
		if(o.containment)                                                                                                    // 3840
			this._setContainment();                                                                                             // 3841
                                                                                                                       // 3842
		if(o.cursor) { // cursor option                                                                                      // 3843
			if ($('body').css("cursor")) this._storedCursor = $('body').css("cursor");                                          // 3844
			$('body').css("cursor", o.cursor);                                                                                  // 3845
		}                                                                                                                    // 3846
                                                                                                                       // 3847
		if(o.opacity) { // opacity option                                                                                    // 3848
			if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity");                                   // 3849
			this.helper.css("opacity", o.opacity);                                                                              // 3850
		}                                                                                                                    // 3851
                                                                                                                       // 3852
		if(o.zIndex) { // zIndex option                                                                                      // 3853
			if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex");                                      // 3854
			this.helper.css("zIndex", o.zIndex);                                                                                // 3855
		}                                                                                                                    // 3856
                                                                                                                       // 3857
		//Prepare scrolling                                                                                                  // 3858
		if(this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML')                                       // 3859
			this.overflowOffset = this.scrollParent.offset();                                                                   // 3860
                                                                                                                       // 3861
		//Call callbacks                                                                                                     // 3862
		this._trigger("start", event, this._uiHash());                                                                       // 3863
                                                                                                                       // 3864
		//Recache the helper size                                                                                            // 3865
		if(!this._preserveHelperProportions)                                                                                 // 3866
			this._cacheHelperProportions();                                                                                     // 3867
                                                                                                                       // 3868
                                                                                                                       // 3869
		//Post 'activate' events to possible containers                                                                      // 3870
		if(!noActivation) {                                                                                                  // 3871
			 for (var i = this.containers.length - 1; i >= 0; i--) { this.containers[i]._trigger("activate", event, this._uiHash(this)); }
		}                                                                                                                    // 3873
                                                                                                                       // 3874
		//Prepare possible droppables                                                                                        // 3875
		if($.ui.ddmanager)                                                                                                   // 3876
			$.ui.ddmanager.current = this;                                                                                      // 3877
                                                                                                                       // 3878
		if ($.ui.ddmanager && !o.dropBehaviour)                                                                              // 3879
			$.ui.ddmanager.prepareOffsets(this, event);                                                                         // 3880
                                                                                                                       // 3881
		this.dragging = true;                                                                                                // 3882
                                                                                                                       // 3883
		this.helper.addClass("ui-sortable-helper");                                                                          // 3884
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;                                                                                                         // 3886
                                                                                                                       // 3887
	},                                                                                                                    // 3888
                                                                                                                       // 3889
	_mouseDrag: function(event) {                                                                                         // 3890
                                                                                                                       // 3891
		//Compute the helpers position                                                                                       // 3892
		this.position = this._generatePosition(event);                                                                       // 3893
		this.positionAbs = this._convertPositionTo("absolute");                                                              // 3894
                                                                                                                       // 3895
		if (!this.lastPositionAbs) {                                                                                         // 3896
			this.lastPositionAbs = this.positionAbs;                                                                            // 3897
		}                                                                                                                    // 3898
                                                                                                                       // 3899
		//Do scrolling                                                                                                       // 3900
		if(this.options.scroll) {                                                                                            // 3901
			var o = this.options, scrolled = false;                                                                             // 3902
			if(this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {                                    // 3903
                                                                                                                       // 3904
				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)              // 3905
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;                       // 3906
				else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity)                                               // 3907
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;                       // 3908
                                                                                                                       // 3909
				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)              // 3910
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;                     // 3911
				else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity)                                              // 3912
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;                     // 3913
                                                                                                                       // 3914
			} else {                                                                                                            // 3915
                                                                                                                       // 3916
				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity)                                                    // 3917
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);                                        // 3918
				else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)                        // 3919
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);                                        // 3920
                                                                                                                       // 3921
				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity)                                                   // 3922
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);                                      // 3923
				else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)                        // 3924
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);                                      // 3925
                                                                                                                       // 3926
			}                                                                                                                   // 3927
                                                                                                                       // 3928
			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)                                                        // 3929
				$.ui.ddmanager.prepareOffsets(this, event);                                                                        // 3930
		}                                                                                                                    // 3931
                                                                                                                       // 3932
		//Regenerate the absolute position used for position checks                                                          // 3933
		this.positionAbs = this._convertPositionTo("absolute");                                                              // 3934
                                                                                                                       // 3935
		//Set the helper position                                                                                            // 3936
		if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';              // 3937
		if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';                // 3938
                                                                                                                       // 3939
		//Rearrange                                                                                                          // 3940
		for (var i = this.items.length - 1; i >= 0; i--) {                                                                   // 3941
                                                                                                                       // 3942
			//Cache variables and intersection, continue if no intersection                                                     // 3943
			var item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item);             // 3944
			if (!intersection) continue;                                                                                        // 3945
                                                                                                                       // 3946
			// Only put the placeholder inside the current Container, skip all                                                  // 3947
			// items form other containers. This works because when moving                                                      // 3948
			// an item from one container to another the                                                                        // 3949
			// currentContainer is switched before the placeholder is moved.                                                    // 3950
			//                                                                                                                  // 3951
			// Without this moving items in "sub-sortables" can cause the placeholder to jitter                                 // 3952
			// beetween the outer and inner container.                                                                          // 3953
			if (item.instance !== this.currentContainer) continue;                                                              // 3954
                                                                                                                       // 3955
			if (itemElement != this.currentItem[0] //cannot intersect with itself                                               // 3956
				&&	this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement //no useless actions that have been done before
				&&	!$.contains(this.placeholder[0], itemElement) //no action if the item moved is the parent of the item checked   // 3958
				&& (this.options.type == 'semi-dynamic' ? !$.contains(this.element[0], itemElement) : true)                        // 3959
				//&& itemElement.parentNode == this.placeholder[0].parentNode // only rearrange items within the same container    // 3960
			) {                                                                                                                 // 3961
                                                                                                                       // 3962
				this.direction = intersection == 1 ? "down" : "up";                                                                // 3963
                                                                                                                       // 3964
				if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {                                      // 3965
					this._rearrange(event, item);                                                                                     // 3966
				} else {                                                                                                           // 3967
					break;                                                                                                            // 3968
				}                                                                                                                  // 3969
                                                                                                                       // 3970
				this._trigger("change", event, this._uiHash());                                                                    // 3971
				break;                                                                                                             // 3972
			}                                                                                                                   // 3973
		}                                                                                                                    // 3974
                                                                                                                       // 3975
		//Post events to containers                                                                                          // 3976
		this._contactContainers(event);                                                                                      // 3977
                                                                                                                       // 3978
		//Interconnect with droppables                                                                                       // 3979
		if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);                                                                 // 3980
                                                                                                                       // 3981
		//Call callbacks                                                                                                     // 3982
		this._trigger('sort', event, this._uiHash());                                                                        // 3983
                                                                                                                       // 3984
		this.lastPositionAbs = this.positionAbs;                                                                             // 3985
		return false;                                                                                                        // 3986
                                                                                                                       // 3987
	},                                                                                                                    // 3988
                                                                                                                       // 3989
	_mouseStop: function(event, noPropagation) {                                                                          // 3990
                                                                                                                       // 3991
		if(!event) return;                                                                                                   // 3992
                                                                                                                       // 3993
		//If we are using droppables, inform the manager about the drop                                                      // 3994
		if ($.ui.ddmanager && !this.options.dropBehaviour)                                                                   // 3995
			$.ui.ddmanager.drop(this, event);                                                                                   // 3996
                                                                                                                       // 3997
		if(this.options.revert) {                                                                                            // 3998
			var that = this;                                                                                                    // 3999
			var cur = this.placeholder.offset();                                                                                // 4000
                                                                                                                       // 4001
			this.reverting = true;                                                                                              // 4002
                                                                                                                       // 4003
			$(this.helper).animate({                                                                                            // 4004
				left: cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
				top: cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
			}, parseInt(this.options.revert, 10) || 500, function() {                                                           // 4007
				that._clear(event);                                                                                                // 4008
			});                                                                                                                 // 4009
		} else {                                                                                                             // 4010
			this._clear(event, noPropagation);                                                                                  // 4011
		}                                                                                                                    // 4012
                                                                                                                       // 4013
		return false;                                                                                                        // 4014
                                                                                                                       // 4015
	},                                                                                                                    // 4016
                                                                                                                       // 4017
	cancel: function() {                                                                                                  // 4018
                                                                                                                       // 4019
		if(this.dragging) {                                                                                                  // 4020
                                                                                                                       // 4021
			this._mouseUp({ target: null });                                                                                    // 4022
                                                                                                                       // 4023
			if(this.options.helper == "original")                                                                               // 4024
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");                                           // 4025
			else                                                                                                                // 4026
				this.currentItem.show();                                                                                           // 4027
                                                                                                                       // 4028
			//Post deactivating events to containers                                                                            // 4029
			for (var i = this.containers.length - 1; i >= 0; i--){                                                              // 4030
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));                                               // 4031
				if(this.containers[i].containerCache.over) {                                                                       // 4032
					this.containers[i]._trigger("out", null, this._uiHash(this));                                                     // 4033
					this.containers[i].containerCache.over = 0;                                                                       // 4034
				}                                                                                                                  // 4035
			}                                                                                                                   // 4036
                                                                                                                       // 4037
		}                                                                                                                    // 4038
                                                                                                                       // 4039
		if (this.placeholder) {                                                                                              // 4040
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]);                 // 4042
			if(this.options.helper != "original" && this.helper && this.helper[0].parentNode) this.helper.remove();             // 4043
                                                                                                                       // 4044
			$.extend(this, {                                                                                                    // 4045
				helper: null,                                                                                                      // 4046
				dragging: false,                                                                                                   // 4047
				reverting: false,                                                                                                  // 4048
				_noFinalSort: null                                                                                                 // 4049
			});                                                                                                                 // 4050
                                                                                                                       // 4051
			if(this.domPosition.prev) {                                                                                         // 4052
				$(this.domPosition.prev).after(this.currentItem);                                                                  // 4053
			} else {                                                                                                            // 4054
				$(this.domPosition.parent).prepend(this.currentItem);                                                              // 4055
			}                                                                                                                   // 4056
		}                                                                                                                    // 4057
                                                                                                                       // 4058
		return this;                                                                                                         // 4059
                                                                                                                       // 4060
	},                                                                                                                    // 4061
                                                                                                                       // 4062
	serialize: function(o) {                                                                                              // 4063
                                                                                                                       // 4064
		var items = this._getItemsAsjQuery(o && o.connected);                                                                // 4065
		var str = []; o = o || {};                                                                                           // 4066
                                                                                                                       // 4067
		$(items).each(function() {                                                                                           // 4068
			var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));             // 4069
			if(res) str.push((o.key || res[1]+'[]')+'='+(o.key && o.expression ? res[1] : res[2]));                             // 4070
		});                                                                                                                  // 4071
                                                                                                                       // 4072
		if(!str.length && o.key) {                                                                                           // 4073
			str.push(o.key + '=');                                                                                              // 4074
		}                                                                                                                    // 4075
                                                                                                                       // 4076
		return str.join('&');                                                                                                // 4077
                                                                                                                       // 4078
	},                                                                                                                    // 4079
                                                                                                                       // 4080
	toArray: function(o) {                                                                                                // 4081
                                                                                                                       // 4082
		var items = this._getItemsAsjQuery(o && o.connected);                                                                // 4083
		var ret = []; o = o || {};                                                                                           // 4084
                                                                                                                       // 4085
		items.each(function() { ret.push($(o.item || this).attr(o.attribute || 'id') || ''); });                             // 4086
		return ret;                                                                                                          // 4087
                                                                                                                       // 4088
	},                                                                                                                    // 4089
                                                                                                                       // 4090
	/* Be careful with the following core functions */                                                                    // 4091
	_intersectsWith: function(item) {                                                                                     // 4092
                                                                                                                       // 4093
		var x1 = this.positionAbs.left,                                                                                      // 4094
			x2 = x1 + this.helperProportions.width,                                                                             // 4095
			y1 = this.positionAbs.top,                                                                                          // 4096
			y2 = y1 + this.helperProportions.height;                                                                            // 4097
                                                                                                                       // 4098
		var l = item.left,                                                                                                   // 4099
			r = l + item.width,                                                                                                 // 4100
			t = item.top,                                                                                                       // 4101
			b = t + item.height;                                                                                                // 4102
                                                                                                                       // 4103
		var dyClick = this.offset.click.top,                                                                                 // 4104
			dxClick = this.offset.click.left;                                                                                   // 4105
                                                                                                                       // 4106
		var isOverElement = (y1 + dyClick) > t && (y1 + dyClick) < b && (x1 + dxClick) > l && (x1 + dxClick) < r;            // 4107
                                                                                                                       // 4108
		if(	   this.options.tolerance == "pointer"                                                                           // 4109
			|| this.options.forcePointerForContainers                                                                           // 4110
			|| (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? 'width' : 'height'] > item[this.floating ? 'width' : 'height'])
		) {                                                                                                                  // 4112
			return isOverElement;                                                                                               // 4113
		} else {                                                                                                             // 4114
                                                                                                                       // 4115
			return (l < x1 + (this.helperProportions.width / 2) // Right Half                                                   // 4116
				&& x2 - (this.helperProportions.width / 2) < r // Left Half                                                        // 4117
				&& t < y1 + (this.helperProportions.height / 2) // Bottom Half                                                     // 4118
				&& y2 - (this.helperProportions.height / 2) < b ); // Top Half                                                     // 4119
                                                                                                                       // 4120
		}                                                                                                                    // 4121
	},                                                                                                                    // 4122
                                                                                                                       // 4123
	_intersectsWithPointer: function(item) {                                                                              // 4124
                                                                                                                       // 4125
		var isOverElementHeight = (this.options.axis === 'x') || $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === 'y') || $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,                                                          // 4128
			verticalDirection = this._getDragVerticalDirection(),                                                               // 4129
			horizontalDirection = this._getDragHorizontalDirection();                                                           // 4130
                                                                                                                       // 4131
		if (!isOverElement)                                                                                                  // 4132
			return false;                                                                                                       // 4133
                                                                                                                       // 4134
		return this.floating ?                                                                                               // 4135
			( ((horizontalDirection && horizontalDirection == "right") || verticalDirection == "down") ? 2 : 1 )                // 4136
			: ( verticalDirection && (verticalDirection == "down" ? 2 : 1) );                                                   // 4137
                                                                                                                       // 4138
	},                                                                                                                    // 4139
                                                                                                                       // 4140
	_intersectsWithSides: function(item) {                                                                                // 4141
                                                                                                                       // 4142
		var isOverBottomHalf = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),                                                               // 4145
			horizontalDirection = this._getDragHorizontalDirection();                                                           // 4146
                                                                                                                       // 4147
		if (this.floating && horizontalDirection) {                                                                          // 4148
			return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
		} else {                                                                                                             // 4150
			return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && !isOverBottomHalf));
		}                                                                                                                    // 4152
                                                                                                                       // 4153
	},                                                                                                                    // 4154
                                                                                                                       // 4155
	_getDragVerticalDirection: function() {                                                                               // 4156
		var delta = this.positionAbs.top - this.lastPositionAbs.top;                                                         // 4157
		return delta != 0 && (delta > 0 ? "down" : "up");                                                                    // 4158
	},                                                                                                                    // 4159
                                                                                                                       // 4160
	_getDragHorizontalDirection: function() {                                                                             // 4161
		var delta = this.positionAbs.left - this.lastPositionAbs.left;                                                       // 4162
		return delta != 0 && (delta > 0 ? "right" : "left");                                                                 // 4163
	},                                                                                                                    // 4164
                                                                                                                       // 4165
	refresh: function(event) {                                                                                            // 4166
		this._refreshItems(event);                                                                                           // 4167
		this.refreshPositions();                                                                                             // 4168
		return this;                                                                                                         // 4169
	},                                                                                                                    // 4170
                                                                                                                       // 4171
	_connectWith: function() {                                                                                            // 4172
		var options = this.options;                                                                                          // 4173
		return options.connectWith.constructor == String                                                                     // 4174
			? [options.connectWith]                                                                                             // 4175
			: options.connectWith;                                                                                              // 4176
	},                                                                                                                    // 4177
                                                                                                                       // 4178
	_getItemsAsjQuery: function(connected) {                                                                              // 4179
                                                                                                                       // 4180
		var items = [];                                                                                                      // 4181
		var queries = [];                                                                                                    // 4182
		var connectWith = this._connectWith();                                                                               // 4183
                                                                                                                       // 4184
		if(connectWith && connected) {                                                                                       // 4185
			for (var i = connectWith.length - 1; i >= 0; i--){                                                                  // 4186
				var cur = $(connectWith[i]);                                                                                       // 4187
				for (var j = cur.length - 1; j >= 0; j--){                                                                         // 4188
					var inst = $.data(cur[j], this.widgetName);                                                                       // 4189
					if(inst && inst != this && !inst.options.disabled) {                                                              // 4190
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), inst]);
					}                                                                                                                 // 4192
				};                                                                                                                 // 4193
			};                                                                                                                  // 4194
		}                                                                                                                    // 4195
                                                                                                                       // 4196
		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), this]);
                                                                                                                       // 4198
		for (var i = queries.length - 1; i >= 0; i--){                                                                       // 4199
			queries[i][0].each(function() {                                                                                     // 4200
				items.push(this);                                                                                                  // 4201
			});                                                                                                                 // 4202
		};                                                                                                                   // 4203
                                                                                                                       // 4204
		return $(items);                                                                                                     // 4205
                                                                                                                       // 4206
	},                                                                                                                    // 4207
                                                                                                                       // 4208
	_removeCurrentsFromItems: function() {                                                                                // 4209
                                                                                                                       // 4210
		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");                                             // 4211
                                                                                                                       // 4212
		this.items = $.grep(this.items, function (item) {                                                                    // 4213
			for (var j=0; j < list.length; j++) {                                                                               // 4214
				if(list[j] == item.item[0])                                                                                        // 4215
					return false;                                                                                                     // 4216
			};                                                                                                                  // 4217
			return true;                                                                                                        // 4218
		});                                                                                                                  // 4219
                                                                                                                       // 4220
	},                                                                                                                    // 4221
                                                                                                                       // 4222
	_refreshItems: function(event) {                                                                                      // 4223
                                                                                                                       // 4224
		this.items = [];                                                                                                     // 4225
		this.containers = [this];                                                                                            // 4226
		var items = this.items;                                                                                              // 4227
		var queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]];
		var connectWith = this._connectWith();                                                                               // 4229
                                                                                                                       // 4230
		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down                   // 4231
			for (var i = connectWith.length - 1; i >= 0; i--){                                                                  // 4232
				var cur = $(connectWith[i]);                                                                                       // 4233
				for (var j = cur.length - 1; j >= 0; j--){                                                                         // 4234
					var inst = $.data(cur[j], this.widgetName);                                                                       // 4235
					if(inst && inst != this && !inst.options.disabled) {                                                              // 4236
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);                                                                                      // 4238
					}                                                                                                                 // 4239
				};                                                                                                                 // 4240
			};                                                                                                                  // 4241
		}                                                                                                                    // 4242
                                                                                                                       // 4243
		for (var i = queries.length - 1; i >= 0; i--) {                                                                      // 4244
			var targetData = queries[i][1];                                                                                     // 4245
			var _queries = queries[i][0];                                                                                       // 4246
                                                                                                                       // 4247
			for (var j=0, queriesLength = _queries.length; j < queriesLength; j++) {                                            // 4248
				var item = $(_queries[j]);                                                                                         // 4249
                                                                                                                       // 4250
				item.data(this.widgetName + '-item', targetData); // Data for target checking (mouse manager)                      // 4251
                                                                                                                       // 4252
				items.push({                                                                                                       // 4253
					item: item,                                                                                                       // 4254
					instance: targetData,                                                                                             // 4255
					width: 0, height: 0,                                                                                              // 4256
					left: 0, top: 0                                                                                                   // 4257
				});                                                                                                                // 4258
			};                                                                                                                  // 4259
		};                                                                                                                   // 4260
                                                                                                                       // 4261
	},                                                                                                                    // 4262
                                                                                                                       // 4263
	refreshPositions: function(fast) {                                                                                    // 4264
                                                                                                                       // 4265
		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {                                                                               // 4267
			this.offset.parent = this._getParentOffset();                                                                       // 4268
		}                                                                                                                    // 4269
                                                                                                                       // 4270
		for (var i = this.items.length - 1; i >= 0; i--){                                                                    // 4271
			var item = this.items[i];                                                                                           // 4272
                                                                                                                       // 4273
			//We ignore calculating positions of all connected containers when we're not over them                              // 4274
			if(item.instance != this.currentContainer && this.currentContainer && item.item[0] != this.currentItem[0])          // 4275
				continue;                                                                                                          // 4276
                                                                                                                       // 4277
			var t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;                    // 4278
                                                                                                                       // 4279
			if (!fast) {                                                                                                        // 4280
				item.width = t.outerWidth();                                                                                       // 4281
				item.height = t.outerHeight();                                                                                     // 4282
			}                                                                                                                   // 4283
                                                                                                                       // 4284
			var p = t.offset();                                                                                                 // 4285
			item.left = p.left;                                                                                                 // 4286
			item.top = p.top;                                                                                                   // 4287
		};                                                                                                                   // 4288
                                                                                                                       // 4289
		if(this.options.custom && this.options.custom.refreshContainers) {                                                   // 4290
			this.options.custom.refreshContainers.call(this);                                                                   // 4291
		} else {                                                                                                             // 4292
			for (var i = this.containers.length - 1; i >= 0; i--){                                                              // 4293
				var p = this.containers[i].element.offset();                                                                       // 4294
				this.containers[i].containerCache.left = p.left;                                                                   // 4295
				this.containers[i].containerCache.top = p.top;                                                                     // 4296
				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();                                 // 4297
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();                               // 4298
			};                                                                                                                  // 4299
		}                                                                                                                    // 4300
                                                                                                                       // 4301
		return this;                                                                                                         // 4302
	},                                                                                                                    // 4303
                                                                                                                       // 4304
	_createPlaceholder: function(that) {                                                                                  // 4305
		that = that || this;                                                                                                 // 4306
		var o = that.options;                                                                                                // 4307
                                                                                                                       // 4308
		if(!o.placeholder || o.placeholder.constructor == String) {                                                          // 4309
			var className = o.placeholder;                                                                                      // 4310
			o.placeholder = {                                                                                                   // 4311
				element: function() {                                                                                              // 4312
                                                                                                                       // 4313
					var el = $(document.createElement(that.currentItem[0].nodeName))                                                  // 4314
						.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")                                 // 4315
						.removeClass("ui-sortable-helper")[0];                                                                           // 4316
                                                                                                                       // 4317
					if(!className)                                                                                                    // 4318
						el.style.visibility = "hidden";                                                                                  // 4319
                                                                                                                       // 4320
					return el;                                                                                                        // 4321
				},                                                                                                                 // 4322
				update: function(container, p) {                                                                                   // 4323
                                                                                                                       // 4324
					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that      // 4325
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified               // 4326
					if(className && !o.forcePlaceholderSize) return;                                                                  // 4327
                                                                                                                       // 4328
					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css('paddingTop')||0, 10) - parseInt(that.currentItem.css('paddingBottom')||0, 10)); };
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css('paddingLeft')||0, 10) - parseInt(that.currentItem.css('paddingRight')||0, 10)); };
				}                                                                                                                  // 4332
			};                                                                                                                  // 4333
		}                                                                                                                    // 4334
                                                                                                                       // 4335
		//Create the placeholder                                                                                             // 4336
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));                                    // 4337
                                                                                                                       // 4338
		//Append it after the actual current item                                                                            // 4339
		that.currentItem.after(that.placeholder);                                                                            // 4340
                                                                                                                       // 4341
		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)                                        // 4342
		o.placeholder.update(that, that.placeholder);                                                                        // 4343
                                                                                                                       // 4344
	},                                                                                                                    // 4345
                                                                                                                       // 4346
	_contactContainers: function(event) {                                                                                 // 4347
                                                                                                                       // 4348
		// get innermost container that intersects with item                                                                 // 4349
		var innermostContainer = null, innermostIndex = null;                                                                // 4350
                                                                                                                       // 4351
                                                                                                                       // 4352
		for (var i = this.containers.length - 1; i >= 0; i--){                                                               // 4353
                                                                                                                       // 4354
			// never consider a container that's located within the item itself                                                 // 4355
			if($.contains(this.currentItem[0], this.containers[i].element[0]))                                                  // 4356
				continue;                                                                                                          // 4357
                                                                                                                       // 4358
			if(this._intersectsWith(this.containers[i].containerCache)) {                                                       // 4359
                                                                                                                       // 4360
				// if we've already found a container and it's more "inner" than this, then continue                               // 4361
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0]))                 // 4362
					continue;                                                                                                         // 4363
                                                                                                                       // 4364
				innermostContainer = this.containers[i];                                                                           // 4365
				innermostIndex = i;                                                                                                // 4366
                                                                                                                       // 4367
			} else {                                                                                                            // 4368
				// container doesn't intersect. trigger "out" event if necessary                                                   // 4369
				if(this.containers[i].containerCache.over) {                                                                       // 4370
					this.containers[i]._trigger("out", event, this._uiHash(this));                                                    // 4371
					this.containers[i].containerCache.over = 0;                                                                       // 4372
				}                                                                                                                  // 4373
			}                                                                                                                   // 4374
                                                                                                                       // 4375
		}                                                                                                                    // 4376
                                                                                                                       // 4377
		// if no intersecting containers found, return                                                                       // 4378
		if(!innermostContainer) return;                                                                                      // 4379
                                                                                                                       // 4380
		// move the item into the container if it's not there already                                                        // 4381
		if(this.containers.length === 1) {                                                                                   // 4382
			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));                                        // 4383
			this.containers[innermostIndex].containerCache.over = 1;                                                            // 4384
		} else {                                                                                                             // 4385
                                                                                                                       // 4386
			//When entering a new container, we will find the item with the least distance and append our item near it          // 4387
			var dist = 10000; var itemWithLeastDistance = null;                                                                 // 4388
			var posProperty = this.containers[innermostIndex].floating ? 'left' : 'top';                                        // 4389
			var sizeProperty = this.containers[innermostIndex].floating ? 'width' : 'height';                                   // 4390
			var base = this.positionAbs[posProperty] + this.offset.click[posProperty];                                          // 4391
			for (var j = this.items.length - 1; j >= 0; j--) {                                                                  // 4392
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) continue;                       // 4393
				if(this.items[j].item[0] == this.currentItem[0]) continue;                                                         // 4394
				var cur = this.items[j].item.offset()[posProperty];                                                                // 4395
				var nearBottom = false;                                                                                            // 4396
				if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){                                     // 4397
					nearBottom = true;                                                                                                // 4398
					cur += this.items[j][sizeProperty];                                                                               // 4399
				}                                                                                                                  // 4400
                                                                                                                       // 4401
				if(Math.abs(cur - base) < dist) {                                                                                  // 4402
					dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];                                               // 4403
					this.direction = nearBottom ? "up": "down";                                                                       // 4404
				}                                                                                                                  // 4405
			}                                                                                                                   // 4406
                                                                                                                       // 4407
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) //Check if dropOnEmpty is enabled                           // 4408
				return;                                                                                                            // 4409
                                                                                                                       // 4410
			this.currentContainer = this.containers[innermostIndex];                                                            // 4411
			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());                                                                     // 4413
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));                                      // 4414
                                                                                                                       // 4415
			//Update the placeholder                                                                                            // 4416
			this.options.placeholder.update(this.currentContainer, this.placeholder);                                           // 4417
                                                                                                                       // 4418
			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));                                        // 4419
			this.containers[innermostIndex].containerCache.over = 1;                                                            // 4420
		}                                                                                                                    // 4421
                                                                                                                       // 4422
                                                                                                                       // 4423
	},                                                                                                                    // 4424
                                                                                                                       // 4425
	_createHelper: function(event) {                                                                                      // 4426
                                                                                                                       // 4427
		var o = this.options;                                                                                                // 4428
		var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper == 'clone' ? this.currentItem.clone() : this.currentItem);
                                                                                                                       // 4430
		if(!helper.parents('body').length) //Add the helper to the DOM if that didn't happen already                         // 4431
			$(o.appendTo != 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);                  // 4432
                                                                                                                       // 4433
		if(helper[0] == this.currentItem[0])                                                                                 // 4434
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
                                                                                                                       // 4436
		if(helper[0].style.width == '' || o.forceHelperSize) helper.width(this.currentItem.width());                         // 4437
		if(helper[0].style.height == '' || o.forceHelperSize) helper.height(this.currentItem.height());                      // 4438
                                                                                                                       // 4439
		return helper;                                                                                                       // 4440
                                                                                                                       // 4441
	},                                                                                                                    // 4442
                                                                                                                       // 4443
	_adjustOffsetFromHelper: function(obj) {                                                                              // 4444
		if (typeof obj == 'string') {                                                                                        // 4445
			obj = obj.split(' ');                                                                                               // 4446
		}                                                                                                                    // 4447
		if ($.isArray(obj)) {                                                                                                // 4448
			obj = {left: +obj[0], top: +obj[1] || 0};                                                                           // 4449
		}                                                                                                                    // 4450
		if ('left' in obj) {                                                                                                 // 4451
			this.offset.click.left = obj.left + this.margins.left;                                                              // 4452
		}                                                                                                                    // 4453
		if ('right' in obj) {                                                                                                // 4454
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;                              // 4455
		}                                                                                                                    // 4456
		if ('top' in obj) {                                                                                                  // 4457
			this.offset.click.top = obj.top + this.margins.top;                                                                 // 4458
		}                                                                                                                    // 4459
		if ('bottom' in obj) {                                                                                               // 4460
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;                              // 4461
		}                                                                                                                    // 4462
	},                                                                                                                    // 4463
                                                                                                                       // 4464
	_getParentOffset: function() {                                                                                        // 4465
                                                                                                                       // 4466
                                                                                                                       // 4467
		//Get the offsetParent and cache its position                                                                        // 4468
		this.offsetParent = this.helper.offsetParent();                                                                      // 4469
		var po = this.offsetParent.offset();                                                                                 // 4470
                                                                                                                       // 4471
		// This is a special case where we need to modify a offset calculated on start, since the following happened:        // 4472
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent     // 4473
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();                                                                          // 4477
			po.top += this.scrollParent.scrollTop();                                                                            // 4478
		}                                                                                                                    // 4479
                                                                                                                       // 4480
		if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
		|| (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie)) //Ugly IE fix  // 4482
			po = { top: 0, left: 0 };                                                                                           // 4483
                                                                                                                       // 4484
		return {                                                                                                             // 4485
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),                                          // 4486
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)                                        // 4487
		};                                                                                                                   // 4488
                                                                                                                       // 4489
	},                                                                                                                    // 4490
                                                                                                                       // 4491
	_getRelativeOffset: function() {                                                                                      // 4492
                                                                                                                       // 4493
		if(this.cssPosition == "relative") {                                                                                 // 4494
			var p = this.currentItem.position();                                                                                // 4495
			return {                                                                                                            // 4496
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),                           // 4497
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()                        // 4498
			};                                                                                                                  // 4499
		} else {                                                                                                             // 4500
			return { top: 0, left: 0 };                                                                                         // 4501
		}                                                                                                                    // 4502
                                                                                                                       // 4503
	},                                                                                                                    // 4504
                                                                                                                       // 4505
	_cacheMargins: function() {                                                                                           // 4506
		this.margins = {                                                                                                     // 4507
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),                                                       // 4508
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)                                                          // 4509
		};                                                                                                                   // 4510
	},                                                                                                                    // 4511
                                                                                                                       // 4512
	_cacheHelperProportions: function() {                                                                                 // 4513
		this.helperProportions = {                                                                                           // 4514
			width: this.helper.outerWidth(),                                                                                    // 4515
			height: this.helper.outerHeight()                                                                                   // 4516
		};                                                                                                                   // 4517
	},                                                                                                                    // 4518
                                                                                                                       // 4519
	_setContainment: function() {                                                                                         // 4520
                                                                                                                       // 4521
		var o = this.options;                                                                                                // 4522
		if(o.containment == 'parent') o.containment = this.helper[0].parentNode;                                             // 4523
		if(o.containment == 'document' || o.containment == 'window') this.containment = [                                    // 4524
			0 - this.offset.relative.left - this.offset.parent.left,                                                            // 4525
			0 - this.offset.relative.top - this.offset.parent.top,                                                              // 4526
			$(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,      // 4527
			($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
		];                                                                                                                   // 4529
                                                                                                                       // 4530
		if(!(/^(document|window|parent)$/).test(o.containment)) {                                                            // 4531
			var ce = $(o.containment)[0];                                                                                       // 4532
			var co = $(o.containment).offset();                                                                                 // 4533
			var over = ($(ce).css("overflow") != 'hidden');                                                                     // 4534
                                                                                                                       // 4535
			this.containment = [                                                                                                // 4536
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];                                                                                                                  // 4541
		}                                                                                                                    // 4542
                                                                                                                       // 4543
	},                                                                                                                    // 4544
                                                                                                                       // 4545
	_convertPositionTo: function(d, pos) {                                                                                // 4546
                                                                                                                       // 4547
		if(!pos) pos = this.position;                                                                                        // 4548
		var mod = d == "absolute" ? 1 : -1;                                                                                  // 4549
		var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                                                                                                                       // 4551
		return {                                                                                                             // 4552
			top: (                                                                                                              // 4553
				pos.top																	// The absolute mouse position                                                             // 4554
				+ this.offset.relative.top * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.top * mod											// The offsetParent's offset without borders (offset + border)            // 4556
				- ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),                                                                                                                  // 4558
			left: (                                                                                                             // 4559
				pos.left																// The absolute mouse position                                                             // 4560
				+ this.offset.relative.left * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.left * mod											// The offsetParent's offset without borders (offset + border)           // 4562
				- ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)                                                                                                                   // 4564
		};                                                                                                                   // 4565
                                                                                                                       // 4566
	},                                                                                                                    // 4567
                                                                                                                       // 4568
	_generatePosition: function(event) {                                                                                  // 4569
                                                                                                                       // 4570
		var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                                                                                                                       // 4572
		// This is another very weird special case that only happens for relative elements:                                  // 4573
		// 1. If the css position is relative                                                                                // 4574
		// 2. and the scroll parent is the document or similar to the offset parent                                          // 4575
		// we have to refresh the relative offset during the scroll so there are no jumps                                    // 4576
		if(this.cssPosition == 'relative' && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();                                                                   // 4578
		}                                                                                                                    // 4579
                                                                                                                       // 4580
		var pageX = event.pageX;                                                                                             // 4581
		var pageY = event.pageY;                                                                                             // 4582
                                                                                                                       // 4583
		/*                                                                                                                   // 4584
		 * - Position constraining -                                                                                         // 4585
		 * Constrain the position to a mix of grid, containment.                                                             // 4586
		 */                                                                                                                  // 4587
                                                                                                                       // 4588
		if(this.originalPosition) { //If we are not dragging yet, we won't check for options                                 // 4589
                                                                                                                       // 4590
			if(this.containment) {                                                                                              // 4591
				if(event.pageX - this.offset.click.left < this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
				if(event.pageY - this.offset.click.top < this.containment[1]) pageY = this.containment[1] + this.offset.click.top; // 4593
				if(event.pageX - this.offset.click.left > this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
				if(event.pageY - this.offset.click.top > this.containment[3]) pageY = this.containment[3] + this.offset.click.top; // 4595
			}                                                                                                                   // 4596
                                                                                                                       // 4597
			if(o.grid) {                                                                                                        // 4598
				var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];                   // 4599
				pageY = this.containment ? (!(top - this.offset.click.top < this.containment[1] || top - this.offset.click.top > this.containment[3]) ? top : (!(top - this.offset.click.top < this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                                                                                                                       // 4601
				var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];                  // 4602
				pageX = this.containment ? (!(left - this.offset.click.left < this.containment[0] || left - this.offset.click.left > this.containment[2]) ? left : (!(left - this.offset.click.left < this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}                                                                                                                   // 4604
                                                                                                                       // 4605
		}                                                                                                                    // 4606
                                                                                                                       // 4607
		return {                                                                                                             // 4608
			top: (                                                                                                              // 4609
				pageY																// The absolute mouse position                                                                // 4610
				- this.offset.click.top													// Click offset (relative to the element)                                      // 4611
				- this.offset.relative.top												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.top												// The offsetParent's offset without borders (offset + border)                 // 4613
				+ ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),                                                                                                                  // 4615
			left: (                                                                                                             // 4616
				pageX																// The absolute mouse position                                                                // 4617
				- this.offset.click.left												// Click offset (relative to the element)                                      // 4618
				- this.offset.relative.left												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.left												// The offsetParent's offset without borders (offset + border)                // 4620
				+ ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)                                                                                                                   // 4622
		};                                                                                                                   // 4623
                                                                                                                       // 4624
	},                                                                                                                    // 4625
                                                                                                                       // 4626
	_rearrange: function(event, i, a, hardRefresh) {                                                                      // 4627
                                                                                                                       // 4628
		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == 'down' ? i.item[0] : i.item[0].nextSibling));
                                                                                                                       // 4630
		//Various things done here to improve the performance:                                                               // 4631
		// 1. we create a setTimeout, that calls refreshPositions                                                            // 4632
		// 2. on the instance, we have a counter variable, that get's higher after every append                              // 4633
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same             // 4634
		// 4. this lets only the last addition to the timeout stack through                                                  // 4635
		this.counter = this.counter ? ++this.counter : 1;                                                                    // 4636
		var counter = this.counter;                                                                                          // 4637
                                                                                                                       // 4638
		this._delay(function() {                                                                                             // 4639
			if(counter == this.counter) this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
		});                                                                                                                  // 4641
                                                                                                                       // 4642
	},                                                                                                                    // 4643
                                                                                                                       // 4644
	_clear: function(event, noPropagation) {                                                                              // 4645
                                                                                                                       // 4646
		this.reverting = false;                                                                                              // 4647
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and       // 4648
		// everything else normalized again                                                                                  // 4649
		var delayedTriggers = [];                                                                                            // 4650
                                                                                                                       // 4651
		// We first have to update the dom position of the actual currentItem                                                // 4652
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)           // 4653
		if(!this._noFinalSort && this.currentItem.parent().length) this.placeholder.before(this.currentItem);                // 4654
		this._noFinalSort = null;                                                                                            // 4655
                                                                                                                       // 4656
		if(this.helper[0] == this.currentItem[0]) {                                                                          // 4657
			for(var i in this._storedCSS) {                                                                                     // 4658
				if(this._storedCSS[i] == 'auto' || this._storedCSS[i] == 'static') this._storedCSS[i] = '';                        // 4659
			}                                                                                                                   // 4660
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");                                            // 4661
		} else {                                                                                                             // 4662
			this.currentItem.show();                                                                                            // 4663
		}                                                                                                                    // 4664
                                                                                                                       // 4665
		if(this.fromOutside && !noPropagation) delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		if((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !noPropagation) delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
                                                                                                                       // 4668
		// Check if the items Container has Changed and trigger appropriate                                                  // 4669
		// events.                                                                                                           // 4670
		if (this !== this.currentContainer) {                                                                                // 4671
			if(!noPropagation) {                                                                                                // 4672
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });                         // 4673
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}                                                                                                                   // 4676
		}                                                                                                                    // 4677
                                                                                                                       // 4678
                                                                                                                       // 4679
		//Post events to containers                                                                                          // 4680
		for (var i = this.containers.length - 1; i >= 0; i--){                                                               // 4681
			if(!noPropagation) delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
			if(this.containers[i].containerCache.over) {                                                                        // 4683
				delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				this.containers[i].containerCache.over = 0;                                                                        // 4685
			}                                                                                                                   // 4686
		}                                                                                                                    // 4687
                                                                                                                       // 4688
		//Do what was originally in plugins                                                                                  // 4689
		if(this._storedCursor) $('body').css("cursor", this._storedCursor); //Reset cursor                                   // 4690
		if(this._storedOpacity) this.helper.css("opacity", this._storedOpacity); //Reset opacity                             // 4691
		if(this._storedZIndex) this.helper.css("zIndex", this._storedZIndex == 'auto' ? '' : this._storedZIndex); //Reset z-index
                                                                                                                       // 4693
		this.dragging = false;                                                                                               // 4694
		if(this.cancelHelperRemoval) {                                                                                       // 4695
			if(!noPropagation) {                                                                                                // 4696
				this._trigger("beforeStop", event, this._uiHash());                                                                // 4697
				for (var i=0; i < delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }; //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());                                                                      // 4699
			}                                                                                                                   // 4700
                                                                                                                       // 4701
			this.fromOutside = false;                                                                                           // 4702
			return false;                                                                                                       // 4703
		}                                                                                                                    // 4704
                                                                                                                       // 4705
		if(!noPropagation) this._trigger("beforeStop", event, this._uiHash());                                               // 4706
                                                                                                                       // 4707
		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);                                                     // 4709
                                                                                                                       // 4710
		if(this.helper[0] != this.currentItem[0]) this.helper.remove(); this.helper = null;                                  // 4711
                                                                                                                       // 4712
		if(!noPropagation) {                                                                                                 // 4713
			for (var i=0; i < delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }; //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());                                                                       // 4715
		}                                                                                                                    // 4716
                                                                                                                       // 4717
		this.fromOutside = false;                                                                                            // 4718
		return true;                                                                                                         // 4719
                                                                                                                       // 4720
	},                                                                                                                    // 4721
                                                                                                                       // 4722
	_trigger: function() {                                                                                                // 4723
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {                                                  // 4724
			this.cancel();                                                                                                      // 4725
		}                                                                                                                    // 4726
	},                                                                                                                    // 4727
                                                                                                                       // 4728
	_uiHash: function(_inst) {                                                                                            // 4729
		var inst = _inst || this;                                                                                            // 4730
		return {                                                                                                             // 4731
			helper: inst.helper,                                                                                                // 4732
			placeholder: inst.placeholder || $([]),                                                                             // 4733
			position: inst.position,                                                                                            // 4734
			originalPosition: inst.originalPosition,                                                                            // 4735
			offset: inst.positionAbs,                                                                                           // 4736
			item: inst.currentItem,                                                                                             // 4737
			sender: _inst ? _inst.element : null                                                                                // 4738
		};                                                                                                                   // 4739
	}                                                                                                                     // 4740
                                                                                                                       // 4741
});                                                                                                                    // 4742
                                                                                                                       // 4743
})(jQuery);                                                                                                            // 4744
(function( $, undefined ) {                                                                                            // 4745
                                                                                                                       // 4746
var uid = 0,                                                                                                           // 4747
	hideProps = {},                                                                                                       // 4748
	showProps = {};                                                                                                       // 4749
                                                                                                                       // 4750
hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =                                                    // 4751
	hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";                                                      // 4752
showProps.height = showProps.paddingTop = showProps.paddingBottom =                                                    // 4753
	showProps.borderTopWidth = showProps.borderBottomWidth = "show";                                                      // 4754
                                                                                                                       // 4755
$.widget( "ui.accordion", {                                                                                            // 4756
	version: "1.9.2",                                                                                                     // 4757
	options: {                                                                                                            // 4758
		active: 0,                                                                                                           // 4759
		animate: {},                                                                                                         // 4760
		collapsible: false,                                                                                                  // 4761
		event: "click",                                                                                                      // 4762
		header: "> li > :first-child,> :not(li):even",                                                                       // 4763
		heightStyle: "auto",                                                                                                 // 4764
		icons: {                                                                                                             // 4765
			activeHeader: "ui-icon-triangle-1-s",                                                                               // 4766
			header: "ui-icon-triangle-1-e"                                                                                      // 4767
		},                                                                                                                   // 4768
                                                                                                                       // 4769
		// callbacks                                                                                                         // 4770
		activate: null,                                                                                                      // 4771
		beforeActivate: null                                                                                                 // 4772
	},                                                                                                                    // 4773
                                                                                                                       // 4774
	_create: function() {                                                                                                 // 4775
		var accordionId = this.accordionId = "ui-accordion-" +                                                               // 4776
				(this.element.attr( "id" ) || ++uid),                                                                              // 4777
			options = this.options;                                                                                             // 4778
                                                                                                                       // 4779
		this.prevShow = this.prevHide = $();                                                                                 // 4780
		this.element.addClass( "ui-accordion ui-widget ui-helper-reset" );                                                   // 4781
                                                                                                                       // 4782
		this.headers = this.element.find( options.header )                                                                   // 4783
			.addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );                                  // 4784
		this._hoverable( this.headers );                                                                                     // 4785
		this._focusable( this.headers );                                                                                     // 4786
                                                                                                                       // 4787
		this.headers.next()                                                                                                  // 4788
			.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )                              // 4789
			.hide();                                                                                                            // 4790
                                                                                                                       // 4791
		// don't allow collapsible: false and active: false / null                                                           // 4792
		if ( !options.collapsible && (options.active === false || options.active == null) ) {                                // 4793
			options.active = 0;                                                                                                 // 4794
		}                                                                                                                    // 4795
		// handle negative values                                                                                            // 4796
		if ( options.active < 0 ) {                                                                                          // 4797
			options.active += this.headers.length;                                                                              // 4798
		}                                                                                                                    // 4799
		this.active = this._findActive( options.active )                                                                     // 4800
			.addClass( "ui-accordion-header-active ui-state-active" )                                                           // 4801
			.toggleClass( "ui-corner-all ui-corner-top" );                                                                      // 4802
		this.active.next()                                                                                                   // 4803
			.addClass( "ui-accordion-content-active" )                                                                          // 4804
			.show();                                                                                                            // 4805
                                                                                                                       // 4806
		this._createIcons();                                                                                                 // 4807
		this.refresh();                                                                                                      // 4808
                                                                                                                       // 4809
		// ARIA                                                                                                              // 4810
		this.element.attr( "role", "tablist" );                                                                              // 4811
                                                                                                                       // 4812
		this.headers                                                                                                         // 4813
			.attr( "role", "tab" )                                                                                              // 4814
			.each(function( i ) {                                                                                               // 4815
				var header = $( this ),                                                                                            // 4816
					headerId = header.attr( "id" ),                                                                                   // 4817
					panel = header.next(),                                                                                            // 4818
					panelId = panel.attr( "id" );                                                                                     // 4819
				if ( !headerId ) {                                                                                                 // 4820
					headerId = accordionId + "-header-" + i;                                                                          // 4821
					header.attr( "id", headerId );                                                                                    // 4822
				}                                                                                                                  // 4823
				if ( !panelId ) {                                                                                                  // 4824
					panelId = accordionId + "-panel-" + i;                                                                            // 4825
					panel.attr( "id", panelId );                                                                                      // 4826
				}                                                                                                                  // 4827
				header.attr( "aria-controls", panelId );                                                                           // 4828
				panel.attr( "aria-labelledby", headerId );                                                                         // 4829
			})                                                                                                                  // 4830
			.next()                                                                                                             // 4831
				.attr( "role", "tabpanel" );                                                                                       // 4832
                                                                                                                       // 4833
		this.headers                                                                                                         // 4834
			.not( this.active )                                                                                                 // 4835
			.attr({                                                                                                             // 4836
				"aria-selected": "false",                                                                                          // 4837
				tabIndex: -1                                                                                                       // 4838
			})                                                                                                                  // 4839
			.next()                                                                                                             // 4840
				.attr({                                                                                                            // 4841
					"aria-expanded": "false",                                                                                         // 4842
					"aria-hidden": "true"                                                                                             // 4843
				})                                                                                                                 // 4844
				.hide();                                                                                                           // 4845
                                                                                                                       // 4846
		// make sure at least one header is in the tab order                                                                 // 4847
		if ( !this.active.length ) {                                                                                         // 4848
			this.headers.eq( 0 ).attr( "tabIndex", 0 );                                                                         // 4849
		} else {                                                                                                             // 4850
			this.active.attr({                                                                                                  // 4851
				"aria-selected": "true",                                                                                           // 4852
				tabIndex: 0                                                                                                        // 4853
			})                                                                                                                  // 4854
			.next()                                                                                                             // 4855
				.attr({                                                                                                            // 4856
					"aria-expanded": "true",                                                                                          // 4857
					"aria-hidden": "false"                                                                                            // 4858
				});                                                                                                                // 4859
		}                                                                                                                    // 4860
                                                                                                                       // 4861
		this._on( this.headers, { keydown: "_keydown" });                                                                    // 4862
		this._on( this.headers.next(), { keydown: "_panelKeyDown" });                                                        // 4863
		this._setupEvents( options.event );                                                                                  // 4864
	},                                                                                                                    // 4865
                                                                                                                       // 4866
	_getCreateEventData: function() {                                                                                     // 4867
		return {                                                                                                             // 4868
			header: this.active,                                                                                                // 4869
			content: !this.active.length ? $() : this.active.next()                                                             // 4870
		};                                                                                                                   // 4871
	},                                                                                                                    // 4872
                                                                                                                       // 4873
	_createIcons: function() {                                                                                            // 4874
		var icons = this.options.icons;                                                                                      // 4875
		if ( icons ) {                                                                                                       // 4876
			$( "<span>" )                                                                                                       // 4877
				.addClass( "ui-accordion-header-icon ui-icon " + icons.header )                                                    // 4878
				.prependTo( this.headers );                                                                                        // 4879
			this.active.children( ".ui-accordion-header-icon" )                                                                 // 4880
				.removeClass( icons.header )                                                                                       // 4881
				.addClass( icons.activeHeader );                                                                                   // 4882
			this.headers.addClass( "ui-accordion-icons" );                                                                      // 4883
		}                                                                                                                    // 4884
	},                                                                                                                    // 4885
                                                                                                                       // 4886
	_destroyIcons: function() {                                                                                           // 4887
		this.headers                                                                                                         // 4888
			.removeClass( "ui-accordion-icons" )                                                                                // 4889
			.children( ".ui-accordion-header-icon" )                                                                            // 4890
				.remove();                                                                                                         // 4891
	},                                                                                                                    // 4892
                                                                                                                       // 4893
	_destroy: function() {                                                                                                // 4894
		var contents;                                                                                                        // 4895
                                                                                                                       // 4896
		// clean up main element                                                                                             // 4897
		this.element                                                                                                         // 4898
			.removeClass( "ui-accordion ui-widget ui-helper-reset" )                                                            // 4899
			.removeAttr( "role" );                                                                                              // 4900
                                                                                                                       // 4901
		// clean up headers                                                                                                  // 4902
		this.headers                                                                                                         // 4903
			.removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
			.removeAttr( "role" )                                                                                               // 4905
			.removeAttr( "aria-selected" )                                                                                      // 4906
			.removeAttr( "aria-controls" )                                                                                      // 4907
			.removeAttr( "tabIndex" )                                                                                           // 4908
			.each(function() {                                                                                                  // 4909
				if ( /^ui-accordion/.test( this.id ) ) {                                                                           // 4910
					this.removeAttribute( "id" );                                                                                     // 4911
				}                                                                                                                  // 4912
			});                                                                                                                 // 4913
		this._destroyIcons();                                                                                                // 4914
                                                                                                                       // 4915
		// clean up content panels                                                                                           // 4916
		contents = this.headers.next()                                                                                       // 4917
			.css( "display", "" )                                                                                               // 4918
			.removeAttr( "role" )                                                                                               // 4919
			.removeAttr( "aria-expanded" )                                                                                      // 4920
			.removeAttr( "aria-hidden" )                                                                                        // 4921
			.removeAttr( "aria-labelledby" )                                                                                    // 4922
			.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
			.each(function() {                                                                                                  // 4924
				if ( /^ui-accordion/.test( this.id ) ) {                                                                           // 4925
					this.removeAttribute( "id" );                                                                                     // 4926
				}                                                                                                                  // 4927
			});                                                                                                                 // 4928
		if ( this.options.heightStyle !== "content" ) {                                                                      // 4929
			contents.css( "height", "" );                                                                                       // 4930
		}                                                                                                                    // 4931
	},                                                                                                                    // 4932
                                                                                                                       // 4933
	_setOption: function( key, value ) {                                                                                  // 4934
		if ( key === "active" ) {                                                                                            // 4935
			// _activate() will handle invalid values and update this.options                                                   // 4936
			this._activate( value );                                                                                            // 4937
			return;                                                                                                             // 4938
		}                                                                                                                    // 4939
                                                                                                                       // 4940
		if ( key === "event" ) {                                                                                             // 4941
			if ( this.options.event ) {                                                                                         // 4942
				this._off( this.headers, this.options.event );                                                                     // 4943
			}                                                                                                                   // 4944
			this._setupEvents( value );                                                                                         // 4945
		}                                                                                                                    // 4946
                                                                                                                       // 4947
		this._super( key, value );                                                                                           // 4948
                                                                                                                       // 4949
		// setting collapsible: false while collapsed; open first panel                                                      // 4950
		if ( key === "collapsible" && !value && this.options.active === false ) {                                            // 4951
			this._activate( 0 );                                                                                                // 4952
		}                                                                                                                    // 4953
                                                                                                                       // 4954
		if ( key === "icons" ) {                                                                                             // 4955
			this._destroyIcons();                                                                                               // 4956
			if ( value ) {                                                                                                      // 4957
				this._createIcons();                                                                                               // 4958
			}                                                                                                                   // 4959
		}                                                                                                                    // 4960
                                                                                                                       // 4961
		// #5332 - opacity doesn't cascade to positioned elements in IE                                                      // 4962
		// so we need to add the disabled class to the headers and panels                                                    // 4963
		if ( key === "disabled" ) {                                                                                          // 4964
			this.headers.add( this.headers.next() )                                                                             // 4965
				.toggleClass( "ui-state-disabled", !!value );                                                                      // 4966
		}                                                                                                                    // 4967
	},                                                                                                                    // 4968
                                                                                                                       // 4969
	_keydown: function( event ) {                                                                                         // 4970
		if ( event.altKey || event.ctrlKey ) {                                                                               // 4971
			return;                                                                                                             // 4972
		}                                                                                                                    // 4973
                                                                                                                       // 4974
		var keyCode = $.ui.keyCode,                                                                                          // 4975
			length = this.headers.length,                                                                                       // 4976
			currentIndex = this.headers.index( event.target ),                                                                  // 4977
			toFocus = false;                                                                                                    // 4978
                                                                                                                       // 4979
		switch ( event.keyCode ) {                                                                                           // 4980
			case keyCode.RIGHT:                                                                                                 // 4981
			case keyCode.DOWN:                                                                                                  // 4982
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];                                                           // 4983
				break;                                                                                                             // 4984
			case keyCode.LEFT:                                                                                                  // 4985
			case keyCode.UP:                                                                                                    // 4986
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];                                                  // 4987
				break;                                                                                                             // 4988
			case keyCode.SPACE:                                                                                                 // 4989
			case keyCode.ENTER:                                                                                                 // 4990
				this._eventHandler( event );                                                                                       // 4991
				break;                                                                                                             // 4992
			case keyCode.HOME:                                                                                                  // 4993
				toFocus = this.headers[ 0 ];                                                                                       // 4994
				break;                                                                                                             // 4995
			case keyCode.END:                                                                                                   // 4996
				toFocus = this.headers[ length - 1 ];                                                                              // 4997
				break;                                                                                                             // 4998
		}                                                                                                                    // 4999
                                                                                                                       // 5000
		if ( toFocus ) {                                                                                                     // 5001
			$( event.target ).attr( "tabIndex", -1 );                                                                           // 5002
			$( toFocus ).attr( "tabIndex", 0 );                                                                                 // 5003
			toFocus.focus();                                                                                                    // 5004
			event.preventDefault();                                                                                             // 5005
		}                                                                                                                    // 5006
	},                                                                                                                    // 5007
                                                                                                                       // 5008
	_panelKeyDown : function( event ) {                                                                                   // 5009
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {                                                          // 5010
			$( event.currentTarget ).prev().focus();                                                                            // 5011
		}                                                                                                                    // 5012
	},                                                                                                                    // 5013
                                                                                                                       // 5014
	refresh: function() {                                                                                                 // 5015
		var maxHeight, overflow,                                                                                             // 5016
			heightStyle = this.options.heightStyle,                                                                             // 5017
			parent = this.element.parent();                                                                                     // 5018
                                                                                                                       // 5019
                                                                                                                       // 5020
		if ( heightStyle === "fill" ) {                                                                                      // 5021
			// IE 6 treats height like minHeight, so we need to turn off overflow                                               // 5022
			// in order to get a reliable height                                                                                // 5023
			// we use the minHeight support test because we assume that only                                                    // 5024
			// browsers that don't support minHeight will treat height as minHeight                                             // 5025
			if ( !$.support.minHeight ) {                                                                                       // 5026
				overflow = parent.css( "overflow" );                                                                               // 5027
				parent.css( "overflow", "hidden");                                                                                 // 5028
			}                                                                                                                   // 5029
			maxHeight = parent.height();                                                                                        // 5030
			this.element.siblings( ":visible" ).each(function() {                                                               // 5031
				var elem = $( this ),                                                                                              // 5032
					position = elem.css( "position" );                                                                                // 5033
                                                                                                                       // 5034
				if ( position === "absolute" || position === "fixed" ) {                                                           // 5035
					return;                                                                                                           // 5036
				}                                                                                                                  // 5037
				maxHeight -= elem.outerHeight( true );                                                                             // 5038
			});                                                                                                                 // 5039
			if ( overflow ) {                                                                                                   // 5040
				parent.css( "overflow", overflow );                                                                                // 5041
			}                                                                                                                   // 5042
                                                                                                                       // 5043
			this.headers.each(function() {                                                                                      // 5044
				maxHeight -= $( this ).outerHeight( true );                                                                        // 5045
			});                                                                                                                 // 5046
                                                                                                                       // 5047
			this.headers.next()                                                                                                 // 5048
				.each(function() {                                                                                                 // 5049
					$( this ).height( Math.max( 0, maxHeight -                                                                        // 5050
						$( this ).innerHeight() + $( this ).height() ) );                                                                // 5051
				})                                                                                                                 // 5052
				.css( "overflow", "auto" );                                                                                        // 5053
		} else if ( heightStyle === "auto" ) {                                                                               // 5054
			maxHeight = 0;                                                                                                      // 5055
			this.headers.next()                                                                                                 // 5056
				.each(function() {                                                                                                 // 5057
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );                                        // 5058
				})                                                                                                                 // 5059
				.height( maxHeight );                                                                                              // 5060
		}                                                                                                                    // 5061
	},                                                                                                                    // 5062
                                                                                                                       // 5063
	_activate: function( index ) {                                                                                        // 5064
		var active = this._findActive( index )[ 0 ];                                                                         // 5065
                                                                                                                       // 5066
		// trying to activate the already active panel                                                                       // 5067
		if ( active === this.active[ 0 ] ) {                                                                                 // 5068
			return;                                                                                                             // 5069
		}                                                                                                                    // 5070
                                                                                                                       // 5071
		// trying to collapse, simulate a click on the currently active header                                               // 5072
		active = active || this.active[ 0 ];                                                                                 // 5073
                                                                                                                       // 5074
		this._eventHandler({                                                                                                 // 5075
			target: active,                                                                                                     // 5076
			currentTarget: active,                                                                                              // 5077
			preventDefault: $.noop                                                                                              // 5078
		});                                                                                                                  // 5079
	},                                                                                                                    // 5080
                                                                                                                       // 5081
	_findActive: function( selector ) {                                                                                   // 5082
		return typeof selector === "number" ? this.headers.eq( selector ) : $();                                             // 5083
	},                                                                                                                    // 5084
                                                                                                                       // 5085
	_setupEvents: function( event ) {                                                                                     // 5086
		var events = {};                                                                                                     // 5087
		if ( !event ) {                                                                                                      // 5088
			return;                                                                                                             // 5089
		}                                                                                                                    // 5090
		$.each( event.split(" "), function( index, eventName ) {                                                             // 5091
			events[ eventName ] = "_eventHandler";                                                                              // 5092
		});                                                                                                                  // 5093
		this._on( this.headers, events );                                                                                    // 5094
	},                                                                                                                    // 5095
                                                                                                                       // 5096
	_eventHandler: function( event ) {                                                                                    // 5097
		var options = this.options,                                                                                          // 5098
			active = this.active,                                                                                               // 5099
			clicked = $( event.currentTarget ),                                                                                 // 5100
			clickedIsActive = clicked[ 0 ] === active[ 0 ],                                                                     // 5101
			collapsing = clickedIsActive && options.collapsible,                                                                // 5102
			toShow = collapsing ? $() : clicked.next(),                                                                         // 5103
			toHide = active.next(),                                                                                             // 5104
			eventData = {                                                                                                       // 5105
				oldHeader: active,                                                                                                 // 5106
				oldPanel: toHide,                                                                                                  // 5107
				newHeader: collapsing ? $() : clicked,                                                                             // 5108
				newPanel: toShow                                                                                                   // 5109
			};                                                                                                                  // 5110
                                                                                                                       // 5111
		event.preventDefault();                                                                                              // 5112
                                                                                                                       // 5113
		if (                                                                                                                 // 5114
				// click on active header, but not collapsible                                                                     // 5115
				( clickedIsActive && !options.collapsible ) ||                                                                     // 5116
				// allow canceling activation                                                                                      // 5117
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {                                              // 5118
			return;                                                                                                             // 5119
		}                                                                                                                    // 5120
                                                                                                                       // 5121
		options.active = collapsing ? false : this.headers.index( clicked );                                                 // 5122
                                                                                                                       // 5123
		// when the call to ._toggle() comes after the class changes                                                         // 5124
		// it causes a very odd bug in IE 8 (see #6720)                                                                      // 5125
		this.active = clickedIsActive ? $() : clicked;                                                                       // 5126
		this._toggle( eventData );                                                                                           // 5127
                                                                                                                       // 5128
		// switch classes                                                                                                    // 5129
		// corner classes on the previously active header stay after the animation                                           // 5130
		active.removeClass( "ui-accordion-header-active ui-state-active" );                                                  // 5131
		if ( options.icons ) {                                                                                               // 5132
			active.children( ".ui-accordion-header-icon" )                                                                      // 5133
				.removeClass( options.icons.activeHeader )                                                                         // 5134
				.addClass( options.icons.header );                                                                                 // 5135
		}                                                                                                                    // 5136
                                                                                                                       // 5137
		if ( !clickedIsActive ) {                                                                                            // 5138
			clicked                                                                                                             // 5139
				.removeClass( "ui-corner-all" )                                                                                    // 5140
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );                                           // 5141
			if ( options.icons ) {                                                                                              // 5142
				clicked.children( ".ui-accordion-header-icon" )                                                                    // 5143
					.removeClass( options.icons.header )                                                                              // 5144
					.addClass( options.icons.activeHeader );                                                                          // 5145
			}                                                                                                                   // 5146
                                                                                                                       // 5147
			clicked                                                                                                             // 5148
				.next()                                                                                                            // 5149
				.addClass( "ui-accordion-content-active" );                                                                        // 5150
		}                                                                                                                    // 5151
	},                                                                                                                    // 5152
                                                                                                                       // 5153
	_toggle: function( data ) {                                                                                           // 5154
		var toShow = data.newPanel,                                                                                          // 5155
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;                                                      // 5156
                                                                                                                       // 5157
		// handle activating a panel during the animation for another activation                                             // 5158
		this.prevShow.add( this.prevHide ).stop( true, true );                                                               // 5159
		this.prevShow = toShow;                                                                                              // 5160
		this.prevHide = toHide;                                                                                              // 5161
                                                                                                                       // 5162
		if ( this.options.animate ) {                                                                                        // 5163
			this._animate( toShow, toHide, data );                                                                              // 5164
		} else {                                                                                                             // 5165
			toHide.hide();                                                                                                      // 5166
			toShow.show();                                                                                                      // 5167
			this._toggleComplete( data );                                                                                       // 5168
		}                                                                                                                    // 5169
                                                                                                                       // 5170
		toHide.attr({                                                                                                        // 5171
			"aria-expanded": "false",                                                                                           // 5172
			"aria-hidden": "true"                                                                                               // 5173
		});                                                                                                                  // 5174
		toHide.prev().attr( "aria-selected", "false" );                                                                      // 5175
		// if we're switching panels, remove the old header from the tab order                                               // 5176
		// if we're opening from collapsed state, remove the previous header from the tab order                              // 5177
		// if we're collapsing, then keep the collapsing header in the tab order                                             // 5178
		if ( toShow.length && toHide.length ) {                                                                              // 5179
			toHide.prev().attr( "tabIndex", -1 );                                                                               // 5180
		} else if ( toShow.length ) {                                                                                        // 5181
			this.headers.filter(function() {                                                                                    // 5182
				return $( this ).attr( "tabIndex" ) === 0;                                                                         // 5183
			})                                                                                                                  // 5184
			.attr( "tabIndex", -1 );                                                                                            // 5185
		}                                                                                                                    // 5186
                                                                                                                       // 5187
		toShow                                                                                                               // 5188
			.attr({                                                                                                             // 5189
				"aria-expanded": "true",                                                                                           // 5190
				"aria-hidden": "false"                                                                                             // 5191
			})                                                                                                                  // 5192
			.prev()                                                                                                             // 5193
				.attr({                                                                                                            // 5194
					"aria-selected": "true",                                                                                          // 5195
					tabIndex: 0                                                                                                       // 5196
				});                                                                                                                // 5197
	},                                                                                                                    // 5198
                                                                                                                       // 5199
	_animate: function( toShow, toHide, data ) {                                                                          // 5200
		var total, easing, duration,                                                                                         // 5201
			that = this,                                                                                                        // 5202
			adjust = 0,                                                                                                         // 5203
			down = toShow.length &&                                                                                             // 5204
				( !toHide.length || ( toShow.index() < toHide.index() ) ),                                                         // 5205
			animate = this.options.animate || {},                                                                               // 5206
			options = down && animate.down || animate,                                                                          // 5207
			complete = function() {                                                                                             // 5208
				that._toggleComplete( data );                                                                                      // 5209
			};                                                                                                                  // 5210
                                                                                                                       // 5211
		if ( typeof options === "number" ) {                                                                                 // 5212
			duration = options;                                                                                                 // 5213
		}                                                                                                                    // 5214
		if ( typeof options === "string" ) {                                                                                 // 5215
			easing = options;                                                                                                   // 5216
		}                                                                                                                    // 5217
		// fall back from options to animation in case of partial down settings                                              // 5218
		easing = easing || options.easing || animate.easing;                                                                 // 5219
		duration = duration || options.duration || animate.duration;                                                         // 5220
                                                                                                                       // 5221
		if ( !toHide.length ) {                                                                                              // 5222
			return toShow.animate( showProps, duration, easing, complete );                                                     // 5223
		}                                                                                                                    // 5224
		if ( !toShow.length ) {                                                                                              // 5225
			return toHide.animate( hideProps, duration, easing, complete );                                                     // 5226
		}                                                                                                                    // 5227
                                                                                                                       // 5228
		total = toShow.show().outerHeight();                                                                                 // 5229
		toHide.animate( hideProps, {                                                                                         // 5230
			duration: duration,                                                                                                 // 5231
			easing: easing,                                                                                                     // 5232
			step: function( now, fx ) {                                                                                         // 5233
				fx.now = Math.round( now );                                                                                        // 5234
			}                                                                                                                   // 5235
		});                                                                                                                  // 5236
		toShow                                                                                                               // 5237
			.hide()                                                                                                             // 5238
			.animate( showProps, {                                                                                              // 5239
				duration: duration,                                                                                                // 5240
				easing: easing,                                                                                                    // 5241
				complete: complete,                                                                                                // 5242
				step: function( now, fx ) {                                                                                        // 5243
					fx.now = Math.round( now );                                                                                       // 5244
					if ( fx.prop !== "height" ) {                                                                                     // 5245
						adjust += fx.now;                                                                                                // 5246
					} else if ( that.options.heightStyle !== "content" ) {                                                            // 5247
						fx.now = Math.round( total - toHide.outerHeight() - adjust );                                                    // 5248
						adjust = 0;                                                                                                      // 5249
					}                                                                                                                 // 5250
				}                                                                                                                  // 5251
			});                                                                                                                 // 5252
	},                                                                                                                    // 5253
                                                                                                                       // 5254
	_toggleComplete: function( data ) {                                                                                   // 5255
		var toHide = data.oldPanel;                                                                                          // 5256
                                                                                                                       // 5257
		toHide                                                                                                               // 5258
			.removeClass( "ui-accordion-content-active" )                                                                       // 5259
			.prev()                                                                                                             // 5260
				.removeClass( "ui-corner-top" )                                                                                    // 5261
				.addClass( "ui-corner-all" );                                                                                      // 5262
                                                                                                                       // 5263
		// Work around for rendering bug in IE (#5421)                                                                       // 5264
		if ( toHide.length ) {                                                                                               // 5265
			toHide.parent()[0].className = toHide.parent()[0].className;                                                        // 5266
		}                                                                                                                    // 5267
                                                                                                                       // 5268
		this._trigger( "activate", null, data );                                                                             // 5269
	}                                                                                                                     // 5270
});                                                                                                                    // 5271
                                                                                                                       // 5272
                                                                                                                       // 5273
                                                                                                                       // 5274
// DEPRECATED                                                                                                          // 5275
if ( $.uiBackCompat !== false ) {                                                                                      // 5276
	// navigation options                                                                                                 // 5277
	(function( $, prototype ) {                                                                                           // 5278
		$.extend( prototype.options, {                                                                                       // 5279
			navigation: false,                                                                                                  // 5280
			navigationFilter: function() {                                                                                      // 5281
				return this.href.toLowerCase() === location.href.toLowerCase();                                                    // 5282
			}                                                                                                                   // 5283
		});                                                                                                                  // 5284
                                                                                                                       // 5285
		var _create = prototype._create;                                                                                     // 5286
		prototype._create = function() {                                                                                     // 5287
			if ( this.options.navigation ) {                                                                                    // 5288
				var that = this,                                                                                                   // 5289
					headers = this.element.find( this.options.header ),                                                               // 5290
					content = headers.next(),                                                                                         // 5291
					current = headers.add( content )                                                                                  // 5292
						.find( "a" )                                                                                                     // 5293
						.filter( this.options.navigationFilter )                                                                         // 5294
						[ 0 ];                                                                                                           // 5295
				if ( current ) {                                                                                                   // 5296
					headers.add( content ).each( function( index ) {                                                                  // 5297
						if ( $.contains( this, current ) ) {                                                                             // 5298
							that.options.active = Math.floor( index / 2 );                                                                  // 5299
							return false;                                                                                                   // 5300
						}                                                                                                                // 5301
					});                                                                                                               // 5302
				}                                                                                                                  // 5303
			}                                                                                                                   // 5304
			_create.call( this );                                                                                               // 5305
		};                                                                                                                   // 5306
	}( jQuery, jQuery.ui.accordion.prototype ) );                                                                         // 5307
                                                                                                                       // 5308
	// height options                                                                                                     // 5309
	(function( $, prototype ) {                                                                                           // 5310
		$.extend( prototype.options, {                                                                                       // 5311
			heightStyle: null, // remove default so we fall back to old values                                                  // 5312
			autoHeight: true, // use heightStyle: "auto"                                                                        // 5313
			clearStyle: false, // use heightStyle: "content"                                                                    // 5314
			fillSpace: false // use heightStyle: "fill"                                                                         // 5315
		});                                                                                                                  // 5316
                                                                                                                       // 5317
		var _create = prototype._create,                                                                                     // 5318
			_setOption = prototype._setOption;                                                                                  // 5319
                                                                                                                       // 5320
		$.extend( prototype, {                                                                                               // 5321
			_create: function() {                                                                                               // 5322
				this.options.heightStyle = this.options.heightStyle ||                                                             // 5323
					this._mergeHeightStyle();                                                                                         // 5324
                                                                                                                       // 5325
				_create.call( this );                                                                                              // 5326
			},                                                                                                                  // 5327
                                                                                                                       // 5328
			_setOption: function( key ) {                                                                                       // 5329
				if ( key === "autoHeight" || key === "clearStyle" || key === "fillSpace" ) {                                       // 5330
					this.options.heightStyle = this._mergeHeightStyle();                                                              // 5331
				}                                                                                                                  // 5332
				_setOption.apply( this, arguments );                                                                               // 5333
			},                                                                                                                  // 5334
                                                                                                                       // 5335
			_mergeHeightStyle: function() {                                                                                     // 5336
				var options = this.options;                                                                                        // 5337
                                                                                                                       // 5338
				if ( options.fillSpace ) {                                                                                         // 5339
					return "fill";                                                                                                    // 5340
				}                                                                                                                  // 5341
                                                                                                                       // 5342
				if ( options.clearStyle ) {                                                                                        // 5343
					return "content";                                                                                                 // 5344
				}                                                                                                                  // 5345
                                                                                                                       // 5346
				if ( options.autoHeight ) {                                                                                        // 5347
					return "auto";                                                                                                    // 5348
				}                                                                                                                  // 5349
			}                                                                                                                   // 5350
		});                                                                                                                  // 5351
	}( jQuery, jQuery.ui.accordion.prototype ) );                                                                         // 5352
                                                                                                                       // 5353
	// icon options                                                                                                       // 5354
	(function( $, prototype ) {                                                                                           // 5355
		$.extend( prototype.options.icons, {                                                                                 // 5356
			activeHeader: null, // remove default so we fall back to old values                                                 // 5357
			headerSelected: "ui-icon-triangle-1-s"                                                                              // 5358
		});                                                                                                                  // 5359
                                                                                                                       // 5360
		var _createIcons = prototype._createIcons;                                                                           // 5361
		prototype._createIcons = function() {                                                                                // 5362
			if ( this.options.icons ) {                                                                                         // 5363
				this.options.icons.activeHeader = this.options.icons.activeHeader ||                                               // 5364
					this.options.icons.headerSelected;                                                                                // 5365
			}                                                                                                                   // 5366
			_createIcons.call( this );                                                                                          // 5367
		};                                                                                                                   // 5368
	}( jQuery, jQuery.ui.accordion.prototype ) );                                                                         // 5369
                                                                                                                       // 5370
	// expanded active option, activate method                                                                            // 5371
	(function( $, prototype ) {                                                                                           // 5372
		prototype.activate = prototype._activate;                                                                            // 5373
                                                                                                                       // 5374
		var _findActive = prototype._findActive;                                                                             // 5375
		prototype._findActive = function( index ) {                                                                          // 5376
			if ( index === -1 ) {                                                                                               // 5377
				index = false;                                                                                                     // 5378
			}                                                                                                                   // 5379
			if ( index && typeof index !== "number" ) {                                                                         // 5380
				index = this.headers.index( this.headers.filter( index ) );                                                        // 5381
				if ( index === -1 ) {                                                                                              // 5382
					index = false;                                                                                                    // 5383
				}                                                                                                                  // 5384
			}                                                                                                                   // 5385
			return _findActive.call( this, index );                                                                             // 5386
		};                                                                                                                   // 5387
	}( jQuery, jQuery.ui.accordion.prototype ) );                                                                         // 5388
                                                                                                                       // 5389
	// resize method                                                                                                      // 5390
	jQuery.ui.accordion.prototype.resize = jQuery.ui.accordion.prototype.refresh;                                         // 5391
                                                                                                                       // 5392
	// change events                                                                                                      // 5393
	(function( $, prototype ) {                                                                                           // 5394
		$.extend( prototype.options, {                                                                                       // 5395
			change: null,                                                                                                       // 5396
			changestart: null                                                                                                   // 5397
		});                                                                                                                  // 5398
                                                                                                                       // 5399
		var _trigger = prototype._trigger;                                                                                   // 5400
		prototype._trigger = function( type, event, data ) {                                                                 // 5401
			var ret = _trigger.apply( this, arguments );                                                                        // 5402
			if ( !ret ) {                                                                                                       // 5403
				return false;                                                                                                      // 5404
			}                                                                                                                   // 5405
                                                                                                                       // 5406
			if ( type === "beforeActivate" ) {                                                                                  // 5407
				ret = _trigger.call( this, "changestart", event, {                                                                 // 5408
					oldHeader: data.oldHeader,                                                                                        // 5409
					oldContent: data.oldPanel,                                                                                        // 5410
					newHeader: data.newHeader,                                                                                        // 5411
					newContent: data.newPanel                                                                                         // 5412
				});                                                                                                                // 5413
			} else if ( type === "activate" ) {                                                                                 // 5414
				ret = _trigger.call( this, "change", event, {                                                                      // 5415
					oldHeader: data.oldHeader,                                                                                        // 5416
					oldContent: data.oldPanel,                                                                                        // 5417
					newHeader: data.newHeader,                                                                                        // 5418
					newContent: data.newPanel                                                                                         // 5419
				});                                                                                                                // 5420
			}                                                                                                                   // 5421
			return ret;                                                                                                         // 5422
		};                                                                                                                   // 5423
	}( jQuery, jQuery.ui.accordion.prototype ) );                                                                         // 5424
                                                                                                                       // 5425
	// animated option                                                                                                    // 5426
	// NOTE: this only provides support for "slide", "bounceslide", and easings                                           // 5427
	// not the full $.ui.accordion.animations API                                                                         // 5428
	(function( $, prototype ) {                                                                                           // 5429
		$.extend( prototype.options, {                                                                                       // 5430
			animate: null,                                                                                                      // 5431
			animated: "slide"                                                                                                   // 5432
		});                                                                                                                  // 5433
                                                                                                                       // 5434
		var _create = prototype._create;                                                                                     // 5435
		prototype._create = function() {                                                                                     // 5436
			var options = this.options;                                                                                         // 5437
			if ( options.animate === null ) {                                                                                   // 5438
				if ( !options.animated ) {                                                                                         // 5439
					options.animate = false;                                                                                          // 5440
				} else if ( options.animated === "slide" ) {                                                                       // 5441
					options.animate = 300;                                                                                            // 5442
				} else if ( options.animated === "bounceslide" ) {                                                                 // 5443
					options.animate = {                                                                                               // 5444
						duration: 200,                                                                                                   // 5445
						down: {                                                                                                          // 5446
							easing: "easeOutBounce",                                                                                        // 5447
							duration: 1000                                                                                                  // 5448
						}                                                                                                                // 5449
					};                                                                                                                // 5450
				} else {                                                                                                           // 5451
					options.animate = options.animated;                                                                               // 5452
				}                                                                                                                  // 5453
			}                                                                                                                   // 5454
                                                                                                                       // 5455
			_create.call( this );                                                                                               // 5456
		};                                                                                                                   // 5457
	}( jQuery, jQuery.ui.accordion.prototype ) );                                                                         // 5458
}                                                                                                                      // 5459
                                                                                                                       // 5460
})( jQuery );                                                                                                          // 5461
(function( $, undefined ) {                                                                                            // 5462
                                                                                                                       // 5463
// used to prevent race conditions with remote data sources                                                            // 5464
var requestIndex = 0;                                                                                                  // 5465
                                                                                                                       // 5466
$.widget( "ui.autocomplete", {                                                                                         // 5467
	version: "1.9.2",                                                                                                     // 5468
	defaultElement: "<input>",                                                                                            // 5469
	options: {                                                                                                            // 5470
		appendTo: "body",                                                                                                    // 5471
		autoFocus: false,                                                                                                    // 5472
		delay: 300,                                                                                                          // 5473
		minLength: 1,                                                                                                        // 5474
		position: {                                                                                                          // 5475
			my: "left top",                                                                                                     // 5476
			at: "left bottom",                                                                                                  // 5477
			collision: "none"                                                                                                   // 5478
		},                                                                                                                   // 5479
		source: null,                                                                                                        // 5480
                                                                                                                       // 5481
		// callbacks                                                                                                         // 5482
		change: null,                                                                                                        // 5483
		close: null,                                                                                                         // 5484
		focus: null,                                                                                                         // 5485
		open: null,                                                                                                          // 5486
		response: null,                                                                                                      // 5487
		search: null,                                                                                                        // 5488
		select: null                                                                                                         // 5489
	},                                                                                                                    // 5490
                                                                                                                       // 5491
	pending: 0,                                                                                                           // 5492
                                                                                                                       // 5493
	_create: function() {                                                                                                 // 5494
		// Some browsers only repeat keydown events, not keypress events,                                                    // 5495
		// so we use the suppressKeyPress flag to determine if we've already                                                 // 5496
		// handled the keydown event. #7269                                                                                  // 5497
		// Unfortunately the code for & in keypress is the same as the up arrow,                                             // 5498
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress                                              // 5499
		// events when we know the keydown event was used to modify the                                                      // 5500
		// search term. #7799                                                                                                // 5501
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput;                                                         // 5502
                                                                                                                       // 5503
		this.isMultiLine = this._isMultiLine();                                                                              // 5504
		this.valueMethod = this.element[ this.element.is( "input,textarea" ) ? "val" : "text" ];                             // 5505
		this.isNewMenu = true;                                                                                               // 5506
                                                                                                                       // 5507
		this.element                                                                                                         // 5508
			.addClass( "ui-autocomplete-input" )                                                                                // 5509
			.attr( "autocomplete", "off" );                                                                                     // 5510
                                                                                                                       // 5511
		this._on( this.element, {                                                                                            // 5512
			keydown: function( event ) {                                                                                        // 5513
				if ( this.element.prop( "readOnly" ) ) {                                                                           // 5514
					suppressKeyPress = true;                                                                                          // 5515
					suppressInput = true;                                                                                             // 5516
					suppressKeyPressRepeat = true;                                                                                    // 5517
					return;                                                                                                           // 5518
				}                                                                                                                  // 5519
                                                                                                                       // 5520
				suppressKeyPress = false;                                                                                          // 5521
				suppressInput = false;                                                                                             // 5522
				suppressKeyPressRepeat = false;                                                                                    // 5523
				var keyCode = $.ui.keyCode;                                                                                        // 5524
				switch( event.keyCode ) {                                                                                          // 5525
				case keyCode.PAGE_UP:                                                                                              // 5526
					suppressKeyPress = true;                                                                                          // 5527
					this._move( "previousPage", event );                                                                              // 5528
					break;                                                                                                            // 5529
				case keyCode.PAGE_DOWN:                                                                                            // 5530
					suppressKeyPress = true;                                                                                          // 5531
					this._move( "nextPage", event );                                                                                  // 5532
					break;                                                                                                            // 5533
				case keyCode.UP:                                                                                                   // 5534
					suppressKeyPress = true;                                                                                          // 5535
					this._keyEvent( "previous", event );                                                                              // 5536
					break;                                                                                                            // 5537
				case keyCode.DOWN:                                                                                                 // 5538
					suppressKeyPress = true;                                                                                          // 5539
					this._keyEvent( "next", event );                                                                                  // 5540
					break;                                                                                                            // 5541
				case keyCode.ENTER:                                                                                                // 5542
				case keyCode.NUMPAD_ENTER:                                                                                         // 5543
					// when menu is open and has focus                                                                                // 5544
					if ( this.menu.active ) {                                                                                         // 5545
						// #6055 - Opera still allows the keypress to occur                                                              // 5546
						// which causes forms to submit                                                                                  // 5547
						suppressKeyPress = true;                                                                                         // 5548
						event.preventDefault();                                                                                          // 5549
						this.menu.select( event );                                                                                       // 5550
					}                                                                                                                 // 5551
					break;                                                                                                            // 5552
				case keyCode.TAB:                                                                                                  // 5553
					if ( this.menu.active ) {                                                                                         // 5554
						this.menu.select( event );                                                                                       // 5555
					}                                                                                                                 // 5556
					break;                                                                                                            // 5557
				case keyCode.ESCAPE:                                                                                               // 5558
					if ( this.menu.element.is( ":visible" ) ) {                                                                       // 5559
						this._value( this.term );                                                                                        // 5560
						this.close( event );                                                                                             // 5561
						// Different browsers have different default behavior for escape                                                 // 5562
						// Single press can mean undo or clear                                                                           // 5563
						// Double press in IE means clear the whole form                                                                 // 5564
						event.preventDefault();                                                                                          // 5565
					}                                                                                                                 // 5566
					break;                                                                                                            // 5567
				default:                                                                                                           // 5568
					suppressKeyPressRepeat = true;                                                                                    // 5569
					// search timeout should be triggered before the input value is changed                                           // 5570
					this._searchTimeout( event );                                                                                     // 5571
					break;                                                                                                            // 5572
				}                                                                                                                  // 5573
			},                                                                                                                  // 5574
			keypress: function( event ) {                                                                                       // 5575
				if ( suppressKeyPress ) {                                                                                          // 5576
					suppressKeyPress = false;                                                                                         // 5577
					event.preventDefault();                                                                                           // 5578
					return;                                                                                                           // 5579
				}                                                                                                                  // 5580
				if ( suppressKeyPressRepeat ) {                                                                                    // 5581
					return;                                                                                                           // 5582
				}                                                                                                                  // 5583
                                                                                                                       // 5584
				// replicate some key handlers to allow them to repeat in Firefox and Opera                                        // 5585
				var keyCode = $.ui.keyCode;                                                                                        // 5586
				switch( event.keyCode ) {                                                                                          // 5587
				case keyCode.PAGE_UP:                                                                                              // 5588
					this._move( "previousPage", event );                                                                              // 5589
					break;                                                                                                            // 5590
				case keyCode.PAGE_DOWN:                                                                                            // 5591
					this._move( "nextPage", event );                                                                                  // 5592
					break;                                                                                                            // 5593
				case keyCode.UP:                                                                                                   // 5594
					this._keyEvent( "previous", event );                                                                              // 5595
					break;                                                                                                            // 5596
				case keyCode.DOWN:                                                                                                 // 5597
					this._keyEvent( "next", event );                                                                                  // 5598
					break;                                                                                                            // 5599
				}                                                                                                                  // 5600
			},                                                                                                                  // 5601
			input: function( event ) {                                                                                          // 5602
				if ( suppressInput ) {                                                                                             // 5603
					suppressInput = false;                                                                                            // 5604
					event.preventDefault();                                                                                           // 5605
					return;                                                                                                           // 5606
				}                                                                                                                  // 5607
				this._searchTimeout( event );                                                                                      // 5608
			},                                                                                                                  // 5609
			focus: function() {                                                                                                 // 5610
				this.selectedItem = null;                                                                                          // 5611
				this.previous = this._value();                                                                                     // 5612
			},                                                                                                                  // 5613
			blur: function( event ) {                                                                                           // 5614
				if ( this.cancelBlur ) {                                                                                           // 5615
					delete this.cancelBlur;                                                                                           // 5616
					return;                                                                                                           // 5617
				}                                                                                                                  // 5618
                                                                                                                       // 5619
				clearTimeout( this.searching );                                                                                    // 5620
				this.close( event );                                                                                               // 5621
				this._change( event );                                                                                             // 5622
			}                                                                                                                   // 5623
		});                                                                                                                  // 5624
                                                                                                                       // 5625
		this._initSource();                                                                                                  // 5626
		this.menu = $( "<ul>" )                                                                                              // 5627
			.addClass( "ui-autocomplete" )                                                                                      // 5628
			.appendTo( this.document.find( this.options.appendTo || "body" )[ 0 ] )                                             // 5629
			.menu({                                                                                                             // 5630
				// custom key handling for now                                                                                     // 5631
				input: $(),                                                                                                        // 5632
				// disable ARIA support, the live region takes care of that                                                        // 5633
				role: null                                                                                                         // 5634
			})                                                                                                                  // 5635
			.zIndex( this.element.zIndex() + 1 )                                                                                // 5636
			.hide()                                                                                                             // 5637
			.data( "menu" );                                                                                                    // 5638
                                                                                                                       // 5639
		this._on( this.menu.element, {                                                                                       // 5640
			mousedown: function( event ) {                                                                                      // 5641
				// prevent moving focus out of the text field                                                                      // 5642
				event.preventDefault();                                                                                            // 5643
                                                                                                                       // 5644
				// IE doesn't prevent moving focus even with event.preventDefault()                                                // 5645
				// so we set a flag to know when we should ignore the blur event                                                   // 5646
				this.cancelBlur = true;                                                                                            // 5647
				this._delay(function() {                                                                                           // 5648
					delete this.cancelBlur;                                                                                           // 5649
				});                                                                                                                // 5650
                                                                                                                       // 5651
				// clicking on the scrollbar causes focus to shift to the body                                                     // 5652
				// but we can't detect a mouseup or a click immediately afterward                                                  // 5653
				// so we have to track the next mousedown and close the menu if                                                    // 5654
				// the user clicks somewhere outside of the autocomplete                                                           // 5655
				var menuElement = this.menu.element[ 0 ];                                                                          // 5656
				if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {                                                      // 5657
					this._delay(function() {                                                                                          // 5658
						var that = this;                                                                                                 // 5659
						this.document.one( "mousedown", function( event ) {                                                              // 5660
							if ( event.target !== that.element[ 0 ] &&                                                                      // 5661
									event.target !== menuElement &&                                                                               // 5662
									!$.contains( menuElement, event.target ) ) {                                                                  // 5663
								that.close();                                                                                                  // 5664
							}                                                                                                               // 5665
						});                                                                                                              // 5666
					});                                                                                                               // 5667
				}                                                                                                                  // 5668
			},                                                                                                                  // 5669
			menufocus: function( event, ui ) {                                                                                  // 5670
				// #7024 - Prevent accidental activation of menu items in Firefox                                                  // 5671
				if ( this.isNewMenu ) {                                                                                            // 5672
					this.isNewMenu = false;                                                                                           // 5673
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {                                         // 5674
						this.menu.blur();                                                                                                // 5675
                                                                                                                       // 5676
						this.document.one( "mousemove", function() {                                                                     // 5677
							$( event.target ).trigger( event.originalEvent );                                                               // 5678
						});                                                                                                              // 5679
                                                                                                                       // 5680
						return;                                                                                                          // 5681
					}                                                                                                                 // 5682
				}                                                                                                                  // 5683
                                                                                                                       // 5684
				// back compat for _renderItem using item.autocomplete, via #7810                                                  // 5685
				// TODO remove the fallback, see #8156                                                                             // 5686
				var item = ui.item.data( "ui-autocomplete-item" ) || ui.item.data( "item.autocomplete" );                          // 5687
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {                                                 // 5688
					// use value to match what will end up in the input, if it was a key event                                        // 5689
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {                                           // 5690
						this._value( item.value );                                                                                       // 5691
					}                                                                                                                 // 5692
				} else {                                                                                                           // 5693
					// Normally the input is populated with the item's value as the                                                   // 5694
					// menu is navigated, causing screen readers to notice a change and                                               // 5695
					// announce the item. Since the focus event was canceled, this doesn't                                            // 5696
					// happen, so we update the live region so that screen readers can                                                // 5697
					// still notice the change and announce it.                                                                       // 5698
					this.liveRegion.text( item.value );                                                                               // 5699
				}                                                                                                                  // 5700
			},                                                                                                                  // 5701
			menuselect: function( event, ui ) {                                                                                 // 5702
				// back compat for _renderItem using item.autocomplete, via #7810                                                  // 5703
				// TODO remove the fallback, see #8156                                                                             // 5704
				var item = ui.item.data( "ui-autocomplete-item" ) || ui.item.data( "item.autocomplete" ),                          // 5705
					previous = this.previous;                                                                                         // 5706
                                                                                                                       // 5707
				// only trigger when focus was lost (click on menu)                                                                // 5708
				if ( this.element[0] !== this.document[0].activeElement ) {                                                        // 5709
					this.element.focus();                                                                                             // 5710
					this.previous = previous;                                                                                         // 5711
					// #6109 - IE triggers two focus events and the second                                                            // 5712
					// is asynchronous, so we need to reset the previous                                                              // 5713
					// term synchronously and asynchronously :-(                                                                      // 5714
					this._delay(function() {                                                                                          // 5715
						this.previous = previous;                                                                                        // 5716
						this.selectedItem = item;                                                                                        // 5717
					});                                                                                                               // 5718
				}                                                                                                                  // 5719
                                                                                                                       // 5720
				if ( false !== this._trigger( "select", event, { item: item } ) ) {                                                // 5721
					this._value( item.value );                                                                                        // 5722
				}                                                                                                                  // 5723
				// reset the term after the select event                                                                           // 5724
				// this allows custom select handling to work properly                                                             // 5725
				this.term = this._value();                                                                                         // 5726
                                                                                                                       // 5727
				this.close( event );                                                                                               // 5728
				this.selectedItem = item;                                                                                          // 5729
			}                                                                                                                   // 5730
		});                                                                                                                  // 5731
                                                                                                                       // 5732
		this.liveRegion = $( "<span>", {                                                                                     // 5733
				role: "status",                                                                                                    // 5734
				"aria-live": "polite"                                                                                              // 5735
			})                                                                                                                  // 5736
			.addClass( "ui-helper-hidden-accessible" )                                                                          // 5737
			.insertAfter( this.element );                                                                                       // 5738
                                                                                                                       // 5739
		if ( $.fn.bgiframe ) {                                                                                               // 5740
			this.menu.element.bgiframe();                                                                                       // 5741
		}                                                                                                                    // 5742
                                                                                                                       // 5743
		// turning off autocomplete prevents the browser from remembering the                                                // 5744
		// value when navigating through history, so we re-enable autocomplete                                               // 5745
		// if the page is unloaded before the widget is destroyed. #7790                                                     // 5746
		this._on( this.window, {                                                                                             // 5747
			beforeunload: function() {                                                                                          // 5748
				this.element.removeAttr( "autocomplete" );                                                                         // 5749
			}                                                                                                                   // 5750
		});                                                                                                                  // 5751
	},                                                                                                                    // 5752
                                                                                                                       // 5753
	_destroy: function() {                                                                                                // 5754
		clearTimeout( this.searching );                                                                                      // 5755
		this.element                                                                                                         // 5756
			.removeClass( "ui-autocomplete-input" )                                                                             // 5757
			.removeAttr( "autocomplete" );                                                                                      // 5758
		this.menu.element.remove();                                                                                          // 5759
		this.liveRegion.remove();                                                                                            // 5760
	},                                                                                                                    // 5761
                                                                                                                       // 5762
	_setOption: function( key, value ) {                                                                                  // 5763
		this._super( key, value );                                                                                           // 5764
		if ( key === "source" ) {                                                                                            // 5765
			this._initSource();                                                                                                 // 5766
		}                                                                                                                    // 5767
		if ( key === "appendTo" ) {                                                                                          // 5768
			this.menu.element.appendTo( this.document.find( value || "body" )[0] );                                             // 5769
		}                                                                                                                    // 5770
		if ( key === "disabled" && value && this.xhr ) {                                                                     // 5771
			this.xhr.abort();                                                                                                   // 5772
		}                                                                                                                    // 5773
	},                                                                                                                    // 5774
                                                                                                                       // 5775
	_isMultiLine: function() {                                                                                            // 5776
		// Textareas are always multi-line                                                                                   // 5777
		if ( this.element.is( "textarea" ) ) {                                                                               // 5778
			return true;                                                                                                        // 5779
		}                                                                                                                    // 5780
		// Inputs are always single-line, even if inside a contentEditable element                                           // 5781
		// IE also treats inputs as contentEditable                                                                          // 5782
		if ( this.element.is( "input" ) ) {                                                                                  // 5783
			return false;                                                                                                       // 5784
		}                                                                                                                    // 5785
		// All other element types are determined by whether or not they're contentEditable                                  // 5786
		return this.element.prop( "isContentEditable" );                                                                     // 5787
	},                                                                                                                    // 5788
                                                                                                                       // 5789
	_initSource: function() {                                                                                             // 5790
		var array, url,                                                                                                      // 5791
			that = this;                                                                                                        // 5792
		if ( $.isArray(this.options.source) ) {                                                                              // 5793
			array = this.options.source;                                                                                        // 5794
			this.source = function( request, response ) {                                                                       // 5795
				response( $.ui.autocomplete.filter( array, request.term ) );                                                       // 5796
			};                                                                                                                  // 5797
		} else if ( typeof this.options.source === "string" ) {                                                              // 5798
			url = this.options.source;                                                                                          // 5799
			this.source = function( request, response ) {                                                                       // 5800
				if ( that.xhr ) {                                                                                                  // 5801
					that.xhr.abort();                                                                                                 // 5802
				}                                                                                                                  // 5803
				that.xhr = $.ajax({                                                                                                // 5804
					url: url,                                                                                                         // 5805
					data: request,                                                                                                    // 5806
					dataType: "json",                                                                                                 // 5807
					success: function( data ) {                                                                                       // 5808
						response( data );                                                                                                // 5809
					},                                                                                                                // 5810
					error: function() {                                                                                               // 5811
						response( [] );                                                                                                  // 5812
					}                                                                                                                 // 5813
				});                                                                                                                // 5814
			};                                                                                                                  // 5815
		} else {                                                                                                             // 5816
			this.source = this.options.source;                                                                                  // 5817
		}                                                                                                                    // 5818
	},                                                                                                                    // 5819
                                                                                                                       // 5820
	_searchTimeout: function( event ) {                                                                                   // 5821
		clearTimeout( this.searching );                                                                                      // 5822
		this.searching = this._delay(function() {                                                                            // 5823
			// only search if the value has changed                                                                             // 5824
			if ( this.term !== this._value() ) {                                                                                // 5825
				this.selectedItem = null;                                                                                          // 5826
				this.search( null, event );                                                                                        // 5827
			}                                                                                                                   // 5828
		}, this.options.delay );                                                                                             // 5829
	},                                                                                                                    // 5830
                                                                                                                       // 5831
	search: function( value, event ) {                                                                                    // 5832
		value = value != null ? value : this._value();                                                                       // 5833
                                                                                                                       // 5834
		// always save the actual value, not the one passed as an argument                                                   // 5835
		this.term = this._value();                                                                                           // 5836
                                                                                                                       // 5837
		if ( value.length < this.options.minLength ) {                                                                       // 5838
			return this.close( event );                                                                                         // 5839
		}                                                                                                                    // 5840
                                                                                                                       // 5841
		if ( this._trigger( "search", event ) === false ) {                                                                  // 5842
			return;                                                                                                             // 5843
		}                                                                                                                    // 5844
                                                                                                                       // 5845
		return this._search( value );                                                                                        // 5846
	},                                                                                                                    // 5847
                                                                                                                       // 5848
	_search: function( value ) {                                                                                          // 5849
		this.pending++;                                                                                                      // 5850
		this.element.addClass( "ui-autocomplete-loading" );                                                                  // 5851
		this.cancelSearch = false;                                                                                           // 5852
                                                                                                                       // 5853
		this.source( { term: value }, this._response() );                                                                    // 5854
	},                                                                                                                    // 5855
                                                                                                                       // 5856
	_response: function() {                                                                                               // 5857
		var that = this,                                                                                                     // 5858
			index = ++requestIndex;                                                                                             // 5859
                                                                                                                       // 5860
		return function( content ) {                                                                                         // 5861
			if ( index === requestIndex ) {                                                                                     // 5862
				that.__response( content );                                                                                        // 5863
			}                                                                                                                   // 5864
                                                                                                                       // 5865
			that.pending--;                                                                                                     // 5866
			if ( !that.pending ) {                                                                                              // 5867
				that.element.removeClass( "ui-autocomplete-loading" );                                                             // 5868
			}                                                                                                                   // 5869
		};                                                                                                                   // 5870
	},                                                                                                                    // 5871
                                                                                                                       // 5872
	__response: function( content ) {                                                                                     // 5873
		if ( content ) {                                                                                                     // 5874
			content = this._normalize( content );                                                                               // 5875
		}                                                                                                                    // 5876
		this._trigger( "response", null, { content: content } );                                                             // 5877
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {                                   // 5878
			this._suggest( content );                                                                                           // 5879
			this._trigger( "open" );                                                                                            // 5880
		} else {                                                                                                             // 5881
			// use ._close() instead of .close() so we don't cancel future searches                                             // 5882
			this._close();                                                                                                      // 5883
		}                                                                                                                    // 5884
	},                                                                                                                    // 5885
                                                                                                                       // 5886
	close: function( event ) {                                                                                            // 5887
		this.cancelSearch = true;                                                                                            // 5888
		this._close( event );                                                                                                // 5889
	},                                                                                                                    // 5890
                                                                                                                       // 5891
	_close: function( event ) {                                                                                           // 5892
		if ( this.menu.element.is( ":visible" ) ) {                                                                          // 5893
			this.menu.element.hide();                                                                                           // 5894
			this.menu.blur();                                                                                                   // 5895
			this.isNewMenu = true;                                                                                              // 5896
			this._trigger( "close", event );                                                                                    // 5897
		}                                                                                                                    // 5898
	},                                                                                                                    // 5899
                                                                                                                       // 5900
	_change: function( event ) {                                                                                          // 5901
		if ( this.previous !== this._value() ) {                                                                             // 5902
			this._trigger( "change", event, { item: this.selectedItem } );                                                      // 5903
		}                                                                                                                    // 5904
	},                                                                                                                    // 5905
                                                                                                                       // 5906
	_normalize: function( items ) {                                                                                       // 5907
		// assume all items have the right format when the first item is complete                                            // 5908
		if ( items.length && items[0].label && items[0].value ) {                                                            // 5909
			return items;                                                                                                       // 5910
		}                                                                                                                    // 5911
		return $.map( items, function( item ) {                                                                              // 5912
			if ( typeof item === "string" ) {                                                                                   // 5913
				return {                                                                                                           // 5914
					label: item,                                                                                                      // 5915
					value: item                                                                                                       // 5916
				};                                                                                                                 // 5917
			}                                                                                                                   // 5918
			return $.extend({                                                                                                   // 5919
				label: item.label || item.value,                                                                                   // 5920
				value: item.value || item.label                                                                                    // 5921
			}, item );                                                                                                          // 5922
		});                                                                                                                  // 5923
	},                                                                                                                    // 5924
                                                                                                                       // 5925
	_suggest: function( items ) {                                                                                         // 5926
		var ul = this.menu.element                                                                                           // 5927
			.empty()                                                                                                            // 5928
			.zIndex( this.element.zIndex() + 1 );                                                                               // 5929
		this._renderMenu( ul, items );                                                                                       // 5930
		this.menu.refresh();                                                                                                 // 5931
                                                                                                                       // 5932
		// size and position menu                                                                                            // 5933
		ul.show();                                                                                                           // 5934
		this._resizeMenu();                                                                                                  // 5935
		ul.position( $.extend({                                                                                              // 5936
			of: this.element                                                                                                    // 5937
		}, this.options.position ));                                                                                         // 5938
                                                                                                                       // 5939
		if ( this.options.autoFocus ) {                                                                                      // 5940
			this.menu.next();                                                                                                   // 5941
		}                                                                                                                    // 5942
	},                                                                                                                    // 5943
                                                                                                                       // 5944
	_resizeMenu: function() {                                                                                             // 5945
		var ul = this.menu.element;                                                                                          // 5946
		ul.outerWidth( Math.max(                                                                                             // 5947
			// Firefox wraps long text (possibly a rounding bug)                                                                // 5948
			// so we add 1px to avoid the wrapping (#7513)                                                                      // 5949
			ul.width( "" ).outerWidth() + 1,                                                                                    // 5950
			this.element.outerWidth()                                                                                           // 5951
		) );                                                                                                                 // 5952
	},                                                                                                                    // 5953
                                                                                                                       // 5954
	_renderMenu: function( ul, items ) {                                                                                  // 5955
		var that = this;                                                                                                     // 5956
		$.each( items, function( index, item ) {                                                                             // 5957
			that._renderItemData( ul, item );                                                                                   // 5958
		});                                                                                                                  // 5959
	},                                                                                                                    // 5960
                                                                                                                       // 5961
	_renderItemData: function( ul, item ) {                                                                               // 5962
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );                                            // 5963
	},                                                                                                                    // 5964
                                                                                                                       // 5965
	_renderItem: function( ul, item ) {                                                                                   // 5966
		return $( "<li>" )                                                                                                   // 5967
			.append( $( "<a>" ).text( item.label ) )                                                                            // 5968
			.appendTo( ul );                                                                                                    // 5969
	},                                                                                                                    // 5970
                                                                                                                       // 5971
	_move: function( direction, event ) {                                                                                 // 5972
		if ( !this.menu.element.is( ":visible" ) ) {                                                                         // 5973
			this.search( null, event );                                                                                         // 5974
			return;                                                                                                             // 5975
		}                                                                                                                    // 5976
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||                                                     // 5977
				this.menu.isLastItem() && /^next/.test( direction ) ) {                                                            // 5978
			this._value( this.term );                                                                                           // 5979
			this.menu.blur();                                                                                                   // 5980
			return;                                                                                                             // 5981
		}                                                                                                                    // 5982
		this.menu[ direction ]( event );                                                                                     // 5983
	},                                                                                                                    // 5984
                                                                                                                       // 5985
	widget: function() {                                                                                                  // 5986
		return this.menu.element;                                                                                            // 5987
	},                                                                                                                    // 5988
                                                                                                                       // 5989
	_value: function() {                                                                                                  // 5990
		return this.valueMethod.apply( this.element, arguments );                                                            // 5991
	},                                                                                                                    // 5992
                                                                                                                       // 5993
	_keyEvent: function( keyEvent, event ) {                                                                              // 5994
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {                                                     // 5995
			this._move( keyEvent, event );                                                                                      // 5996
                                                                                                                       // 5997
			// prevents moving cursor to beginning/end of the text field in some browsers                                       // 5998
			event.preventDefault();                                                                                             // 5999
		}                                                                                                                    // 6000
	}                                                                                                                     // 6001
});                                                                                                                    // 6002
                                                                                                                       // 6003
$.extend( $.ui.autocomplete, {                                                                                         // 6004
	escapeRegex: function( value ) {                                                                                      // 6005
		return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");                                                         // 6006
	},                                                                                                                    // 6007
	filter: function(array, term) {                                                                                       // 6008
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );                                                // 6009
		return $.grep( array, function(value) {                                                                              // 6010
			return matcher.test( value.label || value.value || value );                                                         // 6011
		});                                                                                                                  // 6012
	}                                                                                                                     // 6013
});                                                                                                                    // 6014
                                                                                                                       // 6015
                                                                                                                       // 6016
// live region extension, adding a `messages` option                                                                   // 6017
// NOTE: This is an experimental API. We are still investigating                                                       // 6018
// a full solution for string manipulation and internationalization.                                                   // 6019
$.widget( "ui.autocomplete", $.ui.autocomplete, {                                                                      // 6020
	options: {                                                                                                            // 6021
		messages: {                                                                                                          // 6022
			noResults: "No search results.",                                                                                    // 6023
			results: function( amount ) {                                                                                       // 6024
				return amount + ( amount > 1 ? " results are" : " result is" ) +                                                   // 6025
					" available, use up and down arrow keys to navigate.";                                                            // 6026
			}                                                                                                                   // 6027
		}                                                                                                                    // 6028
	},                                                                                                                    // 6029
                                                                                                                       // 6030
	__response: function( content ) {                                                                                     // 6031
		var message;                                                                                                         // 6032
		this._superApply( arguments );                                                                                       // 6033
		if ( this.options.disabled || this.cancelSearch ) {                                                                  // 6034
			return;                                                                                                             // 6035
		}                                                                                                                    // 6036
		if ( content && content.length ) {                                                                                   // 6037
			message = this.options.messages.results( content.length );                                                          // 6038
		} else {                                                                                                             // 6039
			message = this.options.messages.noResults;                                                                          // 6040
		}                                                                                                                    // 6041
		this.liveRegion.text( message );                                                                                     // 6042
	}                                                                                                                     // 6043
});                                                                                                                    // 6044
                                                                                                                       // 6045
                                                                                                                       // 6046
}( jQuery ));                                                                                                          // 6047
(function( $, undefined ) {                                                                                            // 6048
                                                                                                                       // 6049
var lastActive, startXPos, startYPos, clickDragged,                                                                    // 6050
	baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",                                                   // 6051
	stateClasses = "ui-state-hover ui-state-active ",                                                                     // 6052
	typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
	formResetHandler = function() {                                                                                       // 6054
		var buttons = $( this ).find( ":ui-button" );                                                                        // 6055
		setTimeout(function() {                                                                                              // 6056
			buttons.button( "refresh" );                                                                                        // 6057
		}, 1 );                                                                                                              // 6058
	},                                                                                                                    // 6059
	radioGroup = function( radio ) {                                                                                      // 6060
		var name = radio.name,                                                                                               // 6061
			form = radio.form,                                                                                                  // 6062
			radios = $( [] );                                                                                                   // 6063
		if ( name ) {                                                                                                        // 6064
			if ( form ) {                                                                                                       // 6065
				radios = $( form ).find( "[name='" + name + "']" );                                                                // 6066
			} else {                                                                                                            // 6067
				radios = $( "[name='" + name + "']", radio.ownerDocument )                                                         // 6068
					.filter(function() {                                                                                              // 6069
						return !this.form;                                                                                               // 6070
					});                                                                                                               // 6071
			}                                                                                                                   // 6072
		}                                                                                                                    // 6073
		return radios;                                                                                                       // 6074
	};                                                                                                                    // 6075
                                                                                                                       // 6076
$.widget( "ui.button", {                                                                                               // 6077
	version: "1.9.2",                                                                                                     // 6078
	defaultElement: "<button>",                                                                                           // 6079
	options: {                                                                                                            // 6080
		disabled: null,                                                                                                      // 6081
		text: true,                                                                                                          // 6082
		label: null,                                                                                                         // 6083
		icons: {                                                                                                             // 6084
			primary: null,                                                                                                      // 6085
			secondary: null                                                                                                     // 6086
		}                                                                                                                    // 6087
	},                                                                                                                    // 6088
	_create: function() {                                                                                                 // 6089
		this.element.closest( "form" )                                                                                       // 6090
			.unbind( "reset" + this.eventNamespace )                                                                            // 6091
			.bind( "reset" + this.eventNamespace, formResetHandler );                                                           // 6092
                                                                                                                       // 6093
		if ( typeof this.options.disabled !== "boolean" ) {                                                                  // 6094
			this.options.disabled = !!this.element.prop( "disabled" );                                                          // 6095
		} else {                                                                                                             // 6096
			this.element.prop( "disabled", this.options.disabled );                                                             // 6097
		}                                                                                                                    // 6098
                                                                                                                       // 6099
		this._determineButtonType();                                                                                         // 6100
		this.hasTitle = !!this.buttonElement.attr( "title" );                                                                // 6101
                                                                                                                       // 6102
		var that = this,                                                                                                     // 6103
			options = this.options,                                                                                             // 6104
			toggleButton = this.type === "checkbox" || this.type === "radio",                                                   // 6105
			activeClass = !toggleButton ? "ui-state-active" : "",                                                               // 6106
			focusClass = "ui-state-focus";                                                                                      // 6107
                                                                                                                       // 6108
		if ( options.label === null ) {                                                                                      // 6109
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());                     // 6110
		}                                                                                                                    // 6111
                                                                                                                       // 6112
		this._hoverable( this.buttonElement );                                                                               // 6113
                                                                                                                       // 6114
		this.buttonElement                                                                                                   // 6115
			.addClass( baseClasses )                                                                                            // 6116
			.attr( "role", "button" )                                                                                           // 6117
			.bind( "mouseenter" + this.eventNamespace, function() {                                                             // 6118
				if ( options.disabled ) {                                                                                          // 6119
					return;                                                                                                           // 6120
				}                                                                                                                  // 6121
				if ( this === lastActive ) {                                                                                       // 6122
					$( this ).addClass( "ui-state-active" );                                                                          // 6123
				}                                                                                                                  // 6124
			})                                                                                                                  // 6125
			.bind( "mouseleave" + this.eventNamespace, function() {                                                             // 6126
				if ( options.disabled ) {                                                                                          // 6127
					return;                                                                                                           // 6128
				}                                                                                                                  // 6129
				$( this ).removeClass( activeClass );                                                                              // 6130
			})                                                                                                                  // 6131
			.bind( "click" + this.eventNamespace, function( event ) {                                                           // 6132
				if ( options.disabled ) {                                                                                          // 6133
					event.preventDefault();                                                                                           // 6134
					event.stopImmediatePropagation();                                                                                 // 6135
				}                                                                                                                  // 6136
			});                                                                                                                 // 6137
                                                                                                                       // 6138
		this.element                                                                                                         // 6139
			.bind( "focus" + this.eventNamespace, function() {                                                                  // 6140
				// no need to check disabled, focus won't be triggered anyway                                                      // 6141
				that.buttonElement.addClass( focusClass );                                                                         // 6142
			})                                                                                                                  // 6143
			.bind( "blur" + this.eventNamespace, function() {                                                                   // 6144
				that.buttonElement.removeClass( focusClass );                                                                      // 6145
			});                                                                                                                 // 6146
                                                                                                                       // 6147
		if ( toggleButton ) {                                                                                                // 6148
			this.element.bind( "change" + this.eventNamespace, function() {                                                     // 6149
				if ( clickDragged ) {                                                                                              // 6150
					return;                                                                                                           // 6151
				}                                                                                                                  // 6152
				that.refresh();                                                                                                    // 6153
			});                                                                                                                 // 6154
			// if mouse moves between mousedown and mouseup (drag) set clickDragged flag                                        // 6155
			// prevents issue where button state changes but checkbox/radio checked state                                       // 6156
			// does not in Firefox (see ticket #6970)                                                                           // 6157
			this.buttonElement                                                                                                  // 6158
				.bind( "mousedown" + this.eventNamespace, function( event ) {                                                      // 6159
					if ( options.disabled ) {                                                                                         // 6160
						return;                                                                                                          // 6161
					}                                                                                                                 // 6162
					clickDragged = false;                                                                                             // 6163
					startXPos = event.pageX;                                                                                          // 6164
					startYPos = event.pageY;                                                                                          // 6165
				})                                                                                                                 // 6166
				.bind( "mouseup" + this.eventNamespace, function( event ) {                                                        // 6167
					if ( options.disabled ) {                                                                                         // 6168
						return;                                                                                                          // 6169
					}                                                                                                                 // 6170
					if ( startXPos !== event.pageX || startYPos !== event.pageY ) {                                                   // 6171
						clickDragged = true;                                                                                             // 6172
					}                                                                                                                 // 6173
			});                                                                                                                 // 6174
		}                                                                                                                    // 6175
                                                                                                                       // 6176
		if ( this.type === "checkbox" ) {                                                                                    // 6177
			this.buttonElement.bind( "click" + this.eventNamespace, function() {                                                // 6178
				if ( options.disabled || clickDragged ) {                                                                          // 6179
					return false;                                                                                                     // 6180
				}                                                                                                                  // 6181
				$( this ).toggleClass( "ui-state-active" );                                                                        // 6182
				that.buttonElement.attr( "aria-pressed", that.element[0].checked );                                                // 6183
			});                                                                                                                 // 6184
		} else if ( this.type === "radio" ) {                                                                                // 6185
			this.buttonElement.bind( "click" + this.eventNamespace, function() {                                                // 6186
				if ( options.disabled || clickDragged ) {                                                                          // 6187
					return false;                                                                                                     // 6188
				}                                                                                                                  // 6189
				$( this ).addClass( "ui-state-active" );                                                                           // 6190
				that.buttonElement.attr( "aria-pressed", "true" );                                                                 // 6191
                                                                                                                       // 6192
				var radio = that.element[ 0 ];                                                                                     // 6193
				radioGroup( radio )                                                                                                // 6194
					.not( radio )                                                                                                     // 6195
					.map(function() {                                                                                                 // 6196
						return $( this ).button( "widget" )[ 0 ];                                                                        // 6197
					})                                                                                                                // 6198
					.removeClass( "ui-state-active" )                                                                                 // 6199
					.attr( "aria-pressed", "false" );                                                                                 // 6200
			});                                                                                                                 // 6201
		} else {                                                                                                             // 6202
			this.buttonElement                                                                                                  // 6203
				.bind( "mousedown" + this.eventNamespace, function() {                                                             // 6204
					if ( options.disabled ) {                                                                                         // 6205
						return false;                                                                                                    // 6206
					}                                                                                                                 // 6207
					$( this ).addClass( "ui-state-active" );                                                                          // 6208
					lastActive = this;                                                                                                // 6209
					that.document.one( "mouseup", function() {                                                                        // 6210
						lastActive = null;                                                                                               // 6211
					});                                                                                                               // 6212
				})                                                                                                                 // 6213
				.bind( "mouseup" + this.eventNamespace, function() {                                                               // 6214
					if ( options.disabled ) {                                                                                         // 6215
						return false;                                                                                                    // 6216
					}                                                                                                                 // 6217
					$( this ).removeClass( "ui-state-active" );                                                                       // 6218
				})                                                                                                                 // 6219
				.bind( "keydown" + this.eventNamespace, function(event) {                                                          // 6220
					if ( options.disabled ) {                                                                                         // 6221
						return false;                                                                                                    // 6222
					}                                                                                                                 // 6223
					if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {                             // 6224
						$( this ).addClass( "ui-state-active" );                                                                         // 6225
					}                                                                                                                 // 6226
				})                                                                                                                 // 6227
				.bind( "keyup" + this.eventNamespace, function() {                                                                 // 6228
					$( this ).removeClass( "ui-state-active" );                                                                       // 6229
				});                                                                                                                // 6230
                                                                                                                       // 6231
			if ( this.buttonElement.is("a") ) {                                                                                 // 6232
				this.buttonElement.keyup(function(event) {                                                                         // 6233
					if ( event.keyCode === $.ui.keyCode.SPACE ) {                                                                     // 6234
						// TODO pass through original event correctly (just as 2nd argument doesn't work)                                // 6235
						$( this ).click();                                                                                               // 6236
					}                                                                                                                 // 6237
				});                                                                                                                // 6238
			}                                                                                                                   // 6239
		}                                                                                                                    // 6240
                                                                                                                       // 6241
		// TODO: pull out $.Widget's handling for the disabled option into                                                   // 6242
		// $.Widget.prototype._setOptionDisabled so it's easy to proxy and can                                               // 6243
		// be overridden by individual plugins                                                                               // 6244
		this._setOption( "disabled", options.disabled );                                                                     // 6245
		this._resetButton();                                                                                                 // 6246
	},                                                                                                                    // 6247
                                                                                                                       // 6248
	_determineButtonType: function() {                                                                                    // 6249
		var ancestor, labelSelector, checked;                                                                                // 6250
                                                                                                                       // 6251
		if ( this.element.is("[type=checkbox]") ) {                                                                          // 6252
			this.type = "checkbox";                                                                                             // 6253
		} else if ( this.element.is("[type=radio]") ) {                                                                      // 6254
			this.type = "radio";                                                                                                // 6255
		} else if ( this.element.is("input") ) {                                                                             // 6256
			this.type = "input";                                                                                                // 6257
		} else {                                                                                                             // 6258
			this.type = "button";                                                                                               // 6259
		}                                                                                                                    // 6260
                                                                                                                       // 6261
		if ( this.type === "checkbox" || this.type === "radio" ) {                                                           // 6262
			// we don't search against the document in case the element                                                         // 6263
			// is disconnected from the DOM                                                                                     // 6264
			ancestor = this.element.parents().last();                                                                           // 6265
			labelSelector = "label[for='" + this.element.attr("id") + "']";                                                     // 6266
			this.buttonElement = ancestor.find( labelSelector );                                                                // 6267
			if ( !this.buttonElement.length ) {                                                                                 // 6268
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();                                        // 6269
				this.buttonElement = ancestor.filter( labelSelector );                                                             // 6270
				if ( !this.buttonElement.length ) {                                                                                // 6271
					this.buttonElement = ancestor.find( labelSelector );                                                              // 6272
				}                                                                                                                  // 6273
			}                                                                                                                   // 6274
			this.element.addClass( "ui-helper-hidden-accessible" );                                                             // 6275
                                                                                                                       // 6276
			checked = this.element.is( ":checked" );                                                                            // 6277
			if ( checked ) {                                                                                                    // 6278
				this.buttonElement.addClass( "ui-state-active" );                                                                  // 6279
			}                                                                                                                   // 6280
			this.buttonElement.prop( "aria-pressed", checked );                                                                 // 6281
		} else {                                                                                                             // 6282
			this.buttonElement = this.element;                                                                                  // 6283
		}                                                                                                                    // 6284
	},                                                                                                                    // 6285
                                                                                                                       // 6286
	widget: function() {                                                                                                  // 6287
		return this.buttonElement;                                                                                           // 6288
	},                                                                                                                    // 6289
                                                                                                                       // 6290
	_destroy: function() {                                                                                                // 6291
		this.element                                                                                                         // 6292
			.removeClass( "ui-helper-hidden-accessible" );                                                                      // 6293
		this.buttonElement                                                                                                   // 6294
			.removeClass( baseClasses + " " + stateClasses + " " + typeClasses )                                                // 6295
			.removeAttr( "role" )                                                                                               // 6296
			.removeAttr( "aria-pressed" )                                                                                       // 6297
			.html( this.buttonElement.find(".ui-button-text").html() );                                                         // 6298
                                                                                                                       // 6299
		if ( !this.hasTitle ) {                                                                                              // 6300
			this.buttonElement.removeAttr( "title" );                                                                           // 6301
		}                                                                                                                    // 6302
	},                                                                                                                    // 6303
                                                                                                                       // 6304
	_setOption: function( key, value ) {                                                                                  // 6305
		this._super( key, value );                                                                                           // 6306
		if ( key === "disabled" ) {                                                                                          // 6307
			if ( value ) {                                                                                                      // 6308
				this.element.prop( "disabled", true );                                                                             // 6309
			} else {                                                                                                            // 6310
				this.element.prop( "disabled", false );                                                                            // 6311
			}                                                                                                                   // 6312
			return;                                                                                                             // 6313
		}                                                                                                                    // 6314
		this._resetButton();                                                                                                 // 6315
	},                                                                                                                    // 6316
                                                                                                                       // 6317
	refresh: function() {                                                                                                 // 6318
		//See #8237 & #8828                                                                                                  // 6319
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );
                                                                                                                       // 6321
		if ( isDisabled !== this.options.disabled ) {                                                                        // 6322
			this._setOption( "disabled", isDisabled );                                                                          // 6323
		}                                                                                                                    // 6324
		if ( this.type === "radio" ) {                                                                                       // 6325
			radioGroup( this.element[0] ).each(function() {                                                                     // 6326
				if ( $( this ).is( ":checked" ) ) {                                                                                // 6327
					$( this ).button( "widget" )                                                                                      // 6328
						.addClass( "ui-state-active" )                                                                                   // 6329
						.attr( "aria-pressed", "true" );                                                                                 // 6330
				} else {                                                                                                           // 6331
					$( this ).button( "widget" )                                                                                      // 6332
						.removeClass( "ui-state-active" )                                                                                // 6333
						.attr( "aria-pressed", "false" );                                                                                // 6334
				}                                                                                                                  // 6335
			});                                                                                                                 // 6336
		} else if ( this.type === "checkbox" ) {                                                                             // 6337
			if ( this.element.is( ":checked" ) ) {                                                                              // 6338
				this.buttonElement                                                                                                 // 6339
					.addClass( "ui-state-active" )                                                                                    // 6340
					.attr( "aria-pressed", "true" );                                                                                  // 6341
			} else {                                                                                                            // 6342
				this.buttonElement                                                                                                 // 6343
					.removeClass( "ui-state-active" )                                                                                 // 6344
					.attr( "aria-pressed", "false" );                                                                                 // 6345
			}                                                                                                                   // 6346
		}                                                                                                                    // 6347
	},                                                                                                                    // 6348
                                                                                                                       // 6349
	_resetButton: function() {                                                                                            // 6350
		if ( this.type === "input" ) {                                                                                       // 6351
			if ( this.options.label ) {                                                                                         // 6352
				this.element.val( this.options.label );                                                                            // 6353
			}                                                                                                                   // 6354
			return;                                                                                                             // 6355
		}                                                                                                                    // 6356
		var buttonElement = this.buttonElement.removeClass( typeClasses ),                                                   // 6357
			buttonText = $( "<span></span>", this.document[0] )                                                                 // 6358
				.addClass( "ui-button-text" )                                                                                      // 6359
				.html( this.options.label )                                                                                        // 6360
				.appendTo( buttonElement.empty() )                                                                                 // 6361
				.text(),                                                                                                           // 6362
			icons = this.options.icons,                                                                                         // 6363
			multipleIcons = icons.primary && icons.secondary,                                                                   // 6364
			buttonClasses = [];                                                                                                 // 6365
                                                                                                                       // 6366
		if ( icons.primary || icons.secondary ) {                                                                            // 6367
			if ( this.options.text ) {                                                                                          // 6368
				buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}                                                                                                                   // 6370
                                                                                                                       // 6371
			if ( icons.primary ) {                                                                                              // 6372
				buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );             // 6373
			}                                                                                                                   // 6374
                                                                                                                       // 6375
			if ( icons.secondary ) {                                                                                            // 6376
				buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );          // 6377
			}                                                                                                                   // 6378
                                                                                                                       // 6379
			if ( !this.options.text ) {                                                                                         // 6380
				buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );                              // 6381
                                                                                                                       // 6382
				if ( !this.hasTitle ) {                                                                                            // 6383
					buttonElement.attr( "title", $.trim( buttonText ) );                                                              // 6384
				}                                                                                                                  // 6385
			}                                                                                                                   // 6386
		} else {                                                                                                             // 6387
			buttonClasses.push( "ui-button-text-only" );                                                                        // 6388
		}                                                                                                                    // 6389
		buttonElement.addClass( buttonClasses.join( " " ) );                                                                 // 6390
	}                                                                                                                     // 6391
});                                                                                                                    // 6392
                                                                                                                       // 6393
$.widget( "ui.buttonset", {                                                                                            // 6394
	version: "1.9.2",                                                                                                     // 6395
	options: {                                                                                                            // 6396
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"
	},                                                                                                                    // 6398
                                                                                                                       // 6399
	_create: function() {                                                                                                 // 6400
		this.element.addClass( "ui-buttonset" );                                                                             // 6401
	},                                                                                                                    // 6402
                                                                                                                       // 6403
	_init: function() {                                                                                                   // 6404
		this.refresh();                                                                                                      // 6405
	},                                                                                                                    // 6406
                                                                                                                       // 6407
	_setOption: function( key, value ) {                                                                                  // 6408
		if ( key === "disabled" ) {                                                                                          // 6409
			this.buttons.button( "option", key, value );                                                                        // 6410
		}                                                                                                                    // 6411
                                                                                                                       // 6412
		this._super( key, value );                                                                                           // 6413
	},                                                                                                                    // 6414
                                                                                                                       // 6415
	refresh: function() {                                                                                                 // 6416
		var rtl = this.element.css( "direction" ) === "rtl";                                                                 // 6417
                                                                                                                       // 6418
		this.buttons = this.element.find( this.options.items )                                                               // 6419
			.filter( ":ui-button" )                                                                                             // 6420
				.button( "refresh" )                                                                                               // 6421
			.end()                                                                                                              // 6422
			.not( ":ui-button" )                                                                                                // 6423
				.button()                                                                                                          // 6424
			.end()                                                                                                              // 6425
			.map(function() {                                                                                                   // 6426
				return $( this ).button( "widget" )[ 0 ];                                                                          // 6427
			})                                                                                                                  // 6428
				.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )                                                     // 6429
				.filter( ":first" )                                                                                                // 6430
					.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )                                                           // 6431
				.end()                                                                                                             // 6432
				.filter( ":last" )                                                                                                 // 6433
					.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )                                                           // 6434
				.end()                                                                                                             // 6435
			.end();                                                                                                             // 6436
	},                                                                                                                    // 6437
                                                                                                                       // 6438
	_destroy: function() {                                                                                                // 6439
		this.element.removeClass( "ui-buttonset" );                                                                          // 6440
		this.buttons                                                                                                         // 6441
			.map(function() {                                                                                                   // 6442
				return $( this ).button( "widget" )[ 0 ];                                                                          // 6443
			})                                                                                                                  // 6444
				.removeClass( "ui-corner-left ui-corner-right" )                                                                   // 6445
			.end()                                                                                                              // 6446
			.button( "destroy" );                                                                                               // 6447
	}                                                                                                                     // 6448
});                                                                                                                    // 6449
                                                                                                                       // 6450
}( jQuery ) );                                                                                                         // 6451
(function( $, undefined ) {                                                                                            // 6452
                                                                                                                       // 6453
$.extend($.ui, { datepicker: { version: "1.9.2" } });                                                                  // 6454
                                                                                                                       // 6455
var PROP_NAME = 'datepicker';                                                                                          // 6456
var dpuuid = new Date().getTime();                                                                                     // 6457
var instActive;                                                                                                        // 6458
                                                                                                                       // 6459
/* Date picker manager.                                                                                                // 6460
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.                           // 6461
   Settings for (groups of) date pickers are maintained in an instance object,                                         // 6462
   allowing multiple different settings on the same page. */                                                           // 6463
                                                                                                                       // 6464
function Datepicker() {                                                                                                // 6465
	this.debug = false; // Change this to true to start debugging                                                         // 6466
	this._curInst = null; // The current instance in use                                                                  // 6467
	this._keyEvent = false; // If the last event was a key event                                                          // 6468
	this._disabledInputs = []; // List of date picker inputs that have been disabled                                      // 6469
	this._datepickerShowing = false; // True if the popup picker is showing , false if not                                // 6470
	this._inDialog = false; // True if showing within a "dialog", false if not                                            // 6471
	this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division                                      // 6472
	this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class                                    // 6473
	this._appendClass = 'ui-datepicker-append'; // The name of the append marker class                                    // 6474
	this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class                                 // 6475
	this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class                                    // 6476
	this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class                      // 6477
	this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class             // 6478
	this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class                         // 6479
	this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class                        // 6480
	this.regional = []; // Available regional settings, indexed by language code                                          // 6481
	this.regional[''] = { // Default regional settings                                                                    // 6482
		closeText: 'Done', // Display text for close link                                                                    // 6483
		prevText: 'Prev', // Display text for previous month link                                                            // 6484
		nextText: 'Next', // Display text for next month link                                                                // 6485
		currentText: 'Today', // Display text for current month link                                                         // 6486
		monthNames: ['January','February','March','April','May','June',                                                      // 6487
			'July','August','September','October','November','December'], // Names of months for drop-down and formatting       // 6488
		monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
		dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting          // 6490
		dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting                                  // 6491
		dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday                    // 6492
		weekHeader: 'Wk', // Column header for week of the year                                                              // 6493
		dateFormat: 'mm/dd/yy', // See format options on parseDate                                                           // 6494
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...                                                     // 6495
		isRTL: false, // True if right-to-left language, false if left-to-right                                              // 6496
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year                      // 6497
		yearSuffix: '' // Additional text to append to the year in the month headers                                         // 6498
	};                                                                                                                    // 6499
	this._defaults = { // Global defaults for all the date picker instances                                               // 6500
		showOn: 'focus', // 'focus' for popup on focus,                                                                      // 6501
			// 'button' for trigger button, or 'both' for either                                                                // 6502
		showAnim: 'fadeIn', // Name of jQuery animation for popup                                                            // 6503
		showOptions: {}, // Options for enhanced animations                                                                  // 6504
		defaultDate: null, // Used when field is blank: actual date,                                                         // 6505
			// +/-number for offset from today, null for today                                                                  // 6506
		appendText: '', // Display text following the input box, e.g. showing the format                                     // 6507
		buttonText: '...', // Text for trigger button                                                                        // 6508
		buttonImage: '', // URL for trigger button image                                                                     // 6509
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button                          // 6510
		hideIfNoPrevNext: false, // True to hide next/previous month links                                                   // 6511
			// if not applicable, false to just disable them                                                                    // 6512
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links                           // 6513
		gotoCurrent: false, // True if today link goes back to current selection instead                                     // 6514
		changeMonth: false, // True if month can be selected directly, false if only prev/next                               // 6515
		changeYear: false, // True if year can be selected directly, false if only prev/next                                 // 6516
		yearRange: 'c-10:c+10', // Range of years to display in drop-down,                                                   // 6517
			// either relative to today's year (-nn:+nn), relative to currently displayed year                                  // 6518
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)                                       // 6519
		showOtherMonths: false, // True to show dates in other months, false to leave blank                                  // 6520
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable                // 6521
		showWeek: false, // True to show week of the year, false to not show it                                              // 6522
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,                                           // 6523
			// takes a Date and returns the number of the week for it                                                           // 6524
		shortYearCutoff: '+10', // Short year values < this are in the current century,                                      // 6525
			// > this are in the previous century,                                                                              // 6526
			// string value starting with '+' for current year + value                                                          // 6527
		minDate: null, // The earliest selectable date, or null for no limit                                                 // 6528
		maxDate: null, // The latest selectable date, or null for no limit                                                   // 6529
		duration: 'fast', // Duration of display/closure                                                                     // 6530
		beforeShowDay: null, // Function that takes a date and returns an array with                                         // 6531
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',                                    // 6532
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends                                                        // 6533
		beforeShow: null, // Function that takes an input field and                                                          // 6534
			// returns a set of custom settings for the date picker                                                             // 6535
		onSelect: null, // Define a callback function when a date is selected                                                // 6536
		onChangeMonthYear: null, // Define a callback function when the month or year is changed                             // 6537
		onClose: null, // Define a callback function when the datepicker is closed                                           // 6538
		numberOfMonths: 1, // Number of months to show at a time                                                             // 6539
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)            // 6540
		stepMonths: 1, // Number of months to step back/forward                                                              // 6541
		stepBigMonths: 12, // Number of months to step back/forward for the big links                                        // 6542
		altField: '', // Selector for an alternate field to store selected dates into                                        // 6543
		altFormat: '', // The date format to use for the alternate field                                                     // 6544
		constrainInput: true, // The input is constrained by the current date format                                         // 6545
		showButtonPanel: false, // True to show button panel, false to not show it                                           // 6546
		autoSize: false, // True to size the input for the date format, false to leave as is                                 // 6547
		disabled: false // The initial disabled state                                                                        // 6548
	};                                                                                                                    // 6549
	$.extend(this._defaults, this.regional['']);                                                                          // 6550
	this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
}                                                                                                                      // 6552
                                                                                                                       // 6553
$.extend(Datepicker.prototype, {                                                                                       // 6554
	/* Class name added to elements to indicate already configured with a date picker. */                                 // 6555
	markerClassName: 'hasDatepicker',                                                                                     // 6556
                                                                                                                       // 6557
	//Keep track of the maximum number of rows displayed (see #7043)                                                      // 6558
	maxRows: 4,                                                                                                           // 6559
                                                                                                                       // 6560
	/* Debug logging (if enabled). */                                                                                     // 6561
	log: function () {                                                                                                    // 6562
		if (this.debug)                                                                                                      // 6563
			console.log.apply('', arguments);                                                                                   // 6564
	},                                                                                                                    // 6565
                                                                                                                       // 6566
	// TODO rename to "widget" when switching to widget factory                                                           // 6567
	_widgetDatepicker: function() {                                                                                       // 6568
		return this.dpDiv;                                                                                                   // 6569
	},                                                                                                                    // 6570
                                                                                                                       // 6571
	/* Override the default settings for all instances of the date picker.                                                // 6572
	   @param  settings  object - the new settings to use as defaults (anonymous object)                                  // 6573
	   @return the manager object */                                                                                      // 6574
	setDefaults: function(settings) {                                                                                     // 6575
		extendRemove(this._defaults, settings || {});                                                                        // 6576
		return this;                                                                                                         // 6577
	},                                                                                                                    // 6578
                                                                                                                       // 6579
	/* Attach the date picker to a jQuery selection.                                                                      // 6580
	   @param  target    element - the target input field or division or span                                             // 6581
	   @param  settings  object - the new settings to use for this date picker instance (anonymous) */                    // 6582
	_attachDatepicker: function(target, settings) {                                                                       // 6583
		// check for settings on the control itself - in namespace 'date:'                                                   // 6584
		var inlineSettings = null;                                                                                           // 6585
		for (var attrName in this._defaults) {                                                                               // 6586
			var attrValue = target.getAttribute('date:' + attrName);                                                            // 6587
			if (attrValue) {                                                                                                    // 6588
				inlineSettings = inlineSettings || {};                                                                             // 6589
				try {                                                                                                              // 6590
					inlineSettings[attrName] = eval(attrValue);                                                                       // 6591
				} catch (err) {                                                                                                    // 6592
					inlineSettings[attrName] = attrValue;                                                                             // 6593
				}                                                                                                                  // 6594
			}                                                                                                                   // 6595
		}                                                                                                                    // 6596
		var nodeName = target.nodeName.toLowerCase();                                                                        // 6597
		var inline = (nodeName == 'div' || nodeName == 'span');                                                              // 6598
		if (!target.id) {                                                                                                    // 6599
			this.uuid += 1;                                                                                                     // 6600
			target.id = 'dp' + this.uuid;                                                                                       // 6601
		}                                                                                                                    // 6602
		var inst = this._newInst($(target), inline);                                                                         // 6603
		inst.settings = $.extend({}, settings || {}, inlineSettings || {});                                                  // 6604
		if (nodeName == 'input') {                                                                                           // 6605
			this._connectDatepicker(target, inst);                                                                              // 6606
		} else if (inline) {                                                                                                 // 6607
			this._inlineDatepicker(target, inst);                                                                               // 6608
		}                                                                                                                    // 6609
	},                                                                                                                    // 6610
                                                                                                                       // 6611
	/* Create a new instance object. */                                                                                   // 6612
	_newInst: function(target, inline) {                                                                                  // 6613
		var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars                            // 6614
		return {id: id, input: target, // associated target                                                                  // 6615
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection                                             // 6616
			drawMonth: 0, drawYear: 0, // month being drawn                                                                     // 6617
			inline: inline, // is datepicker inline or not                                                                      // 6618
			dpDiv: (!inline ? this.dpDiv : // presentation div                                                                  // 6619
			bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
	},                                                                                                                    // 6621
                                                                                                                       // 6622
	/* Attach the date picker to an input field. */                                                                       // 6623
	_connectDatepicker: function(target, inst) {                                                                          // 6624
		var input = $(target);                                                                                               // 6625
		inst.append = $([]);                                                                                                 // 6626
		inst.trigger = $([]);                                                                                                // 6627
		if (input.hasClass(this.markerClassName))                                                                            // 6628
			return;                                                                                                             // 6629
		this._attachments(input, inst);                                                                                      // 6630
		input.addClass(this.markerClassName).keydown(this._doKeyDown).                                                       // 6631
			keypress(this._doKeyPress).keyup(this._doKeyUp).                                                                    // 6632
			bind("setData.datepicker", function(event, key, value) {                                                            // 6633
				inst.settings[key] = value;                                                                                        // 6634
			}).bind("getData.datepicker", function(event, key) {                                                                // 6635
				return this._get(inst, key);                                                                                       // 6636
			});                                                                                                                 // 6637
		this._autoSize(inst);                                                                                                // 6638
		$.data(target, PROP_NAME, inst);                                                                                     // 6639
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)       // 6640
		if( inst.settings.disabled ) {                                                                                       // 6641
			this._disableDatepicker( target );                                                                                  // 6642
		}                                                                                                                    // 6643
	},                                                                                                                    // 6644
                                                                                                                       // 6645
	/* Make attachments based on settings. */                                                                             // 6646
	_attachments: function(input, inst) {                                                                                 // 6647
		var appendText = this._get(inst, 'appendText');                                                                      // 6648
		var isRTL = this._get(inst, 'isRTL');                                                                                // 6649
		if (inst.append)                                                                                                     // 6650
			inst.append.remove();                                                                                               // 6651
		if (appendText) {                                                                                                    // 6652
			inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');                               // 6653
			input[isRTL ? 'before' : 'after'](inst.append);                                                                     // 6654
		}                                                                                                                    // 6655
		input.unbind('focus', this._showDatepicker);                                                                         // 6656
		if (inst.trigger)                                                                                                    // 6657
			inst.trigger.remove();                                                                                              // 6658
		var showOn = this._get(inst, 'showOn');                                                                              // 6659
		if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field                            // 6660
			input.focus(this._showDatepicker);                                                                                  // 6661
		if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked                              // 6662
			var buttonText = this._get(inst, 'buttonText');                                                                     // 6663
			var buttonImage = this._get(inst, 'buttonImage');                                                                   // 6664
			inst.trigger = $(this._get(inst, 'buttonImageOnly') ?                                                               // 6665
				$('<img/>').addClass(this._triggerClass).                                                                          // 6666
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :                                                  // 6667
				$('<button type="button"></button>').addClass(this._triggerClass).                                                 // 6668
					html(buttonImage == '' ? buttonText : $('<img/>').attr(                                                           // 6669
					{ src:buttonImage, alt:buttonText, title:buttonText })));                                                         // 6670
			input[isRTL ? 'before' : 'after'](inst.trigger);                                                                    // 6671
			inst.trigger.click(function() {                                                                                     // 6672
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])                                        // 6673
					$.datepicker._hideDatepicker();                                                                                   // 6674
				else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {                                 // 6675
					$.datepicker._hideDatepicker();                                                                                   // 6676
					$.datepicker._showDatepicker(input[0]);                                                                           // 6677
				} else                                                                                                             // 6678
					$.datepicker._showDatepicker(input[0]);                                                                           // 6679
				return false;                                                                                                      // 6680
			});                                                                                                                 // 6681
		}                                                                                                                    // 6682
	},                                                                                                                    // 6683
                                                                                                                       // 6684
	/* Apply the maximum length for the date format. */                                                                   // 6685
	_autoSize: function(inst) {                                                                                           // 6686
		if (this._get(inst, 'autoSize') && !inst.inline) {                                                                   // 6687
			var date = new Date(2009, 12 - 1, 20); // Ensure double digits                                                      // 6688
			var dateFormat = this._get(inst, 'dateFormat');                                                                     // 6689
			if (dateFormat.match(/[DM]/)) {                                                                                     // 6690
				var findMax = function(names) {                                                                                    // 6691
					var max = 0;                                                                                                      // 6692
					var maxI = 0;                                                                                                     // 6693
					for (var i = 0; i < names.length; i++) {                                                                          // 6694
						if (names[i].length > max) {                                                                                     // 6695
							max = names[i].length;                                                                                          // 6696
							maxI = i;                                                                                                       // 6697
						}                                                                                                                // 6698
					}                                                                                                                 // 6699
					return maxI;                                                                                                      // 6700
				};                                                                                                                 // 6701
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?                                                    // 6702
					'monthNames' : 'monthNamesShort'))));                                                                             // 6703
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?                                                     // 6704
					'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());                                                            // 6705
			}                                                                                                                   // 6706
			inst.input.attr('size', this._formatDate(inst, date).length);                                                       // 6707
		}                                                                                                                    // 6708
	},                                                                                                                    // 6709
                                                                                                                       // 6710
	/* Attach an inline date picker to a div. */                                                                          // 6711
	_inlineDatepicker: function(target, inst) {                                                                           // 6712
		var divSpan = $(target);                                                                                             // 6713
		if (divSpan.hasClass(this.markerClassName))                                                                          // 6714
			return;                                                                                                             // 6715
		divSpan.addClass(this.markerClassName).append(inst.dpDiv).                                                           // 6716
			bind("setData.datepicker", function(event, key, value){                                                             // 6717
				inst.settings[key] = value;                                                                                        // 6718
			}).bind("getData.datepicker", function(event, key){                                                                 // 6719
				return this._get(inst, key);                                                                                       // 6720
			});                                                                                                                 // 6721
		$.data(target, PROP_NAME, inst);                                                                                     // 6722
		this._setDate(inst, this._getDefaultDate(inst), true);                                                               // 6723
		this._updateDatepicker(inst);                                                                                        // 6724
		this._updateAlternate(inst);                                                                                         // 6725
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)                            // 6726
		if( inst.settings.disabled ) {                                                                                       // 6727
			this._disableDatepicker( target );                                                                                  // 6728
		}                                                                                                                    // 6729
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements                         // 6730
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height                     // 6731
		inst.dpDiv.css( "display", "block" );                                                                                // 6732
	},                                                                                                                    // 6733
                                                                                                                       // 6734
	/* Pop-up the date picker in a "dialog" box.                                                                          // 6735
	   @param  input     element - ignored                                                                                // 6736
	   @param  date      string or Date - the initial date to display                                                     // 6737
	   @param  onSelect  function - the function to call when a date is selected                                          // 6738
	   @param  settings  object - update the dialog date picker instance's settings (anonymous object)                    // 6739
	   @param  pos       int[2] - coordinates for the dialog's position within the screen or                              // 6740
	                     event - with x/y coordinates or                                                                  // 6741
	                     leave empty for default (screen centre)                                                          // 6742
	   @return the manager object */                                                                                      // 6743
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {                                                   // 6744
		var inst = this._dialogInst; // internal instance                                                                    // 6745
		if (!inst) {                                                                                                         // 6746
			this.uuid += 1;                                                                                                     // 6747
			var id = 'dp' + this.uuid;                                                                                          // 6748
			this._dialogInput = $('<input type="text" id="' + id +                                                              // 6749
				'" style="position: absolute; top: -100px; width: 0px;"/>');                                                       // 6750
			this._dialogInput.keydown(this._doKeyDown);                                                                         // 6751
			$('body').append(this._dialogInput);                                                                                // 6752
			inst = this._dialogInst = this._newInst(this._dialogInput, false);                                                  // 6753
			inst.settings = {};                                                                                                 // 6754
			$.data(this._dialogInput[0], PROP_NAME, inst);                                                                      // 6755
		}                                                                                                                    // 6756
		extendRemove(inst.settings, settings || {});                                                                         // 6757
		date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);                                     // 6758
		this._dialogInput.val(date);                                                                                         // 6759
                                                                                                                       // 6760
		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);                                              // 6761
		if (!this._pos) {                                                                                                    // 6762
			var browserWidth = document.documentElement.clientWidth;                                                            // 6763
			var browserHeight = document.documentElement.clientHeight;                                                          // 6764
			var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;                                      // 6765
			var scrollY = document.documentElement.scrollTop || document.body.scrollTop;                                        // 6766
			this._pos = // should use actual width/height below                                                                 // 6767
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];                                         // 6768
		}                                                                                                                    // 6769
                                                                                                                       // 6770
		// move input on screen for focus, but hidden behind dialog                                                          // 6771
		this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');                           // 6772
		inst.settings.onSelect = onSelect;                                                                                   // 6773
		this._inDialog = true;                                                                                               // 6774
		this.dpDiv.addClass(this._dialogClass);                                                                              // 6775
		this._showDatepicker(this._dialogInput[0]);                                                                          // 6776
		if ($.blockUI)                                                                                                       // 6777
			$.blockUI(this.dpDiv);                                                                                              // 6778
		$.data(this._dialogInput[0], PROP_NAME, inst);                                                                       // 6779
		return this;                                                                                                         // 6780
	},                                                                                                                    // 6781
                                                                                                                       // 6782
	/* Detach a datepicker from its control.                                                                              // 6783
	   @param  target    element - the target input field or division or span */                                          // 6784
	_destroyDatepicker: function(target) {                                                                                // 6785
		var $target = $(target);                                                                                             // 6786
		var inst = $.data(target, PROP_NAME);                                                                                // 6787
		if (!$target.hasClass(this.markerClassName)) {                                                                       // 6788
			return;                                                                                                             // 6789
		}                                                                                                                    // 6790
		var nodeName = target.nodeName.toLowerCase();                                                                        // 6791
		$.removeData(target, PROP_NAME);                                                                                     // 6792
		if (nodeName == 'input') {                                                                                           // 6793
			inst.append.remove();                                                                                               // 6794
			inst.trigger.remove();                                                                                              // 6795
			$target.removeClass(this.markerClassName).                                                                          // 6796
				unbind('focus', this._showDatepicker).                                                                             // 6797
				unbind('keydown', this._doKeyDown).                                                                                // 6798
				unbind('keypress', this._doKeyPress).                                                                              // 6799
				unbind('keyup', this._doKeyUp);                                                                                    // 6800
		} else if (nodeName == 'div' || nodeName == 'span')                                                                  // 6801
			$target.removeClass(this.markerClassName).empty();                                                                  // 6802
	},                                                                                                                    // 6803
                                                                                                                       // 6804
	/* Enable the date picker to a jQuery selection.                                                                      // 6805
	   @param  target    element - the target input field or division or span */                                          // 6806
	_enableDatepicker: function(target) {                                                                                 // 6807
		var $target = $(target);                                                                                             // 6808
		var inst = $.data(target, PROP_NAME);                                                                                // 6809
		if (!$target.hasClass(this.markerClassName)) {                                                                       // 6810
			return;                                                                                                             // 6811
		}                                                                                                                    // 6812
		var nodeName = target.nodeName.toLowerCase();                                                                        // 6813
		if (nodeName == 'input') {                                                                                           // 6814
			target.disabled = false;                                                                                            // 6815
			inst.trigger.filter('button').                                                                                      // 6816
				each(function() { this.disabled = false; }).end().                                                                 // 6817
				filter('img').css({opacity: '1.0', cursor: ''});                                                                   // 6818
		}                                                                                                                    // 6819
		else if (nodeName == 'div' || nodeName == 'span') {                                                                  // 6820
			var inline = $target.children('.' + this._inlineClass);                                                             // 6821
			inline.children().removeClass('ui-state-disabled');                                                                 // 6822
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").                                               // 6823
				prop("disabled", false);                                                                                           // 6824
		}                                                                                                                    // 6825
		this._disabledInputs = $.map(this._disabledInputs,                                                                   // 6826
			function(value) { return (value == target ? null : value); }); // delete entry                                      // 6827
	},                                                                                                                    // 6828
                                                                                                                       // 6829
	/* Disable the date picker to a jQuery selection.                                                                     // 6830
	   @param  target    element - the target input field or division or span */                                          // 6831
	_disableDatepicker: function(target) {                                                                                // 6832
		var $target = $(target);                                                                                             // 6833
		var inst = $.data(target, PROP_NAME);                                                                                // 6834
		if (!$target.hasClass(this.markerClassName)) {                                                                       // 6835
			return;                                                                                                             // 6836
		}                                                                                                                    // 6837
		var nodeName = target.nodeName.toLowerCase();                                                                        // 6838
		if (nodeName == 'input') {                                                                                           // 6839
			target.disabled = true;                                                                                             // 6840
			inst.trigger.filter('button').                                                                                      // 6841
				each(function() { this.disabled = true; }).end().                                                                  // 6842
				filter('img').css({opacity: '0.5', cursor: 'default'});                                                            // 6843
		}                                                                                                                    // 6844
		else if (nodeName == 'div' || nodeName == 'span') {                                                                  // 6845
			var inline = $target.children('.' + this._inlineClass);                                                             // 6846
			inline.children().addClass('ui-state-disabled');                                                                    // 6847
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").                                               // 6848
				prop("disabled", true);                                                                                            // 6849
		}                                                                                                                    // 6850
		this._disabledInputs = $.map(this._disabledInputs,                                                                   // 6851
			function(value) { return (value == target ? null : value); }); // delete entry                                      // 6852
		this._disabledInputs[this._disabledInputs.length] = target;                                                          // 6853
	},                                                                                                                    // 6854
                                                                                                                       // 6855
	/* Is the first field in a jQuery collection disabled as a datepicker?                                                // 6856
	   @param  target    element - the target input field or division or span                                             // 6857
	   @return boolean - true if disabled, false if enabled */                                                            // 6858
	_isDisabledDatepicker: function(target) {                                                                             // 6859
		if (!target) {                                                                                                       // 6860
			return false;                                                                                                       // 6861
		}                                                                                                                    // 6862
		for (var i = 0; i < this._disabledInputs.length; i++) {                                                              // 6863
			if (this._disabledInputs[i] == target)                                                                              // 6864
				return true;                                                                                                       // 6865
		}                                                                                                                    // 6866
		return false;                                                                                                        // 6867
	},                                                                                                                    // 6868
                                                                                                                       // 6869
	/* Retrieve the instance data for the target control.                                                                 // 6870
	   @param  target  element - the target input field or division or span                                               // 6871
	   @return  object - the associated instance data                                                                     // 6872
	   @throws  error if a jQuery problem getting data */                                                                 // 6873
	_getInst: function(target) {                                                                                          // 6874
		try {                                                                                                                // 6875
			return $.data(target, PROP_NAME);                                                                                   // 6876
		}                                                                                                                    // 6877
		catch (err) {                                                                                                        // 6878
			throw 'Missing instance data for this datepicker';                                                                  // 6879
		}                                                                                                                    // 6880
	},                                                                                                                    // 6881
                                                                                                                       // 6882
	/* Update or retrieve the settings for a date picker attached to an input field or division.                          // 6883
	   @param  target  element - the target input field or division or span                                               // 6884
	   @param  name    object - the new settings to update or                                                             // 6885
	                   string - the name of the setting to change or retrieve,                                            // 6886
	                   when retrieving also 'all' for all instance settings or                                            // 6887
	                   'defaults' for all global defaults                                                                 // 6888
	   @param  value   any - the new value for the setting                                                                // 6889
	                   (omit if above is an object or to retrieve a value) */                                             // 6890
	_optionDatepicker: function(target, name, value) {                                                                    // 6891
		var inst = this._getInst(target);                                                                                    // 6892
		if (arguments.length == 2 && typeof name == 'string') {                                                              // 6893
			return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :                                                 // 6894
				(inst ? (name == 'all' ? $.extend({}, inst.settings) :                                                             // 6895
				this._get(inst, name)) : null));                                                                                   // 6896
		}                                                                                                                    // 6897
		var settings = name || {};                                                                                           // 6898
		if (typeof name == 'string') {                                                                                       // 6899
			settings = {};                                                                                                      // 6900
			settings[name] = value;                                                                                             // 6901
		}                                                                                                                    // 6902
		if (inst) {                                                                                                          // 6903
			if (this._curInst == inst) {                                                                                        // 6904
				this._hideDatepicker();                                                                                            // 6905
			}                                                                                                                   // 6906
			var date = this._getDateDatepicker(target, true);                                                                   // 6907
			var minDate = this._getMinMaxDate(inst, 'min');                                                                     // 6908
			var maxDate = this._getMinMaxDate(inst, 'max');                                                                     // 6909
			extendRemove(inst.settings, settings);                                                                              // 6910
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided           // 6911
			if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)                  // 6912
				inst.settings.minDate = this._formatDate(inst, minDate);                                                           // 6913
			if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)                  // 6914
				inst.settings.maxDate = this._formatDate(inst, maxDate);                                                           // 6915
			this._attachments($(target), inst);                                                                                 // 6916
			this._autoSize(inst);                                                                                               // 6917
			this._setDate(inst, date);                                                                                          // 6918
			this._updateAlternate(inst);                                                                                        // 6919
			this._updateDatepicker(inst);                                                                                       // 6920
		}                                                                                                                    // 6921
	},                                                                                                                    // 6922
                                                                                                                       // 6923
	// change method deprecated                                                                                           // 6924
	_changeDatepicker: function(target, name, value) {                                                                    // 6925
		this._optionDatepicker(target, name, value);                                                                         // 6926
	},                                                                                                                    // 6927
                                                                                                                       // 6928
	/* Redraw the date picker attached to an input field or division.                                                     // 6929
	   @param  target  element - the target input field or division or span */                                            // 6930
	_refreshDatepicker: function(target) {                                                                                // 6931
		var inst = this._getInst(target);                                                                                    // 6932
		if (inst) {                                                                                                          // 6933
			this._updateDatepicker(inst);                                                                                       // 6934
		}                                                                                                                    // 6935
	},                                                                                                                    // 6936
                                                                                                                       // 6937
	/* Set the dates for a jQuery selection.                                                                              // 6938
	   @param  target   element - the target input field or division or span                                              // 6939
	   @param  date     Date - the new date */                                                                            // 6940
	_setDateDatepicker: function(target, date) {                                                                          // 6941
		var inst = this._getInst(target);                                                                                    // 6942
		if (inst) {                                                                                                          // 6943
			this._setDate(inst, date);                                                                                          // 6944
			this._updateDatepicker(inst);                                                                                       // 6945
			this._updateAlternate(inst);                                                                                        // 6946
		}                                                                                                                    // 6947
	},                                                                                                                    // 6948
                                                                                                                       // 6949
	/* Get the date(s) for the first entry in a jQuery selection.                                                         // 6950
	   @param  target     element - the target input field or division or span                                            // 6951
	   @param  noDefault  boolean - true if no default date is to be used                                                 // 6952
	   @return Date - the current date */                                                                                 // 6953
	_getDateDatepicker: function(target, noDefault) {                                                                     // 6954
		var inst = this._getInst(target);                                                                                    // 6955
		if (inst && !inst.inline)                                                                                            // 6956
			this._setDateFromField(inst, noDefault);                                                                            // 6957
		return (inst ? this._getDate(inst) : null);                                                                          // 6958
	},                                                                                                                    // 6959
                                                                                                                       // 6960
	/* Handle keystrokes. */                                                                                              // 6961
	_doKeyDown: function(event) {                                                                                         // 6962
		var inst = $.datepicker._getInst(event.target);                                                                      // 6963
		var handled = true;                                                                                                  // 6964
		var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');                                                                     // 6965
		inst._keyEvent = true;                                                                                               // 6966
		if ($.datepicker._datepickerShowing)                                                                                 // 6967
			switch (event.keyCode) {                                                                                            // 6968
				case 9: $.datepicker._hideDatepicker();                                                                            // 6969
						handled = false;                                                                                                 // 6970
						break; // hide on tab out                                                                                        // 6971
				case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' +                                               // 6972
									$.datepicker._currentClass + ')', inst.dpDiv);                                                                // 6973
						if (sel[0])                                                                                                      // 6974
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);                           // 6975
							var onSelect = $.datepicker._get(inst, 'onSelect');                                                             // 6976
							if (onSelect) {                                                                                                 // 6977
								var dateStr = $.datepicker._formatDate(inst);                                                                  // 6978
                                                                                                                       // 6979
								// trigger custom callback                                                                                     // 6980
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);                                          // 6981
							}                                                                                                               // 6982
						else                                                                                                             // 6983
							$.datepicker._hideDatepicker();                                                                                 // 6984
						return false; // don't submit the form                                                                           // 6985
						break; // select the value on enter                                                                              // 6986
				case 27: $.datepicker._hideDatepicker();                                                                           // 6987
						break; // hide on escape                                                                                         // 6988
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?                                                   // 6989
							-$.datepicker._get(inst, 'stepBigMonths') :                                                                     // 6990
							-$.datepicker._get(inst, 'stepMonths')), 'M');                                                                  // 6991
						break; // previous month/year on page up/+ ctrl                                                                  // 6992
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?                                                   // 6993
							+$.datepicker._get(inst, 'stepBigMonths') :                                                                     // 6994
							+$.datepicker._get(inst, 'stepMonths')), 'M');                                                                  // 6995
						break; // next month/year on page down/+ ctrl                                                                    // 6996
				case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);                                // 6997
						handled = event.ctrlKey || event.metaKey;                                                                        // 6998
						break; // clear on ctrl or command +end                                                                          // 6999
				case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);                                // 7000
						handled = event.ctrlKey || event.metaKey;                                                                        // 7001
						break; // current on ctrl or command +home                                                                       // 7002
				case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');       // 7003
						handled = event.ctrlKey || event.metaKey;                                                                        // 7004
						// -1 day on ctrl or command +left                                                                               // 7005
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?                          // 7006
									-$.datepicker._get(inst, 'stepBigMonths') :                                                                   // 7007
									-$.datepicker._get(inst, 'stepMonths')), 'M');                                                                // 7008
						// next month/year on alt +left on Mac                                                                           // 7009
						break;                                                                                                           // 7010
				case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');                      // 7011
						handled = event.ctrlKey || event.metaKey;                                                                        // 7012
						break; // -1 week on ctrl or command +up                                                                         // 7013
				case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');       // 7014
						handled = event.ctrlKey || event.metaKey;                                                                        // 7015
						// +1 day on ctrl or command +right                                                                              // 7016
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?                          // 7017
									+$.datepicker._get(inst, 'stepBigMonths') :                                                                   // 7018
									+$.datepicker._get(inst, 'stepMonths')), 'M');                                                                // 7019
						// next month/year on alt +right                                                                                 // 7020
						break;                                                                                                           // 7021
				case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');                      // 7022
						handled = event.ctrlKey || event.metaKey;                                                                        // 7023
						break; // +1 week on ctrl or command +down                                                                       // 7024
				default: handled = false;                                                                                          // 7025
			}                                                                                                                   // 7026
		else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home                               // 7027
			$.datepicker._showDatepicker(this);                                                                                 // 7028
		else {                                                                                                               // 7029
			handled = false;                                                                                                    // 7030
		}                                                                                                                    // 7031
		if (handled) {                                                                                                       // 7032
			event.preventDefault();                                                                                             // 7033
			event.stopPropagation();                                                                                            // 7034
		}                                                                                                                    // 7035
	},                                                                                                                    // 7036
                                                                                                                       // 7037
	/* Filter entered characters - based on date format. */                                                               // 7038
	_doKeyPress: function(event) {                                                                                        // 7039
		var inst = $.datepicker._getInst(event.target);                                                                      // 7040
		if ($.datepicker._get(inst, 'constrainInput')) {                                                                     // 7041
			var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));                                     // 7042
			var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);                        // 7043
			return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);                          // 7044
		}                                                                                                                    // 7045
	},                                                                                                                    // 7046
                                                                                                                       // 7047
	/* Synchronise manual entry and field/alternate field. */                                                             // 7048
	_doKeyUp: function(event) {                                                                                           // 7049
		var inst = $.datepicker._getInst(event.target);                                                                      // 7050
		if (inst.input.val() != inst.lastVal) {                                                                              // 7051
			try {                                                                                                               // 7052
				var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),                                           // 7053
					(inst.input ? inst.input.val() : null),                                                                           // 7054
					$.datepicker._getFormatConfig(inst));                                                                             // 7055
				if (date) { // only if valid                                                                                       // 7056
					$.datepicker._setDateFromField(inst);                                                                             // 7057
					$.datepicker._updateAlternate(inst);                                                                              // 7058
					$.datepicker._updateDatepicker(inst);                                                                             // 7059
				}                                                                                                                  // 7060
			}                                                                                                                   // 7061
			catch (err) {                                                                                                       // 7062
				$.datepicker.log(err);                                                                                             // 7063
			}                                                                                                                   // 7064
		}                                                                                                                    // 7065
		return true;                                                                                                         // 7066
	},                                                                                                                    // 7067
                                                                                                                       // 7068
	/* Pop-up the date picker for a given input field.                                                                    // 7069
	   If false returned from beforeShow event handler do not show.                                                       // 7070
	   @param  input  element - the input field attached to the date picker or                                            // 7071
	                  event - if triggered by focus */                                                                    // 7072
	_showDatepicker: function(input) {                                                                                    // 7073
		input = input.target || input;                                                                                       // 7074
		if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger                                       // 7075
			input = $('input', input.parentNode)[0];                                                                            // 7076
		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here                   // 7077
			return;                                                                                                             // 7078
		var inst = $.datepicker._getInst(input);                                                                             // 7079
		if ($.datepicker._curInst && $.datepicker._curInst != inst) {                                                        // 7080
			$.datepicker._curInst.dpDiv.stop(true, true);                                                                       // 7081
			if ( inst && $.datepicker._datepickerShowing ) {                                                                    // 7082
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );                                                    // 7083
			}                                                                                                                   // 7084
		}                                                                                                                    // 7085
		var beforeShow = $.datepicker._get(inst, 'beforeShow');                                                              // 7086
		var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};                                   // 7087
		if(beforeShowSettings === false){                                                                                    // 7088
			//false                                                                                                             // 7089
			return;                                                                                                             // 7090
		}                                                                                                                    // 7091
		extendRemove(inst.settings, beforeShowSettings);                                                                     // 7092
		inst.lastVal = null;                                                                                                 // 7093
		$.datepicker._lastInput = input;                                                                                     // 7094
		$.datepicker._setDateFromField(inst);                                                                                // 7095
		if ($.datepicker._inDialog) // hide cursor                                                                           // 7096
			input.value = '';                                                                                                   // 7097
		if (!$.datepicker._pos) { // position below input                                                                    // 7098
			$.datepicker._pos = $.datepicker._findPos(input);                                                                   // 7099
			$.datepicker._pos[1] += input.offsetHeight; // add the height                                                       // 7100
		}                                                                                                                    // 7101
		var isFixed = false;                                                                                                 // 7102
		$(input).parents().each(function() {                                                                                 // 7103
			isFixed |= $(this).css('position') == 'fixed';                                                                      // 7104
			return !isFixed;                                                                                                    // 7105
		});                                                                                                                  // 7106
		var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};                                                // 7107
		$.datepicker._pos = null;                                                                                            // 7108
		//to avoid flashes on Firefox                                                                                        // 7109
		inst.dpDiv.empty();                                                                                                  // 7110
		// determine sizing offscreen                                                                                        // 7111
		inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});                                            // 7112
		$.datepicker._updateDatepicker(inst);                                                                                // 7113
		// fix width for dynamic number of date pickers                                                                      // 7114
		// and adjust position before showing                                                                                // 7115
		offset = $.datepicker._checkOffset(inst, offset, isFixed);                                                           // 7116
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?                                                     // 7117
			'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',                                                      // 7118
			left: offset.left + 'px', top: offset.top + 'px'});                                                                 // 7119
		if (!inst.inline) {                                                                                                  // 7120
			var showAnim = $.datepicker._get(inst, 'showAnim');                                                                 // 7121
			var duration = $.datepicker._get(inst, 'duration');                                                                 // 7122
			var postProcess = function() {                                                                                      // 7123
				var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only                                            // 7124
				if( !! cover.length ){                                                                                             // 7125
					var borders = $.datepicker._getBorders(inst.dpDiv);                                                               // 7126
					cover.css({left: -borders[0], top: -borders[1],                                                                   // 7127
						width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});                                              // 7128
				}                                                                                                                  // 7129
			};                                                                                                                  // 7130
			inst.dpDiv.zIndex($(input).zIndex()+1);                                                                             // 7131
			$.datepicker._datepickerShowing = true;                                                                             // 7132
                                                                                                                       // 7133
			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed                                               // 7134
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) )                                       // 7135
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);                          // 7136
			else                                                                                                                // 7137
				inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);                                         // 7138
			if (!showAnim || !duration)                                                                                         // 7139
				postProcess();                                                                                                     // 7140
			if (inst.input.is(':visible') && !inst.input.is(':disabled'))                                                       // 7141
				inst.input.focus();                                                                                                // 7142
			$.datepicker._curInst = inst;                                                                                       // 7143
		}                                                                                                                    // 7144
	},                                                                                                                    // 7145
                                                                                                                       // 7146
	/* Generate the date picker content. */                                                                               // 7147
	_updateDatepicker: function(inst) {                                                                                   // 7148
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)                                         // 7149
		var borders = $.datepicker._getBorders(inst.dpDiv);                                                                  // 7150
		instActive = inst; // for delegate hover events                                                                      // 7151
		inst.dpDiv.empty().append(this._generateHTML(inst));                                                                 // 7152
		this._attachHandlers(inst);                                                                                          // 7153
		var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only                                              // 7154
		if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6                                                    // 7155
			cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})  // 7156
		}                                                                                                                    // 7157
		inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();                                                        // 7158
		var numMonths = this._getNumberOfMonths(inst);                                                                       // 7159
		var cols = numMonths[1];                                                                                             // 7160
		var width = 17;                                                                                                      // 7161
		inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');               // 7162
		if (cols > 1)                                                                                                        // 7163
			inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');                             // 7164
		inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +                                             // 7165
			'Class']('ui-datepicker-multi');                                                                                    // 7166
		inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +                                                           // 7167
			'Class']('ui-datepicker-rtl');                                                                                      // 7168
		if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&                                // 7169
				// #6694 - don't focus the input if it's already focused                                                           // 7170
				// this breaks the change event in IE                                                                              // 7171
				inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)               // 7172
			inst.input.focus();                                                                                                 // 7173
		// deffered render of the years select (to avoid flashes on Firefox)                                                 // 7174
		if( inst.yearshtml ){                                                                                                // 7175
			var origyearshtml = inst.yearshtml;                                                                                 // 7176
			setTimeout(function(){                                                                                              // 7177
				//assure that inst.yearshtml didn't change.                                                                        // 7178
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){                                                          // 7179
					inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);                                   // 7180
				}                                                                                                                  // 7181
				origyearshtml = inst.yearshtml = null;                                                                             // 7182
			}, 0);                                                                                                              // 7183
		}                                                                                                                    // 7184
	},                                                                                                                    // 7185
                                                                                                                       // 7186
	/* Retrieve the size of left and top borders for an element.                                                          // 7187
	   @param  elem  (jQuery object) the element of interest                                                              // 7188
	   @return  (number[2]) the left and top borders */                                                                   // 7189
	_getBorders: function(elem) {                                                                                         // 7190
		var convert = function(value) {                                                                                      // 7191
			return {thin: 1, medium: 2, thick: 3}[value] || value;                                                              // 7192
		};                                                                                                                   // 7193
		return [parseFloat(convert(elem.css('border-left-width'))),                                                          // 7194
			parseFloat(convert(elem.css('border-top-width')))];                                                                 // 7195
	},                                                                                                                    // 7196
                                                                                                                       // 7197
	/* Check positioning to remain on screen. */                                                                          // 7198
	_checkOffset: function(inst, offset, isFixed) {                                                                       // 7199
		var dpWidth = inst.dpDiv.outerWidth();                                                                               // 7200
		var dpHeight = inst.dpDiv.outerHeight();                                                                             // 7201
		var inputWidth = inst.input ? inst.input.outerWidth() : 0;                                                           // 7202
		var inputHeight = inst.input ? inst.input.outerHeight() : 0;                                                         // 7203
		var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());                     // 7204
		var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());                    // 7205
                                                                                                                       // 7206
		offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);                                              // 7207
		offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;                  // 7208
		offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;      // 7209
                                                                                                                       // 7210
		// now check if datepicker is showing outside window viewport - move to a better place if so.                        // 7211
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?                    // 7212
			Math.abs(offset.left + dpWidth - viewWidth) : 0);                                                                   // 7213
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?                   // 7214
			Math.abs(dpHeight + inputHeight) : 0);                                                                              // 7215
                                                                                                                       // 7216
		return offset;                                                                                                       // 7217
	},                                                                                                                    // 7218
                                                                                                                       // 7219
	/* Find an object's position on the screen. */                                                                        // 7220
	_findPos: function(obj) {                                                                                             // 7221
		var inst = this._getInst(obj);                                                                                       // 7222
		var isRTL = this._get(inst, 'isRTL');                                                                                // 7223
		while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {                           // 7224
			obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];                                                               // 7225
		}                                                                                                                    // 7226
		var position = $(obj).offset();                                                                                      // 7227
		return [position.left, position.top];                                                                                // 7228
	},                                                                                                                    // 7229
                                                                                                                       // 7230
	/* Hide the date picker from view.                                                                                    // 7231
	   @param  input  element - the input field attached to the date picker */                                            // 7232
	_hideDatepicker: function(input) {                                                                                    // 7233
		var inst = this._curInst;                                                                                            // 7234
		if (!inst || (input && inst != $.data(input, PROP_NAME)))                                                            // 7235
			return;                                                                                                             // 7236
		if (this._datepickerShowing) {                                                                                       // 7237
			var showAnim = this._get(inst, 'showAnim');                                                                         // 7238
			var duration = this._get(inst, 'duration');                                                                         // 7239
			var postProcess = function() {                                                                                      // 7240
				$.datepicker._tidyDialog(inst);                                                                                    // 7241
			};                                                                                                                  // 7242
                                                                                                                       // 7243
			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed                                               // 7244
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) )                                       // 7245
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);                          // 7246
			else                                                                                                                // 7247
				inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :                                                                  // 7248
					(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);                         // 7249
			if (!showAnim)                                                                                                      // 7250
				postProcess();                                                                                                     // 7251
			this._datepickerShowing = false;                                                                                    // 7252
			var onClose = this._get(inst, 'onClose');                                                                           // 7253
			if (onClose)                                                                                                        // 7254
				onClose.apply((inst.input ? inst.input[0] : null),                                                                 // 7255
					[(inst.input ? inst.input.val() : ''), inst]);                                                                    // 7256
			this._lastInput = null;                                                                                             // 7257
			if (this._inDialog) {                                                                                               // 7258
				this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });                                         // 7259
				if ($.blockUI) {                                                                                                   // 7260
					$.unblockUI();                                                                                                    // 7261
					$('body').append(this.dpDiv);                                                                                     // 7262
				}                                                                                                                  // 7263
			}                                                                                                                   // 7264
			this._inDialog = false;                                                                                             // 7265
		}                                                                                                                    // 7266
	},                                                                                                                    // 7267
                                                                                                                       // 7268
	/* Tidy up after a dialog display. */                                                                                 // 7269
	_tidyDialog: function(inst) {                                                                                         // 7270
		inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');                                         // 7271
	},                                                                                                                    // 7272
                                                                                                                       // 7273
	/* Close date picker if clicked elsewhere. */                                                                         // 7274
	_checkExternalClick: function(event) {                                                                                // 7275
		if (!$.datepicker._curInst)                                                                                          // 7276
			return;                                                                                                             // 7277
                                                                                                                       // 7278
		var $target = $(event.target),                                                                                       // 7279
			inst = $.datepicker._getInst($target[0]);                                                                           // 7280
                                                                                                                       // 7281
		if ( ( ( $target[0].id != $.datepicker._mainDivId &&                                                                 // 7282
				$target.parents('#' + $.datepicker._mainDivId).length == 0 &&                                                      // 7283
				!$target.hasClass($.datepicker.markerClassName) &&                                                                 // 7284
				!$target.closest("." + $.datepicker._triggerClass).length &&                                                       // 7285
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||                                   // 7286
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst ) )                               // 7287
			$.datepicker._hideDatepicker();                                                                                     // 7288
	},                                                                                                                    // 7289
                                                                                                                       // 7290
	/* Adjust one of the date sub-fields. */                                                                              // 7291
	_adjustDate: function(id, offset, period) {                                                                           // 7292
		var target = $(id);                                                                                                  // 7293
		var inst = this._getInst(target[0]);                                                                                 // 7294
		if (this._isDisabledDatepicker(target[0])) {                                                                         // 7295
			return;                                                                                                             // 7296
		}                                                                                                                    // 7297
		this._adjustInstDate(inst, offset +                                                                                  // 7298
			(period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning                                      // 7299
			period);                                                                                                            // 7300
		this._updateDatepicker(inst);                                                                                        // 7301
	},                                                                                                                    // 7302
                                                                                                                       // 7303
	/* Action for current link. */                                                                                        // 7304
	_gotoToday: function(id) {                                                                                            // 7305
		var target = $(id);                                                                                                  // 7306
		var inst = this._getInst(target[0]);                                                                                 // 7307
		if (this._get(inst, 'gotoCurrent') && inst.currentDay) {                                                             // 7308
			inst.selectedDay = inst.currentDay;                                                                                 // 7309
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;                                                            // 7310
			inst.drawYear = inst.selectedYear = inst.currentYear;                                                               // 7311
		}                                                                                                                    // 7312
		else {                                                                                                               // 7313
			var date = new Date();                                                                                              // 7314
			inst.selectedDay = date.getDate();                                                                                  // 7315
			inst.drawMonth = inst.selectedMonth = date.getMonth();                                                              // 7316
			inst.drawYear = inst.selectedYear = date.getFullYear();                                                             // 7317
		}                                                                                                                    // 7318
		this._notifyChange(inst);                                                                                            // 7319
		this._adjustDate(target);                                                                                            // 7320
	},                                                                                                                    // 7321
                                                                                                                       // 7322
	/* Action for selecting a new month/year. */                                                                          // 7323
	_selectMonthYear: function(id, select, period) {                                                                      // 7324
		var target = $(id);                                                                                                  // 7325
		var inst = this._getInst(target[0]);                                                                                 // 7326
		inst['selected' + (period == 'M' ? 'Month' : 'Year')] =                                                              // 7327
		inst['draw' + (period == 'M' ? 'Month' : 'Year')] =                                                                  // 7328
			parseInt(select.options[select.selectedIndex].value,10);                                                            // 7329
		this._notifyChange(inst);                                                                                            // 7330
		this._adjustDate(target);                                                                                            // 7331
	},                                                                                                                    // 7332
                                                                                                                       // 7333
	/* Action for selecting a day. */                                                                                     // 7334
	_selectDay: function(id, month, year, td) {                                                                           // 7335
		var target = $(id);                                                                                                  // 7336
		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {                              // 7337
			return;                                                                                                             // 7338
		}                                                                                                                    // 7339
		var inst = this._getInst(target[0]);                                                                                 // 7340
		inst.selectedDay = inst.currentDay = $('a', td).html();                                                              // 7341
		inst.selectedMonth = inst.currentMonth = month;                                                                      // 7342
		inst.selectedYear = inst.currentYear = year;                                                                         // 7343
		this._selectDate(id, this._formatDate(inst,                                                                          // 7344
			inst.currentDay, inst.currentMonth, inst.currentYear));                                                             // 7345
	},                                                                                                                    // 7346
                                                                                                                       // 7347
	/* Erase the input field and hide the date picker. */                                                                 // 7348
	_clearDate: function(id) {                                                                                            // 7349
		var target = $(id);                                                                                                  // 7350
		var inst = this._getInst(target[0]);                                                                                 // 7351
		this._selectDate(target, '');                                                                                        // 7352
	},                                                                                                                    // 7353
                                                                                                                       // 7354
	/* Update the input field with the selected date. */                                                                  // 7355
	_selectDate: function(id, dateStr) {                                                                                  // 7356
		var target = $(id);                                                                                                  // 7357
		var inst = this._getInst(target[0]);                                                                                 // 7358
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));                                                      // 7359
		if (inst.input)                                                                                                      // 7360
			inst.input.val(dateStr);                                                                                            // 7361
		this._updateAlternate(inst);                                                                                         // 7362
		var onSelect = this._get(inst, 'onSelect');                                                                          // 7363
		if (onSelect)                                                                                                        // 7364
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback                   // 7365
		else if (inst.input)                                                                                                 // 7366
			inst.input.trigger('change'); // fire the change event                                                              // 7367
		if (inst.inline)                                                                                                     // 7368
			this._updateDatepicker(inst);                                                                                       // 7369
		else {                                                                                                               // 7370
			this._hideDatepicker();                                                                                             // 7371
			this._lastInput = inst.input[0];                                                                                    // 7372
			if (typeof(inst.input[0]) != 'object')                                                                              // 7373
				inst.input.focus(); // restore focus                                                                               // 7374
			this._lastInput = null;                                                                                             // 7375
		}                                                                                                                    // 7376
	},                                                                                                                    // 7377
                                                                                                                       // 7378
	/* Update any alternate field to synchronise with the main field. */                                                  // 7379
	_updateAlternate: function(inst) {                                                                                    // 7380
		var altField = this._get(inst, 'altField');                                                                          // 7381
		if (altField) { // update alternate field too                                                                        // 7382
			var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');                                      // 7383
			var date = this._getDate(inst);                                                                                     // 7384
			var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));                                        // 7385
			$(altField).each(function() { $(this).val(dateStr); });                                                             // 7386
		}                                                                                                                    // 7387
	},                                                                                                                    // 7388
                                                                                                                       // 7389
	/* Set as beforeShowDay function to prevent selection of weekends.                                                    // 7390
	   @param  date  Date - the date to customise                                                                         // 7391
	   @return [boolean, string] - is this date selectable?, what is its CSS class? */                                    // 7392
	noWeekends: function(date) {                                                                                          // 7393
		var day = date.getDay();                                                                                             // 7394
		return [(day > 0 && day < 6), ''];                                                                                   // 7395
	},                                                                                                                    // 7396
                                                                                                                       // 7397
	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.                           // 7398
	   @param  date  Date - the date to get the week for                                                                  // 7399
	   @return  number - the number of the week within the year that contains this date */                                // 7400
	iso8601Week: function(date) {                                                                                         // 7401
		var checkDate = new Date(date.getTime());                                                                            // 7402
		// Find Thursday of this week starting on Monday                                                                     // 7403
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));                                              // 7404
		var time = checkDate.getTime();                                                                                      // 7405
		checkDate.setMonth(0); // Compare with Jan 1                                                                         // 7406
		checkDate.setDate(1);                                                                                                // 7407
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;                                                // 7408
	},                                                                                                                    // 7409
                                                                                                                       // 7410
	/* Parse a string value into a date object.                                                                           // 7411
	   See formatDate below for the possible formats.                                                                     // 7412
                                                                                                                       // 7413
	   @param  format    string - the expected format of the date                                                         // 7414
	   @param  value     string - the date in the above format                                                            // 7415
	   @param  settings  Object - attributes include:                                                                     // 7416
	                     shortYearCutoff  number - the cutoff year for determining the century (optional)                 // 7417
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)                // 7418
	                     dayNames         string[7] - names of the days from Sunday (optional)                            // 7419
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)                         // 7420
	                     monthNames       string[12] - names of the months (optional)                                     // 7421
	   @return  Date - the extracted date value or null if value is blank */                                              // 7422
	parseDate: function (format, value, settings) {                                                                       // 7423
		if (format == null || value == null)                                                                                 // 7424
			throw 'Invalid arguments';                                                                                          // 7425
		value = (typeof value == 'object' ? value.toString() : value + '');                                                  // 7426
		if (value == '')                                                                                                     // 7427
			return null;                                                                                                        // 7428
		var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;                // 7429
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :                                            // 7430
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));                                                   // 7431
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;                      // 7432
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;                                     // 7433
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;                // 7434
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;                               // 7435
		var year = -1;                                                                                                       // 7436
		var month = -1;                                                                                                      // 7437
		var day = -1;                                                                                                        // 7438
		var doy = -1;                                                                                                        // 7439
		var literal = false;                                                                                                 // 7440
		// Check whether a format character is doubled                                                                       // 7441
		var lookAhead = function(match) {                                                                                    // 7442
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);                                 // 7443
			if (matches)                                                                                                        // 7444
				iFormat++;                                                                                                         // 7445
			return matches;                                                                                                     // 7446
		};                                                                                                                   // 7447
		// Extract a number from the string value                                                                            // 7448
		var getNumber = function(match) {                                                                                    // 7449
			var isDoubled = lookAhead(match);                                                                                   // 7450
			var size = (match == '@' ? 14 : (match == '!' ? 20 :                                                                // 7451
				(match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));                                                        // 7452
			var digits = new RegExp('^\\d{1,' + size + '}');                                                                    // 7453
			var num = value.substring(iValue).match(digits);                                                                    // 7454
			if (!num)                                                                                                           // 7455
				throw 'Missing number at position ' + iValue;                                                                      // 7456
			iValue += num[0].length;                                                                                            // 7457
			return parseInt(num[0], 10);                                                                                        // 7458
		};                                                                                                                   // 7459
		// Extract a name from the string value and convert to an index                                                      // 7460
		var getName = function(match, shortNames, longNames) {                                                               // 7461
			var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {                                      // 7462
				return [ [k, v] ];                                                                                                 // 7463
			}).sort(function (a, b) {                                                                                           // 7464
				return -(a[1].length - b[1].length);                                                                               // 7465
			});                                                                                                                 // 7466
			var index = -1;                                                                                                     // 7467
			$.each(names, function (i, pair) {                                                                                  // 7468
				var name = pair[1];                                                                                                // 7469
				if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {                                       // 7470
					index = pair[0];                                                                                                  // 7471
					iValue += name.length;                                                                                            // 7472
					return false;                                                                                                     // 7473
				}                                                                                                                  // 7474
			});                                                                                                                 // 7475
			if (index != -1)                                                                                                    // 7476
				return index + 1;                                                                                                  // 7477
			else                                                                                                                // 7478
				throw 'Unknown name at position ' + iValue;                                                                        // 7479
		};                                                                                                                   // 7480
		// Confirm that a literal character matches the string value                                                         // 7481
		var checkLiteral = function() {                                                                                      // 7482
			if (value.charAt(iValue) != format.charAt(iFormat))                                                                 // 7483
				throw 'Unexpected literal at position ' + iValue;                                                                  // 7484
			iValue++;                                                                                                           // 7485
		};                                                                                                                   // 7486
		var iValue = 0;                                                                                                      // 7487
		for (var iFormat = 0; iFormat < format.length; iFormat++) {                                                          // 7488
			if (literal)                                                                                                        // 7489
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))                                                              // 7490
					literal = false;                                                                                                  // 7491
				else                                                                                                               // 7492
					checkLiteral();                                                                                                   // 7493
			else                                                                                                                // 7494
				switch (format.charAt(iFormat)) {                                                                                  // 7495
					case 'd':                                                                                                         // 7496
						day = getNumber('d');                                                                                            // 7497
						break;                                                                                                           // 7498
					case 'D':                                                                                                         // 7499
						getName('D', dayNamesShort, dayNames);                                                                           // 7500
						break;                                                                                                           // 7501
					case 'o':                                                                                                         // 7502
						doy = getNumber('o');                                                                                            // 7503
						break;                                                                                                           // 7504
					case 'm':                                                                                                         // 7505
						month = getNumber('m');                                                                                          // 7506
						break;                                                                                                           // 7507
					case 'M':                                                                                                         // 7508
						month = getName('M', monthNamesShort, monthNames);                                                               // 7509
						break;                                                                                                           // 7510
					case 'y':                                                                                                         // 7511
						year = getNumber('y');                                                                                           // 7512
						break;                                                                                                           // 7513
					case '@':                                                                                                         // 7514
						var date = new Date(getNumber('@'));                                                                             // 7515
						year = date.getFullYear();                                                                                       // 7516
						month = date.getMonth() + 1;                                                                                     // 7517
						day = date.getDate();                                                                                            // 7518
						break;                                                                                                           // 7519
					case '!':                                                                                                         // 7520
						var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);                                               // 7521
						year = date.getFullYear();                                                                                       // 7522
						month = date.getMonth() + 1;                                                                                     // 7523
						day = date.getDate();                                                                                            // 7524
						break;                                                                                                           // 7525
					case "'":                                                                                                         // 7526
						if (lookAhead("'"))                                                                                              // 7527
							checkLiteral();                                                                                                 // 7528
						else                                                                                                             // 7529
							literal = true;                                                                                                 // 7530
						break;                                                                                                           // 7531
					default:                                                                                                          // 7532
						checkLiteral();                                                                                                  // 7533
				}                                                                                                                  // 7534
		}                                                                                                                    // 7535
		if (iValue < value.length){                                                                                          // 7536
			var extra = value.substr(iValue);                                                                                   // 7537
			if (!/^\s+/.test(extra)) {                                                                                          // 7538
				throw "Extra/unparsed characters found in date: " + extra;                                                         // 7539
			}                                                                                                                   // 7540
		}                                                                                                                    // 7541
		if (year == -1)                                                                                                      // 7542
			year = new Date().getFullYear();                                                                                    // 7543
		else if (year < 100)                                                                                                 // 7544
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +                                                 // 7545
				(year <= shortYearCutoff ? 0 : -100);                                                                              // 7546
		if (doy > -1) {                                                                                                      // 7547
			month = 1;                                                                                                          // 7548
			day = doy;                                                                                                          // 7549
			do {                                                                                                                // 7550
				var dim = this._getDaysInMonth(year, month - 1);                                                                   // 7551
				if (day <= dim)                                                                                                    // 7552
					break;                                                                                                            // 7553
				month++;                                                                                                           // 7554
				day -= dim;                                                                                                        // 7555
			} while (true);                                                                                                     // 7556
		}                                                                                                                    // 7557
		var date = this._daylightSavingAdjust(new Date(year, month - 1, day));                                               // 7558
		if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)                             // 7559
			throw 'Invalid date'; // E.g. 31/02/00                                                                              // 7560
		return date;                                                                                                         // 7561
	},                                                                                                                    // 7562
                                                                                                                       // 7563
	/* Standard date formats. */                                                                                          // 7564
	ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)                                                                              // 7565
	COOKIE: 'D, dd M yy',                                                                                                 // 7566
	ISO_8601: 'yy-mm-dd',                                                                                                 // 7567
	RFC_822: 'D, d M y',                                                                                                  // 7568
	RFC_850: 'DD, dd-M-y',                                                                                                // 7569
	RFC_1036: 'D, d M y',                                                                                                 // 7570
	RFC_1123: 'D, d M yy',                                                                                                // 7571
	RFC_2822: 'D, d M yy',                                                                                                // 7572
	RSS: 'D, d M y', // RFC 822                                                                                           // 7573
	TICKS: '!',                                                                                                           // 7574
	TIMESTAMP: '@',                                                                                                       // 7575
	W3C: 'yy-mm-dd', // ISO 8601                                                                                          // 7576
                                                                                                                       // 7577
	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +                                    // 7578
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),                                                                  // 7579
                                                                                                                       // 7580
	/* Format a date object into a string value.                                                                          // 7581
	   The format can be combinations of the following:                                                                   // 7582
	   d  - day of month (no leading zero)                                                                                // 7583
	   dd - day of month (two digit)                                                                                      // 7584
	   o  - day of year (no leading zeros)                                                                                // 7585
	   oo - day of year (three digit)                                                                                     // 7586
	   D  - day name short                                                                                                // 7587
	   DD - day name long                                                                                                 // 7588
	   m  - month of year (no leading zero)                                                                               // 7589
	   mm - month of year (two digit)                                                                                     // 7590
	   M  - month name short                                                                                              // 7591
	   MM - month name long                                                                                               // 7592
	   y  - year (two digit)                                                                                              // 7593
	   yy - year (four digit)                                                                                             // 7594
	   @ - Unix timestamp (ms since 01/01/1970)                                                                           // 7595
	   ! - Windows ticks (100ns since 01/01/0001)                                                                         // 7596
	   '...' - literal text                                                                                               // 7597
	   '' - single quote                                                                                                  // 7598
                                                                                                                       // 7599
	   @param  format    string - the desired format of the date                                                          // 7600
	   @param  date      Date - the date value to format                                                                  // 7601
	   @param  settings  Object - attributes include:                                                                     // 7602
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)                // 7603
	                     dayNames         string[7] - names of the days from Sunday (optional)                            // 7604
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)                         // 7605
	                     monthNames       string[12] - names of the months (optional)                                     // 7606
	   @return  string - the date in the above format */                                                                  // 7607
	formatDate: function (format, date, settings) {                                                                       // 7608
		if (!date)                                                                                                           // 7609
			return '';                                                                                                          // 7610
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;                      // 7611
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;                                     // 7612
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;                // 7613
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;                               // 7614
		// Check whether a format character is doubled                                                                       // 7615
		var lookAhead = function(match) {                                                                                    // 7616
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);                                 // 7617
			if (matches)                                                                                                        // 7618
				iFormat++;                                                                                                         // 7619
			return matches;                                                                                                     // 7620
		};                                                                                                                   // 7621
		// Format a number, with leading zero if necessary                                                                   // 7622
		var formatNumber = function(match, value, len) {                                                                     // 7623
			var num = '' + value;                                                                                               // 7624
			if (lookAhead(match))                                                                                               // 7625
				while (num.length < len)                                                                                           // 7626
					num = '0' + num;                                                                                                  // 7627
			return num;                                                                                                         // 7628
		};                                                                                                                   // 7629
		// Format a name, short or long as requested                                                                         // 7630
		var formatName = function(match, value, shortNames, longNames) {                                                     // 7631
			return (lookAhead(match) ? longNames[value] : shortNames[value]);                                                   // 7632
		};                                                                                                                   // 7633
		var output = '';                                                                                                     // 7634
		var literal = false;                                                                                                 // 7635
		if (date)                                                                                                            // 7636
			for (var iFormat = 0; iFormat < format.length; iFormat++) {                                                         // 7637
				if (literal)                                                                                                       // 7638
					if (format.charAt(iFormat) == "'" && !lookAhead("'"))                                                             // 7639
						literal = false;                                                                                                 // 7640
					else                                                                                                              // 7641
						output += format.charAt(iFormat);                                                                                // 7642
				else                                                                                                               // 7643
					switch (format.charAt(iFormat)) {                                                                                 // 7644
						case 'd':                                                                                                        // 7645
							output += formatNumber('d', date.getDate(), 2);                                                                 // 7646
							break;                                                                                                          // 7647
						case 'D':                                                                                                        // 7648
							output += formatName('D', date.getDay(), dayNamesShort, dayNames);                                              // 7649
							break;                                                                                                          // 7650
						case 'o':                                                                                                        // 7651
							output += formatNumber('o',                                                                                     // 7652
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;                                                                                                          // 7654
						case 'm':                                                                                                        // 7655
							output += formatNumber('m', date.getMonth() + 1, 2);                                                            // 7656
							break;                                                                                                          // 7657
						case 'M':                                                                                                        // 7658
							output += formatName('M', date.getMonth(), monthNamesShort, monthNames);                                        // 7659
							break;                                                                                                          // 7660
						case 'y':                                                                                                        // 7661
							output += (lookAhead('y') ? date.getFullYear() :                                                                // 7662
								(date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);                                                // 7663
							break;                                                                                                          // 7664
						case '@':                                                                                                        // 7665
							output += date.getTime();                                                                                       // 7666
							break;                                                                                                          // 7667
						case '!':                                                                                                        // 7668
							output += date.getTime() * 10000 + this._ticksTo1970;                                                           // 7669
							break;                                                                                                          // 7670
						case "'":                                                                                                        // 7671
							if (lookAhead("'"))                                                                                             // 7672
								output += "'";                                                                                                 // 7673
							else                                                                                                            // 7674
								literal = true;                                                                                                // 7675
							break;                                                                                                          // 7676
						default:                                                                                                         // 7677
							output += format.charAt(iFormat);                                                                               // 7678
					}                                                                                                                 // 7679
			}                                                                                                                   // 7680
		return output;                                                                                                       // 7681
	},                                                                                                                    // 7682
                                                                                                                       // 7683
	/* Extract all possible characters from the date format. */                                                           // 7684
	_possibleChars: function (format) {                                                                                   // 7685
		var chars = '';                                                                                                      // 7686
		var literal = false;                                                                                                 // 7687
		// Check whether a format character is doubled                                                                       // 7688
		var lookAhead = function(match) {                                                                                    // 7689
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);                                 // 7690
			if (matches)                                                                                                        // 7691
				iFormat++;                                                                                                         // 7692
			return matches;                                                                                                     // 7693
		};                                                                                                                   // 7694
		for (var iFormat = 0; iFormat < format.length; iFormat++)                                                            // 7695
			if (literal)                                                                                                        // 7696
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))                                                              // 7697
					literal = false;                                                                                                  // 7698
				else                                                                                                               // 7699
					chars += format.charAt(iFormat);                                                                                  // 7700
			else                                                                                                                // 7701
				switch (format.charAt(iFormat)) {                                                                                  // 7702
					case 'd': case 'm': case 'y': case '@':                                                                           // 7703
						chars += '0123456789';                                                                                           // 7704
						break;                                                                                                           // 7705
					case 'D': case 'M':                                                                                               // 7706
						return null; // Accept anything                                                                                  // 7707
					case "'":                                                                                                         // 7708
						if (lookAhead("'"))                                                                                              // 7709
							chars += "'";                                                                                                   // 7710
						else                                                                                                             // 7711
							literal = true;                                                                                                 // 7712
						break;                                                                                                           // 7713
					default:                                                                                                          // 7714
						chars += format.charAt(iFormat);                                                                                 // 7715
				}                                                                                                                  // 7716
		return chars;                                                                                                        // 7717
	},                                                                                                                    // 7718
                                                                                                                       // 7719
	/* Get a setting value, defaulting if necessary. */                                                                   // 7720
	_get: function(inst, name) {                                                                                          // 7721
		return inst.settings[name] !== undefined ?                                                                           // 7722
			inst.settings[name] : this._defaults[name];                                                                         // 7723
	},                                                                                                                    // 7724
                                                                                                                       // 7725
	/* Parse existing date and initialise date picker. */                                                                 // 7726
	_setDateFromField: function(inst, noDefault) {                                                                        // 7727
		if (inst.input.val() == inst.lastVal) {                                                                              // 7728
			return;                                                                                                             // 7729
		}                                                                                                                    // 7730
		var dateFormat = this._get(inst, 'dateFormat');                                                                      // 7731
		var dates = inst.lastVal = inst.input ? inst.input.val() : null;                                                     // 7732
		var date, defaultDate;                                                                                               // 7733
		date = defaultDate = this._getDefaultDate(inst);                                                                     // 7734
		var settings = this._getFormatConfig(inst);                                                                          // 7735
		try {                                                                                                                // 7736
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;                                                  // 7737
		} catch (event) {                                                                                                    // 7738
			this.log(event);                                                                                                    // 7739
			dates = (noDefault ? '' : dates);                                                                                   // 7740
		}                                                                                                                    // 7741
		inst.selectedDay = date.getDate();                                                                                   // 7742
		inst.drawMonth = inst.selectedMonth = date.getMonth();                                                               // 7743
		inst.drawYear = inst.selectedYear = date.getFullYear();                                                              // 7744
		inst.currentDay = (dates ? date.getDate() : 0);                                                                      // 7745
		inst.currentMonth = (dates ? date.getMonth() : 0);                                                                   // 7746
		inst.currentYear = (dates ? date.getFullYear() : 0);                                                                 // 7747
		this._adjustInstDate(inst);                                                                                          // 7748
	},                                                                                                                    // 7749
                                                                                                                       // 7750
	/* Retrieve the default date shown on opening. */                                                                     // 7751
	_getDefaultDate: function(inst) {                                                                                     // 7752
		return this._restrictMinMax(inst,                                                                                    // 7753
			this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));                                             // 7754
	},                                                                                                                    // 7755
                                                                                                                       // 7756
	/* A date may be specified as an exact value or a relative one. */                                                    // 7757
	_determineDate: function(inst, date, defaultDate) {                                                                   // 7758
		var offsetNumeric = function(offset) {                                                                               // 7759
			var date = new Date();                                                                                              // 7760
			date.setDate(date.getDate() + offset);                                                                              // 7761
			return date;                                                                                                        // 7762
		};                                                                                                                   // 7763
		var offsetString = function(offset) {                                                                                // 7764
			try {                                                                                                               // 7765
				return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),                                               // 7766
					offset, $.datepicker._getFormatConfig(inst));                                                                     // 7767
			}                                                                                                                   // 7768
			catch (e) {                                                                                                         // 7769
				// Ignore                                                                                                          // 7770
			}                                                                                                                   // 7771
			var date = (offset.toLowerCase().match(/^c/) ?                                                                      // 7772
				$.datepicker._getDate(inst) : null) || new Date();                                                                 // 7773
			var year = date.getFullYear();                                                                                      // 7774
			var month = date.getMonth();                                                                                        // 7775
			var day = date.getDate();                                                                                           // 7776
			var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;                                                                // 7777
			var matches = pattern.exec(offset);                                                                                 // 7778
			while (matches) {                                                                                                   // 7779
				switch (matches[2] || 'd') {                                                                                       // 7780
					case 'd' : case 'D' :                                                                                             // 7781
						day += parseInt(matches[1],10); break;                                                                           // 7782
					case 'w' : case 'W' :                                                                                             // 7783
						day += parseInt(matches[1],10) * 7; break;                                                                       // 7784
					case 'm' : case 'M' :                                                                                             // 7785
						month += parseInt(matches[1],10);                                                                                // 7786
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));                                                  // 7787
						break;                                                                                                           // 7788
					case 'y': case 'Y' :                                                                                              // 7789
						year += parseInt(matches[1],10);                                                                                 // 7790
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));                                                  // 7791
						break;                                                                                                           // 7792
				}                                                                                                                  // 7793
				matches = pattern.exec(offset);                                                                                    // 7794
			}                                                                                                                   // 7795
			return new Date(year, month, day);                                                                                  // 7796
		};                                                                                                                   // 7797
		var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :           // 7798
			(typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));         // 7799
		newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);                                 // 7800
		if (newDate) {                                                                                                       // 7801
			newDate.setHours(0);                                                                                                // 7802
			newDate.setMinutes(0);                                                                                              // 7803
			newDate.setSeconds(0);                                                                                              // 7804
			newDate.setMilliseconds(0);                                                                                         // 7805
		}                                                                                                                    // 7806
		return this._daylightSavingAdjust(newDate);                                                                          // 7807
	},                                                                                                                    // 7808
                                                                                                                       // 7809
	/* Handle switch to/from daylight saving.                                                                             // 7810
	   Hours may be non-zero on daylight saving cut-over:                                                                 // 7811
	   > 12 when midnight changeover, but then cannot generate                                                            // 7812
	   midnight datetime, so jump to 1AM, otherwise reset.                                                                // 7813
	   @param  date  (Date) the date to check                                                                             // 7814
	   @return  (Date) the corrected date */                                                                              // 7815
	_daylightSavingAdjust: function(date) {                                                                               // 7816
		if (!date) return null;                                                                                              // 7817
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);                                                       // 7818
		return date;                                                                                                         // 7819
	},                                                                                                                    // 7820
                                                                                                                       // 7821
	/* Set the date(s) directly. */                                                                                       // 7822
	_setDate: function(inst, date, noChange) {                                                                            // 7823
		var clear = !date;                                                                                                   // 7824
		var origMonth = inst.selectedMonth;                                                                                  // 7825
		var origYear = inst.selectedYear;                                                                                    // 7826
		var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));                               // 7827
		inst.selectedDay = inst.currentDay = newDate.getDate();                                                              // 7828
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();                                        // 7829
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();                                        // 7830
		if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)                                 // 7831
			this._notifyChange(inst);                                                                                           // 7832
		this._adjustInstDate(inst);                                                                                          // 7833
		if (inst.input) {                                                                                                    // 7834
			inst.input.val(clear ? '' : this._formatDate(inst));                                                                // 7835
		}                                                                                                                    // 7836
	},                                                                                                                    // 7837
                                                                                                                       // 7838
	/* Retrieve the date(s) directly. */                                                                                  // 7839
	_getDate: function(inst) {                                                                                            // 7840
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :                                // 7841
			this._daylightSavingAdjust(new Date(                                                                                // 7842
			inst.currentYear, inst.currentMonth, inst.currentDay)));                                                            // 7843
			return startDate;                                                                                                   // 7844
	},                                                                                                                    // 7845
                                                                                                                       // 7846
	/* Attach the onxxx handlers.  These are declared statically so                                                       // 7847
	 * they work with static code transformers like Caja.                                                                 // 7848
	 */                                                                                                                   // 7849
	_attachHandlers: function(inst) {                                                                                     // 7850
		var stepMonths = this._get(inst, 'stepMonths');                                                                      // 7851
		var id = '#' + inst.id.replace( /\\\\/g, "\\" );                                                                     // 7852
		inst.dpDiv.find('[data-handler]').map(function () {                                                                  // 7853
			var handler = {                                                                                                     // 7854
				prev: function () {                                                                                                // 7855
					window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, -stepMonths, 'M');                                       // 7856
				},                                                                                                                 // 7857
				next: function () {                                                                                                // 7858
					window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, +stepMonths, 'M');                                       // 7859
				},                                                                                                                 // 7860
				hide: function () {                                                                                                // 7861
					window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();                                                       // 7862
				},                                                                                                                 // 7863
				today: function () {                                                                                               // 7864
					window['DP_jQuery_' + dpuuid].datepicker._gotoToday(id);                                                          // 7865
				},                                                                                                                 // 7866
				selectDay: function () {                                                                                           // 7867
					window['DP_jQuery_' + dpuuid].datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
					return false;                                                                                                     // 7869
				},                                                                                                                 // 7870
				selectMonth: function () {                                                                                         // 7871
					window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'M');                                         // 7872
					return false;                                                                                                     // 7873
				},                                                                                                                 // 7874
				selectYear: function () {                                                                                          // 7875
					window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'Y');                                         // 7876
					return false;                                                                                                     // 7877
				}                                                                                                                  // 7878
			};                                                                                                                  // 7879
			$(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);                          // 7880
		});                                                                                                                  // 7881
	},                                                                                                                    // 7882
                                                                                                                       // 7883
	/* Generate the HTML for the current state of the date picker. */                                                     // 7884
	_generateHTML: function(inst) {                                                                                       // 7885
		var today = new Date();                                                                                              // 7886
		today = this._daylightSavingAdjust(                                                                                  // 7887
			new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time                                    // 7888
		var isRTL = this._get(inst, 'isRTL');                                                                                // 7889
		var showButtonPanel = this._get(inst, 'showButtonPanel');                                                            // 7890
		var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');                                                          // 7891
		var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');                                              // 7892
		var numMonths = this._getNumberOfMonths(inst);                                                                       // 7893
		var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');                                                          // 7894
		var stepMonths = this._get(inst, 'stepMonths');                                                                      // 7895
		var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);                                                         // 7896
		var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :                              // 7897
			new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));                                                   // 7898
		var minDate = this._getMinMaxDate(inst, 'min');                                                                      // 7899
		var maxDate = this._getMinMaxDate(inst, 'max');                                                                      // 7900
		var drawMonth = inst.drawMonth - showCurrentAtPos;                                                                   // 7901
		var drawYear = inst.drawYear;                                                                                        // 7902
		if (drawMonth < 0) {                                                                                                 // 7903
			drawMonth += 12;                                                                                                    // 7904
			drawYear--;                                                                                                         // 7905
		}                                                                                                                    // 7906
		if (maxDate) {                                                                                                       // 7907
			var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),                                            // 7908
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));                                       // 7909
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);                                                       // 7910
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {                                    // 7911
				drawMonth--;                                                                                                       // 7912
				if (drawMonth < 0) {                                                                                               // 7913
					drawMonth = 11;                                                                                                   // 7914
					drawYear--;                                                                                                       // 7915
				}                                                                                                                  // 7916
			}                                                                                                                   // 7917
		}                                                                                                                    // 7918
		inst.drawMonth = drawMonth;                                                                                          // 7919
		inst.drawYear = drawYear;                                                                                            // 7920
		var prevText = this._get(inst, 'prevText');                                                                          // 7921
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,                                           // 7922
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),                                          // 7923
			this._getFormatConfig(inst)));                                                                                      // 7924
		var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?                                                    // 7925
			'<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click"' +                              // 7926
			' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
		var nextText = this._get(inst, 'nextText');                                                                          // 7929
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,                                           // 7930
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),                                          // 7931
			this._getFormatConfig(inst)));                                                                                      // 7932
		var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?                                                    // 7933
			'<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click"' +                              // 7934
			' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
		var currentText = this._get(inst, 'currentText');                                                                    // 7937
		var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);                            // 7938
		currentText = (!navigationAsDateFormat ? currentText :                                                               // 7939
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));                                               // 7940
		var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' +
			this._get(inst, 'closeText') + '</button>' : '');                                                                   // 7942
		var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
			(this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"' +
			'>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';                                    // 7945
		var firstDay = parseInt(this._get(inst, 'firstDay'),10);                                                             // 7946
		firstDay = (isNaN(firstDay) ? 0 : firstDay);                                                                         // 7947
		var showWeek = this._get(inst, 'showWeek');                                                                          // 7948
		var dayNames = this._get(inst, 'dayNames');                                                                          // 7949
		var dayNamesShort = this._get(inst, 'dayNamesShort');                                                                // 7950
		var dayNamesMin = this._get(inst, 'dayNamesMin');                                                                    // 7951
		var monthNames = this._get(inst, 'monthNames');                                                                      // 7952
		var monthNamesShort = this._get(inst, 'monthNamesShort');                                                            // 7953
		var beforeShowDay = this._get(inst, 'beforeShowDay');                                                                // 7954
		var showOtherMonths = this._get(inst, 'showOtherMonths');                                                            // 7955
		var selectOtherMonths = this._get(inst, 'selectOtherMonths');                                                        // 7956
		var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;                                            // 7957
		var defaultDate = this._getDefaultDate(inst);                                                                        // 7958
		var html = '';                                                                                                       // 7959
		for (var row = 0; row < numMonths[0]; row++) {                                                                       // 7960
			var group = '';                                                                                                     // 7961
			this.maxRows = 4;                                                                                                   // 7962
			for (var col = 0; col < numMonths[1]; col++) {                                                                      // 7963
				var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));                    // 7964
				var cornerClass = ' ui-corner-all';                                                                                // 7965
				var calender = '';                                                                                                 // 7966
				if (isMultiMonth) {                                                                                                // 7967
					calender += '<div class="ui-datepicker-group';                                                                    // 7968
					if (numMonths[1] > 1)                                                                                             // 7969
						switch (col) {                                                                                                   // 7970
							case 0: calender += ' ui-datepicker-group-first';                                                               // 7971
								cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;                                               // 7972
							case numMonths[1]-1: calender += ' ui-datepicker-group-last';                                                   // 7973
								cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;                                               // 7974
							default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;                                    // 7975
						}                                                                                                                // 7976
					calender += '">';                                                                                                 // 7977
				}                                                                                                                  // 7978
				calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +          // 7979
					(/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +                                         // 7980
					(/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +                                        // 7981
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,                                        // 7982
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers                                          // 7983
					'</div><table class="ui-datepicker-calendar"><thead>' +                                                           // 7984
					'<tr>';                                                                                                           // 7985
				var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');     // 7986
				for (var dow = 0; dow < 7; dow++) { // days of the week                                                            // 7987
					var day = (dow + firstDay) % 7;                                                                                   // 7988
					thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +                 // 7989
						'<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';                                      // 7990
				}                                                                                                                  // 7991
				calender += thead + '</tr></thead><tbody>';                                                                        // 7992
				var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);                                                       // 7993
				if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)                                              // 7994
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);                                                       // 7995
				var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;                                 // 7996
				var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate                 // 7997
				var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;                                                                                            // 7999
				var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));                           // 8000
				for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows                                            // 8001
					calender += '<tr>';                                                                                               // 8002
					var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +                                             // 8003
						this._get(inst, 'calculateWeek')(printDate) + '</td>');                                                          // 8004
					for (var dow = 0; dow < 7; dow++) { // create date picker days                                                    // 8005
						var daySettings = (beforeShowDay ?                                                                               // 8006
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);                            // 8007
						var otherMonth = (printDate.getMonth() != drawMonth);                                                            // 8008
						var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||                                      // 8009
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);                                           // 8010
						tbody += '<td class="' +                                                                                         // 8011
							((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends                        // 8012
							(otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months                          // 8013
							((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?             // 8015
							// or defaultDate is current printedDate and defaultDate is selectedDate                                        // 8016
							' ' + this._dayOverClass : '') + // highlight selected day                                                      // 8017
							(unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days     // 8018
							(otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates                         // 8019
							(printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day      // 8020
							(printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title   // 8022
							(unselectable ? '' : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + '>' + // actions
							(otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months                                        // 8024
							(unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
							(printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +                                         // 8026
							(printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day            // 8027
							(otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months                           // 8028
							'" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date                            // 8029
						printDate.setDate(printDate.getDate() + 1);                                                                      // 8030
						printDate = this._daylightSavingAdjust(printDate);                                                               // 8031
					}                                                                                                                 // 8032
					calender += tbody + '</tr>';                                                                                      // 8033
				}                                                                                                                  // 8034
				drawMonth++;                                                                                                       // 8035
				if (drawMonth > 11) {                                                                                              // 8036
					drawMonth = 0;                                                                                                    // 8037
					drawYear++;                                                                                                       // 8038
				}                                                                                                                  // 8039
				calender += '</tbody></table>' + (isMultiMonth ? '</div>' +                                                        // 8040
							((numMonths[0] > 0 && col == numMonths[1]-1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');       // 8041
				group += calender;                                                                                                 // 8042
			}                                                                                                                   // 8043
			html += group;                                                                                                      // 8044
		}                                                                                                                    // 8045
		html += buttonPanel + ($.ui.ie6 && !inst.inline ?                                                                    // 8046
			'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');                      // 8047
		inst._keyEvent = false;                                                                                              // 8048
		return html;                                                                                                         // 8049
	},                                                                                                                    // 8050
                                                                                                                       // 8051
	/* Generate the month and year header. */                                                                             // 8052
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,                                       // 8053
			secondary, monthNames, monthNamesShort) {                                                                           // 8054
		var changeMonth = this._get(inst, 'changeMonth');                                                                    // 8055
		var changeYear = this._get(inst, 'changeYear');                                                                      // 8056
		var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');                                                      // 8057
		var html = '<div class="ui-datepicker-title">';                                                                      // 8058
		var monthHtml = '';                                                                                                  // 8059
		// month selection                                                                                                   // 8060
		if (secondary || !changeMonth)                                                                                       // 8061
			monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';                              // 8062
		else {                                                                                                               // 8063
			var inMinYear = (minDate && minDate.getFullYear() == drawYear);                                                     // 8064
			var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);                                                     // 8065
			monthHtml += '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';                 // 8066
			for (var month = 0; month < 12; month++) {                                                                          // 8067
				if ((!inMinYear || month >= minDate.getMonth()) &&                                                                 // 8068
						(!inMaxYear || month <= maxDate.getMonth()))                                                                     // 8069
					monthHtml += '<option value="' + month + '"' +                                                                    // 8070
						(month == drawMonth ? ' selected="selected"' : '') +                                                             // 8071
						'>' + monthNamesShort[month] + '</option>';                                                                      // 8072
			}                                                                                                                   // 8073
			monthHtml += '</select>';                                                                                           // 8074
		}                                                                                                                    // 8075
		if (!showMonthAfterYear)                                                                                             // 8076
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');                                    // 8077
		// year selection                                                                                                    // 8078
		if ( !inst.yearshtml ) {                                                                                             // 8079
			inst.yearshtml = '';                                                                                                // 8080
			if (secondary || !changeYear)                                                                                       // 8081
				html += '<span class="ui-datepicker-year">' + drawYear + '</span>';                                                // 8082
			else {                                                                                                              // 8083
				// determine range of years to display                                                                             // 8084
				var years = this._get(inst, 'yearRange').split(':');                                                               // 8085
				var thisYear = new Date().getFullYear();                                                                           // 8086
				var determineYear = function(value) {                                                                              // 8087
					var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :                                // 8088
						(value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :                                                        // 8089
						parseInt(value, 10)));                                                                                           // 8090
					return (isNaN(year) ? thisYear : year);                                                                           // 8091
				};                                                                                                                 // 8092
				var year = determineYear(years[0]);                                                                                // 8093
				var endYear = Math.max(year, determineYear(years[1] || ''));                                                       // 8094
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);                                                   // 8095
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);                                          // 8096
				inst.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';             // 8097
				for (; year <= endYear; year++) {                                                                                  // 8098
					inst.yearshtml += '<option value="' + year + '"' +                                                                // 8099
						(year == drawYear ? ' selected="selected"' : '') +                                                               // 8100
						'>' + year + '</option>';                                                                                        // 8101
				}                                                                                                                  // 8102
				inst.yearshtml += '</select>';                                                                                     // 8103
                                                                                                                       // 8104
				html += inst.yearshtml;                                                                                            // 8105
				inst.yearshtml = null;                                                                                             // 8106
			}                                                                                                                   // 8107
		}                                                                                                                    // 8108
		html += this._get(inst, 'yearSuffix');                                                                               // 8109
		if (showMonthAfterYear)                                                                                              // 8110
			html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;                                    // 8111
		html += '</div>'; // Close datepicker_header                                                                         // 8112
		return html;                                                                                                         // 8113
	},                                                                                                                    // 8114
                                                                                                                       // 8115
	/* Adjust one of the date sub-fields. */                                                                              // 8116
	_adjustInstDate: function(inst, offset, period) {                                                                     // 8117
		var year = inst.drawYear + (period == 'Y' ? offset : 0);                                                             // 8118
		var month = inst.drawMonth + (period == 'M' ? offset : 0);                                                           // 8119
		var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +                                            // 8120
			(period == 'D' ? offset : 0);                                                                                       // 8121
		var date = this._restrictMinMax(inst,                                                                                // 8122
			this._daylightSavingAdjust(new Date(year, month, day)));                                                            // 8123
		inst.selectedDay = date.getDate();                                                                                   // 8124
		inst.drawMonth = inst.selectedMonth = date.getMonth();                                                               // 8125
		inst.drawYear = inst.selectedYear = date.getFullYear();                                                              // 8126
		if (period == 'M' || period == 'Y')                                                                                  // 8127
			this._notifyChange(inst);                                                                                           // 8128
	},                                                                                                                    // 8129
                                                                                                                       // 8130
	/* Ensure a date is within any min/max bounds. */                                                                     // 8131
	_restrictMinMax: function(inst, date) {                                                                               // 8132
		var minDate = this._getMinMaxDate(inst, 'min');                                                                      // 8133
		var maxDate = this._getMinMaxDate(inst, 'max');                                                                      // 8134
		var newDate = (minDate && date < minDate ? minDate : date);                                                          // 8135
		newDate = (maxDate && newDate > maxDate ? maxDate : newDate);                                                        // 8136
		return newDate;                                                                                                      // 8137
	},                                                                                                                    // 8138
                                                                                                                       // 8139
	/* Notify change of month/year. */                                                                                    // 8140
	_notifyChange: function(inst) {                                                                                       // 8141
		var onChange = this._get(inst, 'onChangeMonthYear');                                                                 // 8142
		if (onChange)                                                                                                        // 8143
			onChange.apply((inst.input ? inst.input[0] : null),                                                                 // 8144
				[inst.selectedYear, inst.selectedMonth + 1, inst]);                                                                // 8145
	},                                                                                                                    // 8146
                                                                                                                       // 8147
	/* Determine the number of months to show. */                                                                         // 8148
	_getNumberOfMonths: function(inst) {                                                                                  // 8149
		var numMonths = this._get(inst, 'numberOfMonths');                                                                   // 8150
		return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));                   // 8151
	},                                                                                                                    // 8152
                                                                                                                       // 8153
	/* Determine the current maximum date - ensure no time components are set. */                                         // 8154
	_getMinMaxDate: function(inst, minMax) {                                                                              // 8155
		return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);                                            // 8156
	},                                                                                                                    // 8157
                                                                                                                       // 8158
	/* Find the number of days in a given month. */                                                                       // 8159
	_getDaysInMonth: function(year, month) {                                                                              // 8160
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();                                         // 8161
	},                                                                                                                    // 8162
                                                                                                                       // 8163
	/* Find the day of the week of the first of a month. */                                                               // 8164
	_getFirstDayOfMonth: function(year, month) {                                                                          // 8165
		return new Date(year, month, 1).getDay();                                                                            // 8166
	},                                                                                                                    // 8167
                                                                                                                       // 8168
	/* Determines if we should allow a "next/prev" month display change. */                                               // 8169
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {                                                          // 8170
		var numMonths = this._getNumberOfMonths(inst);                                                                       // 8171
		var date = this._daylightSavingAdjust(new Date(curYear,                                                              // 8172
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));                                                // 8173
		if (offset < 0)                                                                                                      // 8174
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));                                            // 8175
		return this._isInRange(inst, date);                                                                                  // 8176
	},                                                                                                                    // 8177
                                                                                                                       // 8178
	/* Is the given date in the accepted range? */                                                                        // 8179
	_isInRange: function(inst, date) {                                                                                    // 8180
		var minDate = this._getMinMaxDate(inst, 'min');                                                                      // 8181
		var maxDate = this._getMinMaxDate(inst, 'max');                                                                      // 8182
		return ((!minDate || date.getTime() >= minDate.getTime()) &&                                                         // 8183
			(!maxDate || date.getTime() <= maxDate.getTime()));                                                                 // 8184
	},                                                                                                                    // 8185
                                                                                                                       // 8186
	/* Provide the configuration settings for formatting/parsing. */                                                      // 8187
	_getFormatConfig: function(inst) {                                                                                    // 8188
		var shortYearCutoff = this._get(inst, 'shortYearCutoff');                                                            // 8189
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :                                            // 8190
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));                                                    // 8191
		return {shortYearCutoff: shortYearCutoff,                                                                            // 8192
			dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),                             // 8193
			monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};                    // 8194
	},                                                                                                                    // 8195
                                                                                                                       // 8196
	/* Format the given date for display. */                                                                              // 8197
	_formatDate: function(inst, day, month, year) {                                                                       // 8198
		if (!day) {                                                                                                          // 8199
			inst.currentDay = inst.selectedDay;                                                                                 // 8200
			inst.currentMonth = inst.selectedMonth;                                                                             // 8201
			inst.currentYear = inst.selectedYear;                                                                               // 8202
		}                                                                                                                    // 8203
		var date = (day ? (typeof day == 'object' ? day :                                                                    // 8204
			this._daylightSavingAdjust(new Date(year, month, day))) :                                                           // 8205
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));                        // 8206
		return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));                            // 8207
	}                                                                                                                     // 8208
});                                                                                                                    // 8209
                                                                                                                       // 8210
/*                                                                                                                     // 8211
 * Bind hover events for datepicker elements.                                                                          // 8212
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.                                // 8213
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.        // 8214
 */                                                                                                                    // 8215
function bindHover(dpDiv) {                                                                                            // 8216
	var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';                      // 8217
	return dpDiv.delegate(selector, 'mouseout', function() {                                                              // 8218
			$(this).removeClass('ui-state-hover');                                                                              // 8219
			if (this.className.indexOf('ui-datepicker-prev') != -1) $(this).removeClass('ui-datepicker-prev-hover');            // 8220
			if (this.className.indexOf('ui-datepicker-next') != -1) $(this).removeClass('ui-datepicker-next-hover');            // 8221
		})                                                                                                                   // 8222
		.delegate(selector, 'mouseover', function(){                                                                         // 8223
			if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {            // 8224
				$(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');                                // 8225
				$(this).addClass('ui-state-hover');                                                                                // 8226
				if (this.className.indexOf('ui-datepicker-prev') != -1) $(this).addClass('ui-datepicker-prev-hover');              // 8227
				if (this.className.indexOf('ui-datepicker-next') != -1) $(this).addClass('ui-datepicker-next-hover');              // 8228
			}                                                                                                                   // 8229
		});                                                                                                                  // 8230
}                                                                                                                      // 8231
                                                                                                                       // 8232
/* jQuery extend now ignores nulls! */                                                                                 // 8233
function extendRemove(target, props) {                                                                                 // 8234
	$.extend(target, props);                                                                                              // 8235
	for (var name in props)                                                                                               // 8236
		if (props[name] == null || props[name] == undefined)                                                                 // 8237
			target[name] = props[name];                                                                                         // 8238
	return target;                                                                                                        // 8239
};                                                                                                                     // 8240
                                                                                                                       // 8241
/* Invoke the datepicker functionality.                                                                                // 8242
   @param  options  string - a command, optionally followed by additional parameters or                                // 8243
	                Object - settings for attaching new datepicker functionality                                          // 8244
   @return  jQuery object */                                                                                           // 8245
$.fn.datepicker = function(options){                                                                                   // 8246
                                                                                                                       // 8247
	/* Verify an empty collection wasn't passed - Fixes #6976 */                                                          // 8248
	if ( !this.length ) {                                                                                                 // 8249
		return this;                                                                                                         // 8250
	}                                                                                                                     // 8251
                                                                                                                       // 8252
	/* Initialise the date picker. */                                                                                     // 8253
	if (!$.datepicker.initialized) {                                                                                      // 8254
		$(document).mousedown($.datepicker._checkExternalClick).                                                             // 8255
			find(document.body).append($.datepicker.dpDiv);                                                                     // 8256
		$.datepicker.initialized = true;                                                                                     // 8257
	}                                                                                                                     // 8258
                                                                                                                       // 8259
	var otherArgs = Array.prototype.slice.call(arguments, 1);                                                             // 8260
	if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))           // 8261
		return $.datepicker['_' + options + 'Datepicker'].                                                                   // 8262
			apply($.datepicker, [this[0]].concat(otherArgs));                                                                   // 8263
	if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')                                  // 8264
		return $.datepicker['_' + options + 'Datepicker'].                                                                   // 8265
			apply($.datepicker, [this[0]].concat(otherArgs));                                                                   // 8266
	return this.each(function() {                                                                                         // 8267
		typeof options == 'string' ?                                                                                         // 8268
			$.datepicker['_' + options + 'Datepicker'].                                                                         // 8269
				apply($.datepicker, [this].concat(otherArgs)) :                                                                    // 8270
			$.datepicker._attachDatepicker(this, options);                                                                      // 8271
	});                                                                                                                   // 8272
};                                                                                                                     // 8273
                                                                                                                       // 8274
$.datepicker = new Datepicker(); // singleton instance                                                                 // 8275
$.datepicker.initialized = false;                                                                                      // 8276
$.datepicker.uuid = new Date().getTime();                                                                              // 8277
$.datepicker.version = "1.9.2";                                                                                        // 8278
                                                                                                                       // 8279
// Workaround for #4055                                                                                                // 8280
// Add another global to avoid noConflict issues with inline event handlers                                            // 8281
window['DP_jQuery_' + dpuuid] = $;                                                                                     // 8282
                                                                                                                       // 8283
})(jQuery);                                                                                                            // 8284
(function( $, undefined ) {                                                                                            // 8285
                                                                                                                       // 8286
var uiDialogClasses = "ui-dialog ui-widget ui-widget-content ui-corner-all ",                                          // 8287
	sizeRelatedOptions = {                                                                                                // 8288
		buttons: true,                                                                                                       // 8289
		height: true,                                                                                                        // 8290
		maxHeight: true,                                                                                                     // 8291
		maxWidth: true,                                                                                                      // 8292
		minHeight: true,                                                                                                     // 8293
		minWidth: true,                                                                                                      // 8294
		width: true                                                                                                          // 8295
	},                                                                                                                    // 8296
	resizableRelatedOptions = {                                                                                           // 8297
		maxHeight: true,                                                                                                     // 8298
		maxWidth: true,                                                                                                      // 8299
		minHeight: true,                                                                                                     // 8300
		minWidth: true                                                                                                       // 8301
	};                                                                                                                    // 8302
                                                                                                                       // 8303
$.widget("ui.dialog", {                                                                                                // 8304
	version: "1.9.2",                                                                                                     // 8305
	options: {                                                                                                            // 8306
		autoOpen: true,                                                                                                      // 8307
		buttons: {},                                                                                                         // 8308
		closeOnEscape: true,                                                                                                 // 8309
		closeText: "close",                                                                                                  // 8310
		dialogClass: "",                                                                                                     // 8311
		draggable: true,                                                                                                     // 8312
		hide: null,                                                                                                          // 8313
		height: "auto",                                                                                                      // 8314
		maxHeight: false,                                                                                                    // 8315
		maxWidth: false,                                                                                                     // 8316
		minHeight: 150,                                                                                                      // 8317
		minWidth: 150,                                                                                                       // 8318
		modal: false,                                                                                                        // 8319
		position: {                                                                                                          // 8320
			my: "center",                                                                                                       // 8321
			at: "center",                                                                                                       // 8322
			of: window,                                                                                                         // 8323
			collision: "fit",                                                                                                   // 8324
			// ensure that the titlebar is never outside the document                                                           // 8325
			using: function( pos ) {                                                                                            // 8326
				var topOffset = $( this ).css( pos ).offset().top;                                                                 // 8327
				if ( topOffset < 0 ) {                                                                                             // 8328
					$( this ).css( "top", pos.top - topOffset );                                                                      // 8329
				}                                                                                                                  // 8330
			}                                                                                                                   // 8331
		},                                                                                                                   // 8332
		resizable: true,                                                                                                     // 8333
		show: null,                                                                                                          // 8334
		stack: true,                                                                                                         // 8335
		title: "",                                                                                                           // 8336
		width: 300,                                                                                                          // 8337
		zIndex: 1000                                                                                                         // 8338
	},                                                                                                                    // 8339
                                                                                                                       // 8340
	_create: function() {                                                                                                 // 8341
		this.originalTitle = this.element.attr( "title" );                                                                   // 8342
		// #5742 - .attr() might return a DOMElement                                                                         // 8343
		if ( typeof this.originalTitle !== "string" ) {                                                                      // 8344
			this.originalTitle = "";                                                                                            // 8345
		}                                                                                                                    // 8346
		this.oldPosition = {                                                                                                 // 8347
			parent: this.element.parent(),                                                                                      // 8348
			index: this.element.parent().children().index( this.element )                                                       // 8349
		};                                                                                                                   // 8350
		this.options.title = this.options.title || this.originalTitle;                                                       // 8351
		var that = this,                                                                                                     // 8352
			options = this.options,                                                                                             // 8353
                                                                                                                       // 8354
			title = options.title || "&#160;",                                                                                  // 8355
			uiDialog,                                                                                                           // 8356
			uiDialogTitlebar,                                                                                                   // 8357
			uiDialogTitlebarClose,                                                                                              // 8358
			uiDialogTitle,                                                                                                      // 8359
			uiDialogButtonPane;                                                                                                 // 8360
                                                                                                                       // 8361
			uiDialog = ( this.uiDialog = $( "<div>" ) )                                                                         // 8362
				.addClass( uiDialogClasses + options.dialogClass )                                                                 // 8363
				.css({                                                                                                             // 8364
					display: "none",                                                                                                  // 8365
					outline: 0, // TODO: move to stylesheet                                                                           // 8366
					zIndex: options.zIndex                                                                                            // 8367
				})                                                                                                                 // 8368
				// setting tabIndex makes the div focusable                                                                        // 8369
				.attr( "tabIndex", -1)                                                                                             // 8370
				.keydown(function( event ) {                                                                                       // 8371
					if ( options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&                                     // 8372
							event.keyCode === $.ui.keyCode.ESCAPE ) {                                                                       // 8373
						that.close( event );                                                                                             // 8374
						event.preventDefault();                                                                                          // 8375
					}                                                                                                                 // 8376
				})                                                                                                                 // 8377
				.mousedown(function( event ) {                                                                                     // 8378
					that.moveToTop( false, event );                                                                                   // 8379
				})                                                                                                                 // 8380
				.appendTo( "body" );                                                                                               // 8381
                                                                                                                       // 8382
			this.element                                                                                                        // 8383
				.show()                                                                                                            // 8384
				.removeAttr( "title" )                                                                                             // 8385
				.addClass( "ui-dialog-content ui-widget-content" )                                                                 // 8386
				.appendTo( uiDialog );                                                                                             // 8387
                                                                                                                       // 8388
			uiDialogTitlebar = ( this.uiDialogTitlebar = $( "<div>" ) )                                                         // 8389
				.addClass( "ui-dialog-titlebar  ui-widget-header  " +                                                              // 8390
					"ui-corner-all  ui-helper-clearfix" )                                                                             // 8391
				.bind( "mousedown", function() {                                                                                   // 8392
					// Dialog isn't getting focus when dragging (#8063)                                                               // 8393
					uiDialog.focus();                                                                                                 // 8394
				})                                                                                                                 // 8395
				.prependTo( uiDialog );                                                                                            // 8396
                                                                                                                       // 8397
			uiDialogTitlebarClose = $( "<a href='#'></a>" )                                                                     // 8398
				.addClass( "ui-dialog-titlebar-close  ui-corner-all" )                                                             // 8399
				.attr( "role", "button" )                                                                                          // 8400
				.click(function( event ) {                                                                                         // 8401
					event.preventDefault();                                                                                           // 8402
					that.close( event );                                                                                              // 8403
				})                                                                                                                 // 8404
				.appendTo( uiDialogTitlebar );                                                                                     // 8405
                                                                                                                       // 8406
			( this.uiDialogTitlebarCloseText = $( "<span>" ) )                                                                  // 8407
				.addClass( "ui-icon ui-icon-closethick" )                                                                          // 8408
				.text( options.closeText )                                                                                         // 8409
				.appendTo( uiDialogTitlebarClose );                                                                                // 8410
                                                                                                                       // 8411
			uiDialogTitle = $( "<span>" )                                                                                       // 8412
				.uniqueId()                                                                                                        // 8413
				.addClass( "ui-dialog-title" )                                                                                     // 8414
				.html( title )                                                                                                     // 8415
				.prependTo( uiDialogTitlebar );                                                                                    // 8416
                                                                                                                       // 8417
			uiDialogButtonPane = ( this.uiDialogButtonPane = $( "<div>" ) )                                                     // 8418
				.addClass( "ui-dialog-buttonpane ui-widget-content ui-helper-clearfix" );                                          // 8419
                                                                                                                       // 8420
			( this.uiButtonSet = $( "<div>" ) )                                                                                 // 8421
				.addClass( "ui-dialog-buttonset" )                                                                                 // 8422
				.appendTo( uiDialogButtonPane );                                                                                   // 8423
                                                                                                                       // 8424
		uiDialog.attr({                                                                                                      // 8425
			role: "dialog",                                                                                                     // 8426
			"aria-labelledby": uiDialogTitle.attr( "id" )                                                                       // 8427
		});                                                                                                                  // 8428
                                                                                                                       // 8429
		uiDialogTitlebar.find( "*" ).add( uiDialogTitlebar ).disableSelection();                                             // 8430
		this._hoverable( uiDialogTitlebarClose );                                                                            // 8431
		this._focusable( uiDialogTitlebarClose );                                                                            // 8432
                                                                                                                       // 8433
		if ( options.draggable && $.fn.draggable ) {                                                                         // 8434
			this._makeDraggable();                                                                                              // 8435
		}                                                                                                                    // 8436
		if ( options.resizable && $.fn.resizable ) {                                                                         // 8437
			this._makeResizable();                                                                                              // 8438
		}                                                                                                                    // 8439
                                                                                                                       // 8440
		this._createButtons( options.buttons );                                                                              // 8441
		this._isOpen = false;                                                                                                // 8442
                                                                                                                       // 8443
		if ( $.fn.bgiframe ) {                                                                                               // 8444
			uiDialog.bgiframe();                                                                                                // 8445
		}                                                                                                                    // 8446
                                                                                                                       // 8447
		// prevent tabbing out of modal dialogs                                                                              // 8448
		this._on( uiDialog, { keydown: function( event ) {                                                                   // 8449
			if ( !options.modal || event.keyCode !== $.ui.keyCode.TAB ) {                                                       // 8450
				return;                                                                                                            // 8451
			}                                                                                                                   // 8452
                                                                                                                       // 8453
			var tabbables = $( ":tabbable", uiDialog ),                                                                         // 8454
				first = tabbables.filter( ":first" ),                                                                              // 8455
				last  = tabbables.filter( ":last" );                                                                               // 8456
                                                                                                                       // 8457
			if ( event.target === last[0] && !event.shiftKey ) {                                                                // 8458
				first.focus( 1 );                                                                                                  // 8459
				return false;                                                                                                      // 8460
			} else if ( event.target === first[0] && event.shiftKey ) {                                                         // 8461
				last.focus( 1 );                                                                                                   // 8462
				return false;                                                                                                      // 8463
			}                                                                                                                   // 8464
		}});                                                                                                                 // 8465
	},                                                                                                                    // 8466
                                                                                                                       // 8467
	_init: function() {                                                                                                   // 8468
		if ( this.options.autoOpen ) {                                                                                       // 8469
			this.open();                                                                                                        // 8470
		}                                                                                                                    // 8471
	},                                                                                                                    // 8472
                                                                                                                       // 8473
	_destroy: function() {                                                                                                // 8474
		var next,                                                                                                            // 8475
			oldPosition = this.oldPosition;                                                                                     // 8476
                                                                                                                       // 8477
		if ( this.overlay ) {                                                                                                // 8478
			this.overlay.destroy();                                                                                             // 8479
		}                                                                                                                    // 8480
		this.uiDialog.hide();                                                                                                // 8481
		this.element                                                                                                         // 8482
			.removeClass( "ui-dialog-content ui-widget-content" )                                                               // 8483
			.hide()                                                                                                             // 8484
			.appendTo( "body" );                                                                                                // 8485
		this.uiDialog.remove();                                                                                              // 8486
                                                                                                                       // 8487
		if ( this.originalTitle ) {                                                                                          // 8488
			this.element.attr( "title", this.originalTitle );                                                                   // 8489
		}                                                                                                                    // 8490
                                                                                                                       // 8491
		next = oldPosition.parent.children().eq( oldPosition.index );                                                        // 8492
		// Don't try to place the dialog next to itself (#8613)                                                              // 8493
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {                                                              // 8494
			next.before( this.element );                                                                                        // 8495
		} else {                                                                                                             // 8496
			oldPosition.parent.append( this.element );                                                                          // 8497
		}                                                                                                                    // 8498
	},                                                                                                                    // 8499
                                                                                                                       // 8500
	widget: function() {                                                                                                  // 8501
		return this.uiDialog;                                                                                                // 8502
	},                                                                                                                    // 8503
                                                                                                                       // 8504
	close: function( event ) {                                                                                            // 8505
		var that = this,                                                                                                     // 8506
			maxZ, thisZ;                                                                                                        // 8507
                                                                                                                       // 8508
		if ( !this._isOpen ) {                                                                                               // 8509
			return;                                                                                                             // 8510
		}                                                                                                                    // 8511
                                                                                                                       // 8512
		if ( false === this._trigger( "beforeClose", event ) ) {                                                             // 8513
			return;                                                                                                             // 8514
		}                                                                                                                    // 8515
                                                                                                                       // 8516
		this._isOpen = false;                                                                                                // 8517
                                                                                                                       // 8518
		if ( this.overlay ) {                                                                                                // 8519
			this.overlay.destroy();                                                                                             // 8520
		}                                                                                                                    // 8521
                                                                                                                       // 8522
		if ( this.options.hide ) {                                                                                           // 8523
			this._hide( this.uiDialog, this.options.hide, function() {                                                          // 8524
				that._trigger( "close", event );                                                                                   // 8525
			});                                                                                                                 // 8526
		} else {                                                                                                             // 8527
			this.uiDialog.hide();                                                                                               // 8528
			this._trigger( "close", event );                                                                                    // 8529
		}                                                                                                                    // 8530
                                                                                                                       // 8531
		$.ui.dialog.overlay.resize();                                                                                        // 8532
                                                                                                                       // 8533
		// adjust the maxZ to allow other modal dialogs to continue to work (see #4309)                                      // 8534
		if ( this.options.modal ) {                                                                                          // 8535
			maxZ = 0;                                                                                                           // 8536
			$( ".ui-dialog" ).each(function() {                                                                                 // 8537
				if ( this !== that.uiDialog[0] ) {                                                                                 // 8538
					thisZ = $( this ).css( "z-index" );                                                                               // 8539
					if ( !isNaN( thisZ ) ) {                                                                                          // 8540
						maxZ = Math.max( maxZ, thisZ );                                                                                  // 8541
					}                                                                                                                 // 8542
				}                                                                                                                  // 8543
			});                                                                                                                 // 8544
			$.ui.dialog.maxZ = maxZ;                                                                                            // 8545
		}                                                                                                                    // 8546
                                                                                                                       // 8547
		return this;                                                                                                         // 8548
	},                                                                                                                    // 8549
                                                                                                                       // 8550
	isOpen: function() {                                                                                                  // 8551
		return this._isOpen;                                                                                                 // 8552
	},                                                                                                                    // 8553
                                                                                                                       // 8554
	// the force parameter allows us to move modal dialogs to their correct                                               // 8555
	// position on open                                                                                                   // 8556
	moveToTop: function( force, event ) {                                                                                 // 8557
		var options = this.options,                                                                                          // 8558
			saveScroll;                                                                                                         // 8559
                                                                                                                       // 8560
		if ( ( options.modal && !force ) ||                                                                                  // 8561
				( !options.stack && !options.modal ) ) {                                                                           // 8562
			return this._trigger( "focus", event );                                                                             // 8563
		}                                                                                                                    // 8564
                                                                                                                       // 8565
		if ( options.zIndex > $.ui.dialog.maxZ ) {                                                                           // 8566
			$.ui.dialog.maxZ = options.zIndex;                                                                                  // 8567
		}                                                                                                                    // 8568
		if ( this.overlay ) {                                                                                                // 8569
			$.ui.dialog.maxZ += 1;                                                                                              // 8570
			$.ui.dialog.overlay.maxZ = $.ui.dialog.maxZ;                                                                        // 8571
			this.overlay.$el.css( "z-index", $.ui.dialog.overlay.maxZ );                                                        // 8572
		}                                                                                                                    // 8573
                                                                                                                       // 8574
		// Save and then restore scroll                                                                                      // 8575
		// Opera 9.5+ resets when parent z-index is changed.                                                                 // 8576
		// http://bugs.jqueryui.com/ticket/3193                                                                              // 8577
		saveScroll = {                                                                                                       // 8578
			scrollTop: this.element.scrollTop(),                                                                                // 8579
			scrollLeft: this.element.scrollLeft()                                                                               // 8580
		};                                                                                                                   // 8581
		$.ui.dialog.maxZ += 1;                                                                                               // 8582
		this.uiDialog.css( "z-index", $.ui.dialog.maxZ );                                                                    // 8583
		this.element.attr( saveScroll );                                                                                     // 8584
		this._trigger( "focus", event );                                                                                     // 8585
                                                                                                                       // 8586
		return this;                                                                                                         // 8587
	},                                                                                                                    // 8588
                                                                                                                       // 8589
	open: function() {                                                                                                    // 8590
		if ( this._isOpen ) {                                                                                                // 8591
			return;                                                                                                             // 8592
		}                                                                                                                    // 8593
                                                                                                                       // 8594
		var hasFocus,                                                                                                        // 8595
			options = this.options,                                                                                             // 8596
			uiDialog = this.uiDialog;                                                                                           // 8597
                                                                                                                       // 8598
		this._size();                                                                                                        // 8599
		this._position( options.position );                                                                                  // 8600
		uiDialog.show( options.show );                                                                                       // 8601
		this.overlay = options.modal ? new $.ui.dialog.overlay( this ) : null;                                               // 8602
		this.moveToTop( true );                                                                                              // 8603
                                                                                                                       // 8604
		// set focus to the first tabbable element in the content area or the first button                                   // 8605
		// if there are no tabbable elements, set focus on the dialog itself                                                 // 8606
		hasFocus = this.element.find( ":tabbable" );                                                                         // 8607
		if ( !hasFocus.length ) {                                                                                            // 8608
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );                                                             // 8609
			if ( !hasFocus.length ) {                                                                                           // 8610
				hasFocus = uiDialog;                                                                                               // 8611
			}                                                                                                                   // 8612
		}                                                                                                                    // 8613
		hasFocus.eq( 0 ).focus();                                                                                            // 8614
                                                                                                                       // 8615
		this._isOpen = true;                                                                                                 // 8616
		this._trigger( "open" );                                                                                             // 8617
                                                                                                                       // 8618
		return this;                                                                                                         // 8619
	},                                                                                                                    // 8620
                                                                                                                       // 8621
	_createButtons: function( buttons ) {                                                                                 // 8622
		var that = this,                                                                                                     // 8623
			hasButtons = false;                                                                                                 // 8624
                                                                                                                       // 8625
		// if we already have a button pane, remove it                                                                       // 8626
		this.uiDialogButtonPane.remove();                                                                                    // 8627
		this.uiButtonSet.empty();                                                                                            // 8628
                                                                                                                       // 8629
		if ( typeof buttons === "object" && buttons !== null ) {                                                             // 8630
			$.each( buttons, function() {                                                                                       // 8631
				return !(hasButtons = true);                                                                                       // 8632
			});                                                                                                                 // 8633
		}                                                                                                                    // 8634
		if ( hasButtons ) {                                                                                                  // 8635
			$.each( buttons, function( name, props ) {                                                                          // 8636
				var button, click;                                                                                                 // 8637
				props = $.isFunction( props ) ?                                                                                    // 8638
					{ click: props, text: name } :                                                                                    // 8639
					props;                                                                                                            // 8640
				// Default to a non-submitting button                                                                              // 8641
				props = $.extend( { type: "button" }, props );                                                                     // 8642
				// Change the context for the click callback to be the main element                                                // 8643
				click = props.click;                                                                                               // 8644
				props.click = function() {                                                                                         // 8645
					click.apply( that.element[0], arguments );                                                                        // 8646
				};                                                                                                                 // 8647
				button = $( "<button></button>", props )                                                                           // 8648
					.appendTo( that.uiButtonSet );                                                                                    // 8649
				if ( $.fn.button ) {                                                                                               // 8650
					button.button();                                                                                                  // 8651
				}                                                                                                                  // 8652
			});                                                                                                                 // 8653
			this.uiDialog.addClass( "ui-dialog-buttons" );                                                                      // 8654
			this.uiDialogButtonPane.appendTo( this.uiDialog );                                                                  // 8655
		} else {                                                                                                             // 8656
			this.uiDialog.removeClass( "ui-dialog-buttons" );                                                                   // 8657
		}                                                                                                                    // 8658
	},                                                                                                                    // 8659
                                                                                                                       // 8660
	_makeDraggable: function() {                                                                                          // 8661
		var that = this,                                                                                                     // 8662
			options = this.options;                                                                                             // 8663
                                                                                                                       // 8664
		function filteredUi( ui ) {                                                                                          // 8665
			return {                                                                                                            // 8666
				position: ui.position,                                                                                             // 8667
				offset: ui.offset                                                                                                  // 8668
			};                                                                                                                  // 8669
		}                                                                                                                    // 8670
                                                                                                                       // 8671
		this.uiDialog.draggable({                                                                                            // 8672
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",                                                            // 8673
			handle: ".ui-dialog-titlebar",                                                                                      // 8674
			containment: "document",                                                                                            // 8675
			start: function( event, ui ) {                                                                                      // 8676
				$( this )                                                                                                          // 8677
					.addClass( "ui-dialog-dragging" );                                                                                // 8678
				that._trigger( "dragStart", event, filteredUi( ui ) );                                                             // 8679
			},                                                                                                                  // 8680
			drag: function( event, ui ) {                                                                                       // 8681
				that._trigger( "drag", event, filteredUi( ui ) );                                                                  // 8682
			},                                                                                                                  // 8683
			stop: function( event, ui ) {                                                                                       // 8684
				options.position = [                                                                                               // 8685
					ui.position.left - that.document.scrollLeft(),                                                                    // 8686
					ui.position.top - that.document.scrollTop()                                                                       // 8687
				];                                                                                                                 // 8688
				$( this )                                                                                                          // 8689
					.removeClass( "ui-dialog-dragging" );                                                                             // 8690
				that._trigger( "dragStop", event, filteredUi( ui ) );                                                              // 8691
				$.ui.dialog.overlay.resize();                                                                                      // 8692
			}                                                                                                                   // 8693
		});                                                                                                                  // 8694
	},                                                                                                                    // 8695
                                                                                                                       // 8696
	_makeResizable: function( handles ) {                                                                                 // 8697
		handles = (handles === undefined ? this.options.resizable : handles);                                                // 8698
		var that = this,                                                                                                     // 8699
			options = this.options,                                                                                             // 8700
			// .ui-resizable has position: relative defined in the stylesheet                                                   // 8701
			// but dialogs have to use absolute or fixed positioning                                                            // 8702
			position = this.uiDialog.css( "position" ),                                                                         // 8703
			resizeHandles = typeof handles === 'string' ?                                                                       // 8704
				handles	:                                                                                                          // 8705
				"n,e,s,w,se,sw,ne,nw";                                                                                             // 8706
                                                                                                                       // 8707
		function filteredUi( ui ) {                                                                                          // 8708
			return {                                                                                                            // 8709
				originalPosition: ui.originalPosition,                                                                             // 8710
				originalSize: ui.originalSize,                                                                                     // 8711
				position: ui.position,                                                                                             // 8712
				size: ui.size                                                                                                      // 8713
			};                                                                                                                  // 8714
		}                                                                                                                    // 8715
                                                                                                                       // 8716
		this.uiDialog.resizable({                                                                                            // 8717
			cancel: ".ui-dialog-content",                                                                                       // 8718
			containment: "document",                                                                                            // 8719
			alsoResize: this.element,                                                                                           // 8720
			maxWidth: options.maxWidth,                                                                                         // 8721
			maxHeight: options.maxHeight,                                                                                       // 8722
			minWidth: options.minWidth,                                                                                         // 8723
			minHeight: this._minHeight(),                                                                                       // 8724
			handles: resizeHandles,                                                                                             // 8725
			start: function( event, ui ) {                                                                                      // 8726
				$( this ).addClass( "ui-dialog-resizing" );                                                                        // 8727
				that._trigger( "resizeStart", event, filteredUi( ui ) );                                                           // 8728
			},                                                                                                                  // 8729
			resize: function( event, ui ) {                                                                                     // 8730
				that._trigger( "resize", event, filteredUi( ui ) );                                                                // 8731
			},                                                                                                                  // 8732
			stop: function( event, ui ) {                                                                                       // 8733
				$( this ).removeClass( "ui-dialog-resizing" );                                                                     // 8734
				options.height = $( this ).height();                                                                               // 8735
				options.width = $( this ).width();                                                                                 // 8736
				that._trigger( "resizeStop", event, filteredUi( ui ) );                                                            // 8737
				$.ui.dialog.overlay.resize();                                                                                      // 8738
			}                                                                                                                   // 8739
		})                                                                                                                   // 8740
		.css( "position", position )                                                                                         // 8741
		.find( ".ui-resizable-se" )                                                                                          // 8742
			.addClass( "ui-icon ui-icon-grip-diagonal-se" );                                                                    // 8743
	},                                                                                                                    // 8744
                                                                                                                       // 8745
	_minHeight: function() {                                                                                              // 8746
		var options = this.options;                                                                                          // 8747
                                                                                                                       // 8748
		if ( options.height === "auto" ) {                                                                                   // 8749
			return options.minHeight;                                                                                           // 8750
		} else {                                                                                                             // 8751
			return Math.min( options.minHeight, options.height );                                                               // 8752
		}                                                                                                                    // 8753
	},                                                                                                                    // 8754
                                                                                                                       // 8755
	_position: function( position ) {                                                                                     // 8756
		var myAt = [],                                                                                                       // 8757
			offset = [ 0, 0 ],                                                                                                  // 8758
			isVisible;                                                                                                          // 8759
                                                                                                                       // 8760
		if ( position ) {                                                                                                    // 8761
			// deep extending converts arrays to objects in jQuery <= 1.3.2 :-(                                                 // 8762
	//		if (typeof position == 'string' || $.isArray(position)) {                                                         // 8763
	//			myAt = $.isArray(position) ? position : position.split(' ');                                                     // 8764
                                                                                                                       // 8765
			if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {                         // 8766
				myAt = position.split ? position.split( " " ) : [ position[ 0 ], position[ 1 ] ];                                  // 8767
				if ( myAt.length === 1 ) {                                                                                         // 8768
					myAt[ 1 ] = myAt[ 0 ];                                                                                            // 8769
				}                                                                                                                  // 8770
                                                                                                                       // 8771
				$.each( [ "left", "top" ], function( i, offsetPosition ) {                                                         // 8772
					if ( +myAt[ i ] === myAt[ i ] ) {                                                                                 // 8773
						offset[ i ] = myAt[ i ];                                                                                         // 8774
						myAt[ i ] = offsetPosition;                                                                                      // 8775
					}                                                                                                                 // 8776
				});                                                                                                                // 8777
                                                                                                                       // 8778
				position = {                                                                                                       // 8779
					my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +                                               // 8780
						myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),                                                         // 8781
					at: myAt.join( " " )                                                                                              // 8782
				};                                                                                                                 // 8783
			}                                                                                                                   // 8784
                                                                                                                       // 8785
			position = $.extend( {}, $.ui.dialog.prototype.options.position, position );                                        // 8786
		} else {                                                                                                             // 8787
			position = $.ui.dialog.prototype.options.position;                                                                  // 8788
		}                                                                                                                    // 8789
                                                                                                                       // 8790
		// need to show the dialog to get the actual offset in the position plugin                                           // 8791
		isVisible = this.uiDialog.is( ":visible" );                                                                          // 8792
		if ( !isVisible ) {                                                                                                  // 8793
			this.uiDialog.show();                                                                                               // 8794
		}                                                                                                                    // 8795
		this.uiDialog.position( position );                                                                                  // 8796
		if ( !isVisible ) {                                                                                                  // 8797
			this.uiDialog.hide();                                                                                               // 8798
		}                                                                                                                    // 8799
	},                                                                                                                    // 8800
                                                                                                                       // 8801
	_setOptions: function( options ) {                                                                                    // 8802
		var that = this,                                                                                                     // 8803
			resizableOptions = {},                                                                                              // 8804
			resize = false;                                                                                                     // 8805
                                                                                                                       // 8806
		$.each( options, function( key, value ) {                                                                            // 8807
			that._setOption( key, value );                                                                                      // 8808
                                                                                                                       // 8809
			if ( key in sizeRelatedOptions ) {                                                                                  // 8810
				resize = true;                                                                                                     // 8811
			}                                                                                                                   // 8812
			if ( key in resizableRelatedOptions ) {                                                                             // 8813
				resizableOptions[ key ] = value;                                                                                   // 8814
			}                                                                                                                   // 8815
		});                                                                                                                  // 8816
                                                                                                                       // 8817
		if ( resize ) {                                                                                                      // 8818
			this._size();                                                                                                       // 8819
		}                                                                                                                    // 8820
		if ( this.uiDialog.is( ":data(resizable)" ) ) {                                                                      // 8821
			this.uiDialog.resizable( "option", resizableOptions );                                                              // 8822
		}                                                                                                                    // 8823
	},                                                                                                                    // 8824
                                                                                                                       // 8825
	_setOption: function( key, value ) {                                                                                  // 8826
		var isDraggable, isResizable,                                                                                        // 8827
			uiDialog = this.uiDialog;                                                                                           // 8828
                                                                                                                       // 8829
		switch ( key ) {                                                                                                     // 8830
			case "buttons":                                                                                                     // 8831
				this._createButtons( value );                                                                                      // 8832
				break;                                                                                                             // 8833
			case "closeText":                                                                                                   // 8834
				// ensure that we always pass a string                                                                             // 8835
				this.uiDialogTitlebarCloseText.text( "" + value );                                                                 // 8836
				break;                                                                                                             // 8837
			case "dialogClass":                                                                                                 // 8838
				uiDialog                                                                                                           // 8839
					.removeClass( this.options.dialogClass )                                                                          // 8840
					.addClass( uiDialogClasses + value );                                                                             // 8841
				break;                                                                                                             // 8842
			case "disabled":                                                                                                    // 8843
				if ( value ) {                                                                                                     // 8844
					uiDialog.addClass( "ui-dialog-disabled" );                                                                        // 8845
				} else {                                                                                                           // 8846
					uiDialog.removeClass( "ui-dialog-disabled" );                                                                     // 8847
				}                                                                                                                  // 8848
				break;                                                                                                             // 8849
			case "draggable":                                                                                                   // 8850
				isDraggable = uiDialog.is( ":data(draggable)" );                                                                   // 8851
				if ( isDraggable && !value ) {                                                                                     // 8852
					uiDialog.draggable( "destroy" );                                                                                  // 8853
				}                                                                                                                  // 8854
                                                                                                                       // 8855
				if ( !isDraggable && value ) {                                                                                     // 8856
					this._makeDraggable();                                                                                            // 8857
				}                                                                                                                  // 8858
				break;                                                                                                             // 8859
			case "position":                                                                                                    // 8860
				this._position( value );                                                                                           // 8861
				break;                                                                                                             // 8862
			case "resizable":                                                                                                   // 8863
				// currently resizable, becoming non-resizable                                                                     // 8864
				isResizable = uiDialog.is( ":data(resizable)" );                                                                   // 8865
				if ( isResizable && !value ) {                                                                                     // 8866
					uiDialog.resizable( "destroy" );                                                                                  // 8867
				}                                                                                                                  // 8868
                                                                                                                       // 8869
				// currently resizable, changing handles                                                                           // 8870
				if ( isResizable && typeof value === "string" ) {                                                                  // 8871
					uiDialog.resizable( "option", "handles", value );                                                                 // 8872
				}                                                                                                                  // 8873
                                                                                                                       // 8874
				// currently non-resizable, becoming resizable                                                                     // 8875
				if ( !isResizable && value !== false ) {                                                                           // 8876
					this._makeResizable( value );                                                                                     // 8877
				}                                                                                                                  // 8878
				break;                                                                                                             // 8879
			case "title":                                                                                                       // 8880
				// convert whatever was passed in o a string, for html() to not throw up                                           // 8881
				$( ".ui-dialog-title", this.uiDialogTitlebar )                                                                     // 8882
					.html( "" + ( value || "&#160;" ) );                                                                              // 8883
				break;                                                                                                             // 8884
		}                                                                                                                    // 8885
                                                                                                                       // 8886
		this._super( key, value );                                                                                           // 8887
	},                                                                                                                    // 8888
                                                                                                                       // 8889
	_size: function() {                                                                                                   // 8890
		/* If the user has resized the dialog, the .ui-dialog and .ui-dialog-content                                         // 8891
		 * divs will both have width and height set, so we need to reset them                                                // 8892
		 */                                                                                                                  // 8893
		var nonContentHeight, minContentHeight, autoHeight,                                                                  // 8894
			options = this.options,                                                                                             // 8895
			isVisible = this.uiDialog.is( ":visible" );                                                                         // 8896
                                                                                                                       // 8897
		// reset content sizing                                                                                              // 8898
		this.element.show().css({                                                                                            // 8899
			width: "auto",                                                                                                      // 8900
			minHeight: 0,                                                                                                       // 8901
			height: 0                                                                                                           // 8902
		});                                                                                                                  // 8903
                                                                                                                       // 8904
		if ( options.minWidth > options.width ) {                                                                            // 8905
			options.width = options.minWidth;                                                                                   // 8906
		}                                                                                                                    // 8907
                                                                                                                       // 8908
		// reset wrapper sizing                                                                                              // 8909
		// determine the height of all the non-content elements                                                              // 8910
		nonContentHeight = this.uiDialog.css({                                                                               // 8911
				height: "auto",                                                                                                    // 8912
				width: options.width                                                                                               // 8913
			})                                                                                                                  // 8914
			.outerHeight();                                                                                                     // 8915
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );                                              // 8916
                                                                                                                       // 8917
		if ( options.height === "auto" ) {                                                                                   // 8918
			// only needed for IE6 support                                                                                      // 8919
			if ( $.support.minHeight ) {                                                                                        // 8920
				this.element.css({                                                                                                 // 8921
					minHeight: minContentHeight,                                                                                      // 8922
					height: "auto"                                                                                                    // 8923
				});                                                                                                                // 8924
			} else {                                                                                                            // 8925
				this.uiDialog.show();                                                                                              // 8926
				autoHeight = this.element.css( "height", "auto" ).height();                                                        // 8927
				if ( !isVisible ) {                                                                                                // 8928
					this.uiDialog.hide();                                                                                             // 8929
				}                                                                                                                  // 8930
				this.element.height( Math.max( autoHeight, minContentHeight ) );                                                   // 8931
			}                                                                                                                   // 8932
		} else {                                                                                                             // 8933
			this.element.height( Math.max( options.height - nonContentHeight, 0 ) );                                            // 8934
		}                                                                                                                    // 8935
                                                                                                                       // 8936
		if (this.uiDialog.is( ":data(resizable)" ) ) {                                                                       // 8937
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );                                                // 8938
		}                                                                                                                    // 8939
	}                                                                                                                     // 8940
});                                                                                                                    // 8941
                                                                                                                       // 8942
$.extend($.ui.dialog, {                                                                                                // 8943
	uuid: 0,                                                                                                              // 8944
	maxZ: 0,                                                                                                              // 8945
                                                                                                                       // 8946
	getTitleId: function($el) {                                                                                           // 8947
		var id = $el.attr( "id" );                                                                                           // 8948
		if ( !id ) {                                                                                                         // 8949
			this.uuid += 1;                                                                                                     // 8950
			id = this.uuid;                                                                                                     // 8951
		}                                                                                                                    // 8952
		return "ui-dialog-title-" + id;                                                                                      // 8953
	},                                                                                                                    // 8954
                                                                                                                       // 8955
	overlay: function( dialog ) {                                                                                         // 8956
		this.$el = $.ui.dialog.overlay.create( dialog );                                                                     // 8957
	}                                                                                                                     // 8958
});                                                                                                                    // 8959
                                                                                                                       // 8960
$.extend( $.ui.dialog.overlay, {                                                                                       // 8961
	instances: [],                                                                                                        // 8962
	// reuse old instances due to IE memory leak with alpha transparency (see #5185)                                      // 8963
	oldInstances: [],                                                                                                     // 8964
	maxZ: 0,                                                                                                              // 8965
	events: $.map(                                                                                                        // 8966
		"focus,mousedown,mouseup,keydown,keypress,click".split( "," ),                                                       // 8967
		function( event ) {                                                                                                  // 8968
			return event + ".dialog-overlay";                                                                                   // 8969
		}                                                                                                                    // 8970
	).join( " " ),                                                                                                        // 8971
	create: function( dialog ) {                                                                                          // 8972
		if ( this.instances.length === 0 ) {                                                                                 // 8973
			// prevent use of anchors and inputs                                                                                // 8974
			// we use a setTimeout in case the overlay is created from an                                                       // 8975
			// event that we're going to be cancelling (see #2804)                                                              // 8976
			setTimeout(function() {                                                                                             // 8977
				// handle $(el).dialog().dialog('close') (see #4065)                                                               // 8978
				if ( $.ui.dialog.overlay.instances.length ) {                                                                      // 8979
					$( document ).bind( $.ui.dialog.overlay.events, function( event ) {                                               // 8980
						// stop events if the z-index of the target is < the z-index of the overlay                                      // 8981
						// we cannot return true when we don't want to cancel the event (#3523)                                          // 8982
						if ( $( event.target ).zIndex() < $.ui.dialog.overlay.maxZ ) {                                                   // 8983
							return false;                                                                                                   // 8984
						}                                                                                                                // 8985
					});                                                                                                               // 8986
				}                                                                                                                  // 8987
			}, 1 );                                                                                                             // 8988
                                                                                                                       // 8989
			// handle window resize                                                                                             // 8990
			$( window ).bind( "resize.dialog-overlay", $.ui.dialog.overlay.resize );                                            // 8991
		}                                                                                                                    // 8992
                                                                                                                       // 8993
		var $el = ( this.oldInstances.pop() || $( "<div>" ).addClass( "ui-widget-overlay" ) );                               // 8994
                                                                                                                       // 8995
		// allow closing by pressing the escape key                                                                          // 8996
		$( document ).bind( "keydown.dialog-overlay", function( event ) {                                                    // 8997
			var instances = $.ui.dialog.overlay.instances;                                                                      // 8998
			// only react to the event if we're the top overlay                                                                 // 8999
			if ( instances.length !== 0 && instances[ instances.length - 1 ] === $el &&                                         // 9000
				dialog.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&                                    // 9001
				event.keyCode === $.ui.keyCode.ESCAPE ) {                                                                          // 9002
                                                                                                                       // 9003
				dialog.close( event );                                                                                             // 9004
				event.preventDefault();                                                                                            // 9005
			}                                                                                                                   // 9006
		});                                                                                                                  // 9007
                                                                                                                       // 9008
		$el.appendTo( document.body ).css({                                                                                  // 9009
			width: this.width(),                                                                                                // 9010
			height: this.height()                                                                                               // 9011
		});                                                                                                                  // 9012
                                                                                                                       // 9013
		if ( $.fn.bgiframe ) {                                                                                               // 9014
			$el.bgiframe();                                                                                                     // 9015
		}                                                                                                                    // 9016
                                                                                                                       // 9017
		this.instances.push( $el );                                                                                          // 9018
		return $el;                                                                                                          // 9019
	},                                                                                                                    // 9020
                                                                                                                       // 9021
	destroy: function( $el ) {                                                                                            // 9022
		var indexOf = $.inArray( $el, this.instances ),                                                                      // 9023
			maxZ = 0;                                                                                                           // 9024
                                                                                                                       // 9025
		if ( indexOf !== -1 ) {                                                                                              // 9026
			this.oldInstances.push( this.instances.splice( indexOf, 1 )[ 0 ] );                                                 // 9027
		}                                                                                                                    // 9028
                                                                                                                       // 9029
		if ( this.instances.length === 0 ) {                                                                                 // 9030
			$( [ document, window ] ).unbind( ".dialog-overlay" );                                                              // 9031
		}                                                                                                                    // 9032
                                                                                                                       // 9033
		$el.height( 0 ).width( 0 ).remove();                                                                                 // 9034
                                                                                                                       // 9035
		// adjust the maxZ to allow other modal dialogs to continue to work (see #4309)                                      // 9036
		$.each( this.instances, function() {                                                                                 // 9037
			maxZ = Math.max( maxZ, this.css( "z-index" ) );                                                                     // 9038
		});                                                                                                                  // 9039
		this.maxZ = maxZ;                                                                                                    // 9040
	},                                                                                                                    // 9041
                                                                                                                       // 9042
	height: function() {                                                                                                  // 9043
		var scrollHeight,                                                                                                    // 9044
			offsetHeight;                                                                                                       // 9045
		// handle IE                                                                                                         // 9046
		if ( $.ui.ie ) {                                                                                                     // 9047
			scrollHeight = Math.max(                                                                                            // 9048
				document.documentElement.scrollHeight,                                                                             // 9049
				document.body.scrollHeight                                                                                         // 9050
			);                                                                                                                  // 9051
			offsetHeight = Math.max(                                                                                            // 9052
				document.documentElement.offsetHeight,                                                                             // 9053
				document.body.offsetHeight                                                                                         // 9054
			);                                                                                                                  // 9055
                                                                                                                       // 9056
			if ( scrollHeight < offsetHeight ) {                                                                                // 9057
				return $( window ).height() + "px";                                                                                // 9058
			} else {                                                                                                            // 9059
				return scrollHeight + "px";                                                                                        // 9060
			}                                                                                                                   // 9061
		// handle "good" browsers                                                                                            // 9062
		} else {                                                                                                             // 9063
			return $( document ).height() + "px";                                                                               // 9064
		}                                                                                                                    // 9065
	},                                                                                                                    // 9066
                                                                                                                       // 9067
	width: function() {                                                                                                   // 9068
		var scrollWidth,                                                                                                     // 9069
			offsetWidth;                                                                                                        // 9070
		// handle IE                                                                                                         // 9071
		if ( $.ui.ie ) {                                                                                                     // 9072
			scrollWidth = Math.max(                                                                                             // 9073
				document.documentElement.scrollWidth,                                                                              // 9074
				document.body.scrollWidth                                                                                          // 9075
			);                                                                                                                  // 9076
			offsetWidth = Math.max(                                                                                             // 9077
				document.documentElement.offsetWidth,                                                                              // 9078
				document.body.offsetWidth                                                                                          // 9079
			);                                                                                                                  // 9080
                                                                                                                       // 9081
			if ( scrollWidth < offsetWidth ) {                                                                                  // 9082
				return $( window ).width() + "px";                                                                                 // 9083
			} else {                                                                                                            // 9084
				return scrollWidth + "px";                                                                                         // 9085
			}                                                                                                                   // 9086
		// handle "good" browsers                                                                                            // 9087
		} else {                                                                                                             // 9088
			return $( document ).width() + "px";                                                                                // 9089
		}                                                                                                                    // 9090
	},                                                                                                                    // 9091
                                                                                                                       // 9092
	resize: function() {                                                                                                  // 9093
		/* If the dialog is draggable and the user drags it past the                                                         // 9094
		 * right edge of the window, the document becomes wider so we                                                        // 9095
		 * need to stretch the overlay. If the user then drags the                                                           // 9096
		 * dialog back to the left, the document will become narrower,                                                       // 9097
		 * so we need to shrink the overlay to the appropriate size.                                                         // 9098
		 * This is handled by shrinking the overlay before setting it                                                        // 9099
		 * to the full document size.                                                                                        // 9100
		 */                                                                                                                  // 9101
		var $overlays = $( [] );                                                                                             // 9102
		$.each( $.ui.dialog.overlay.instances, function() {                                                                  // 9103
			$overlays = $overlays.add( this );                                                                                  // 9104
		});                                                                                                                  // 9105
                                                                                                                       // 9106
		$overlays.css({                                                                                                      // 9107
			width: 0,                                                                                                           // 9108
			height: 0                                                                                                           // 9109
		}).css({                                                                                                             // 9110
			width: $.ui.dialog.overlay.width(),                                                                                 // 9111
			height: $.ui.dialog.overlay.height()                                                                                // 9112
		});                                                                                                                  // 9113
	}                                                                                                                     // 9114
});                                                                                                                    // 9115
                                                                                                                       // 9116
$.extend( $.ui.dialog.overlay.prototype, {                                                                             // 9117
	destroy: function() {                                                                                                 // 9118
		$.ui.dialog.overlay.destroy( this.$el );                                                                             // 9119
	}                                                                                                                     // 9120
});                                                                                                                    // 9121
                                                                                                                       // 9122
}( jQuery ) );                                                                                                         // 9123
(function( $, undefined ) {                                                                                            // 9124
                                                                                                                       // 9125
var mouseHandled = false;                                                                                              // 9126
                                                                                                                       // 9127
$.widget( "ui.menu", {                                                                                                 // 9128
	version: "1.9.2",                                                                                                     // 9129
	defaultElement: "<ul>",                                                                                               // 9130
	delay: 300,                                                                                                           // 9131
	options: {                                                                                                            // 9132
		icons: {                                                                                                             // 9133
			submenu: "ui-icon-carat-1-e"                                                                                        // 9134
		},                                                                                                                   // 9135
		menus: "ul",                                                                                                         // 9136
		position: {                                                                                                          // 9137
			my: "left top",                                                                                                     // 9138
			at: "right top"                                                                                                     // 9139
		},                                                                                                                   // 9140
		role: "menu",                                                                                                        // 9141
                                                                                                                       // 9142
		// callbacks                                                                                                         // 9143
		blur: null,                                                                                                          // 9144
		focus: null,                                                                                                         // 9145
		select: null                                                                                                         // 9146
	},                                                                                                                    // 9147
                                                                                                                       // 9148
	_create: function() {                                                                                                 // 9149
		this.activeMenu = this.element;                                                                                      // 9150
		this.element                                                                                                         // 9151
			.uniqueId()                                                                                                         // 9152
			.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )                                                    // 9153
			.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )                                           // 9154
			.attr({                                                                                                             // 9155
				role: this.options.role,                                                                                           // 9156
				tabIndex: 0                                                                                                        // 9157
			})                                                                                                                  // 9158
			// need to catch all clicks on disabled menu                                                                        // 9159
			// not possible through _on                                                                                         // 9160
			.bind( "click" + this.eventNamespace, $.proxy(function( event ) {                                                   // 9161
				if ( this.options.disabled ) {                                                                                     // 9162
					event.preventDefault();                                                                                           // 9163
				}                                                                                                                  // 9164
			}, this ));                                                                                                         // 9165
                                                                                                                       // 9166
		if ( this.options.disabled ) {                                                                                       // 9167
			this.element                                                                                                        // 9168
				.addClass( "ui-state-disabled" )                                                                                   // 9169
				.attr( "aria-disabled", "true" );                                                                                  // 9170
		}                                                                                                                    // 9171
                                                                                                                       // 9172
		this._on({                                                                                                           // 9173
			// Prevent focus from sticking to links inside menu after clicking                                                  // 9174
			// them (focus should always stay on UL during navigation).                                                         // 9175
			"mousedown .ui-menu-item > a": function( event ) {                                                                  // 9176
				event.preventDefault();                                                                                            // 9177
			},                                                                                                                  // 9178
			"click .ui-state-disabled > a": function( event ) {                                                                 // 9179
				event.preventDefault();                                                                                            // 9180
			},                                                                                                                  // 9181
			"click .ui-menu-item:has(a)": function( event ) {                                                                   // 9182
				var target = $( event.target ).closest( ".ui-menu-item" );                                                         // 9183
				if ( !mouseHandled && target.not( ".ui-state-disabled" ).length ) {                                                // 9184
					mouseHandled = true;                                                                                              // 9185
                                                                                                                       // 9186
					this.select( event );                                                                                             // 9187
					// Open submenu on click                                                                                          // 9188
					if ( target.has( ".ui-menu" ).length ) {                                                                          // 9189
						this.expand( event );                                                                                            // 9190
					} else if ( !this.element.is( ":focus" ) ) {                                                                      // 9191
						// Redirect focus to the menu                                                                                    // 9192
						this.element.trigger( "focus", [ true ] );                                                                       // 9193
                                                                                                                       // 9194
						// If the active item is on the top level, let it stay active.                                                   // 9195
						// Otherwise, blur the active item since it is no longer visible.                                                // 9196
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {                                           // 9197
							clearTimeout( this.timer );                                                                                     // 9198
						}                                                                                                                // 9199
					}                                                                                                                 // 9200
				}                                                                                                                  // 9201
			},                                                                                                                  // 9202
			"mouseenter .ui-menu-item": function( event ) {                                                                     // 9203
				var target = $( event.currentTarget );                                                                             // 9204
				// Remove ui-state-active class from siblings of the newly focused menu item                                       // 9205
				// to avoid a jump caused by adjacent elements both having a class with a border                                   // 9206
				target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );                                 // 9207
				this.focus( event, target );                                                                                       // 9208
			},                                                                                                                  // 9209
			mouseleave: "collapseAll",                                                                                          // 9210
			"mouseleave .ui-menu": "collapseAll",                                                                               // 9211
			focus: function( event, keepActiveItem ) {                                                                          // 9212
				// If there's already an active item, keep it active                                                               // 9213
				// If not, activate the first item                                                                                 // 9214
				var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );                                        // 9215
                                                                                                                       // 9216
				if ( !keepActiveItem ) {                                                                                           // 9217
					this.focus( event, item );                                                                                        // 9218
				}                                                                                                                  // 9219
			},                                                                                                                  // 9220
			blur: function( event ) {                                                                                           // 9221
				this._delay(function() {                                                                                           // 9222
					if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {                                           // 9223
						this.collapseAll( event );                                                                                       // 9224
					}                                                                                                                 // 9225
				});                                                                                                                // 9226
			},                                                                                                                  // 9227
			keydown: "_keydown"                                                                                                 // 9228
		});                                                                                                                  // 9229
                                                                                                                       // 9230
		this.refresh();                                                                                                      // 9231
                                                                                                                       // 9232
		// Clicks outside of a menu collapse any open menus                                                                  // 9233
		this._on( this.document, {                                                                                           // 9234
			click: function( event ) {                                                                                          // 9235
				if ( !$( event.target ).closest( ".ui-menu" ).length ) {                                                           // 9236
					this.collapseAll( event );                                                                                        // 9237
				}                                                                                                                  // 9238
                                                                                                                       // 9239
				// Reset the mouseHandled flag                                                                                     // 9240
				mouseHandled = false;                                                                                              // 9241
			}                                                                                                                   // 9242
		});                                                                                                                  // 9243
	},                                                                                                                    // 9244
                                                                                                                       // 9245
	_destroy: function() {                                                                                                // 9246
		// Destroy (sub)menus                                                                                                // 9247
		this.element                                                                                                         // 9248
			.removeAttr( "aria-activedescendant" )                                                                              // 9249
			.find( ".ui-menu" ).andSelf()                                                                                       // 9250
				.removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )                                  // 9251
				.removeAttr( "role" )                                                                                              // 9252
				.removeAttr( "tabIndex" )                                                                                          // 9253
				.removeAttr( "aria-labelledby" )                                                                                   // 9254
				.removeAttr( "aria-expanded" )                                                                                     // 9255
				.removeAttr( "aria-hidden" )                                                                                       // 9256
				.removeAttr( "aria-disabled" )                                                                                     // 9257
				.removeUniqueId()                                                                                                  // 9258
				.show();                                                                                                           // 9259
                                                                                                                       // 9260
		// Destroy menu items                                                                                                // 9261
		this.element.find( ".ui-menu-item" )                                                                                 // 9262
			.removeClass( "ui-menu-item" )                                                                                      // 9263
			.removeAttr( "role" )                                                                                               // 9264
			.removeAttr( "aria-disabled" )                                                                                      // 9265
			.children( "a" )                                                                                                    // 9266
				.removeUniqueId()                                                                                                  // 9267
				.removeClass( "ui-corner-all ui-state-hover" )                                                                     // 9268
				.removeAttr( "tabIndex" )                                                                                          // 9269
				.removeAttr( "role" )                                                                                              // 9270
				.removeAttr( "aria-haspopup" )                                                                                     // 9271
				.children().each( function() {                                                                                     // 9272
					var elem = $( this );                                                                                             // 9273
					if ( elem.data( "ui-menu-submenu-carat" ) ) {                                                                     // 9274
						elem.remove();                                                                                                   // 9275
					}                                                                                                                 // 9276
				});                                                                                                                // 9277
                                                                                                                       // 9278
		// Destroy menu dividers                                                                                             // 9279
		this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );                          // 9280
	},                                                                                                                    // 9281
                                                                                                                       // 9282
	_keydown: function( event ) {                                                                                         // 9283
		var match, prev, character, skip, regex,                                                                             // 9284
			preventDefault = true;                                                                                              // 9285
                                                                                                                       // 9286
		function escape( value ) {                                                                                           // 9287
			return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );                                                      // 9288
		}                                                                                                                    // 9289
                                                                                                                       // 9290
		switch ( event.keyCode ) {                                                                                           // 9291
		case $.ui.keyCode.PAGE_UP:                                                                                           // 9292
			this.previousPage( event );                                                                                         // 9293
			break;                                                                                                              // 9294
		case $.ui.keyCode.PAGE_DOWN:                                                                                         // 9295
			this.nextPage( event );                                                                                             // 9296
			break;                                                                                                              // 9297
		case $.ui.keyCode.HOME:                                                                                              // 9298
			this._move( "first", "first", event );                                                                              // 9299
			break;                                                                                                              // 9300
		case $.ui.keyCode.END:                                                                                               // 9301
			this._move( "last", "last", event );                                                                                // 9302
			break;                                                                                                              // 9303
		case $.ui.keyCode.UP:                                                                                                // 9304
			this.previous( event );                                                                                             // 9305
			break;                                                                                                              // 9306
		case $.ui.keyCode.DOWN:                                                                                              // 9307
			this.next( event );                                                                                                 // 9308
			break;                                                                                                              // 9309
		case $.ui.keyCode.LEFT:                                                                                              // 9310
			this.collapse( event );                                                                                             // 9311
			break;                                                                                                              // 9312
		case $.ui.keyCode.RIGHT:                                                                                             // 9313
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {                                                     // 9314
				this.expand( event );                                                                                              // 9315
			}                                                                                                                   // 9316
			break;                                                                                                              // 9317
		case $.ui.keyCode.ENTER:                                                                                             // 9318
		case $.ui.keyCode.SPACE:                                                                                             // 9319
			this._activate( event );                                                                                            // 9320
			break;                                                                                                              // 9321
		case $.ui.keyCode.ESCAPE:                                                                                            // 9322
			this.collapse( event );                                                                                             // 9323
			break;                                                                                                              // 9324
		default:                                                                                                             // 9325
			preventDefault = false;                                                                                             // 9326
			prev = this.previousFilter || "";                                                                                   // 9327
			character = String.fromCharCode( event.keyCode );                                                                   // 9328
			skip = false;                                                                                                       // 9329
                                                                                                                       // 9330
			clearTimeout( this.filterTimer );                                                                                   // 9331
                                                                                                                       // 9332
			if ( character === prev ) {                                                                                         // 9333
				skip = true;                                                                                                       // 9334
			} else {                                                                                                            // 9335
				character = prev + character;                                                                                      // 9336
			}                                                                                                                   // 9337
                                                                                                                       // 9338
			regex = new RegExp( "^" + escape( character ), "i" );                                                               // 9339
			match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {                                             // 9340
				return regex.test( $( this ).children( "a" ).text() );                                                             // 9341
			});                                                                                                                 // 9342
			match = skip && match.index( this.active.next() ) !== -1 ?                                                          // 9343
				this.active.nextAll( ".ui-menu-item" ) :                                                                           // 9344
				match;                                                                                                             // 9345
                                                                                                                       // 9346
			// If no matches on the current filter, reset to the last character pressed                                         // 9347
			// to move down the menu to the first item that starts with that character                                          // 9348
			if ( !match.length ) {                                                                                              // 9349
				character = String.fromCharCode( event.keyCode );                                                                  // 9350
				regex = new RegExp( "^" + escape( character ), "i" );                                                              // 9351
				match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {                                            // 9352
					return regex.test( $( this ).children( "a" ).text() );                                                            // 9353
				});                                                                                                                // 9354
			}                                                                                                                   // 9355
                                                                                                                       // 9356
			if ( match.length ) {                                                                                               // 9357
				this.focus( event, match );                                                                                        // 9358
				if ( match.length > 1 ) {                                                                                          // 9359
					this.previousFilter = character;                                                                                  // 9360
					this.filterTimer = this._delay(function() {                                                                       // 9361
						delete this.previousFilter;                                                                                      // 9362
					}, 1000 );                                                                                                        // 9363
				} else {                                                                                                           // 9364
					delete this.previousFilter;                                                                                       // 9365
				}                                                                                                                  // 9366
			} else {                                                                                                            // 9367
				delete this.previousFilter;                                                                                        // 9368
			}                                                                                                                   // 9369
		}                                                                                                                    // 9370
                                                                                                                       // 9371
		if ( preventDefault ) {                                                                                              // 9372
			event.preventDefault();                                                                                             // 9373
		}                                                                                                                    // 9374
	},                                                                                                                    // 9375
                                                                                                                       // 9376
	_activate: function( event ) {                                                                                        // 9377
		if ( !this.active.is( ".ui-state-disabled" ) ) {                                                                     // 9378
			if ( this.active.children( "a[aria-haspopup='true']" ).length ) {                                                   // 9379
				this.expand( event );                                                                                              // 9380
			} else {                                                                                                            // 9381
				this.select( event );                                                                                              // 9382
			}                                                                                                                   // 9383
		}                                                                                                                    // 9384
	},                                                                                                                    // 9385
                                                                                                                       // 9386
	refresh: function() {                                                                                                 // 9387
		var menus,                                                                                                           // 9388
			icon = this.options.icons.submenu,                                                                                  // 9389
			submenus = this.element.find( this.options.menus );                                                                 // 9390
                                                                                                                       // 9391
		// Initialize nested menus                                                                                           // 9392
		submenus.filter( ":not(.ui-menu)" )                                                                                  // 9393
			.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )                                                    // 9394
			.hide()                                                                                                             // 9395
			.attr({                                                                                                             // 9396
				role: this.options.role,                                                                                           // 9397
				"aria-hidden": "true",                                                                                             // 9398
				"aria-expanded": "false"                                                                                           // 9399
			})                                                                                                                  // 9400
			.each(function() {                                                                                                  // 9401
				var menu = $( this ),                                                                                              // 9402
					item = menu.prev( "a" ),                                                                                          // 9403
					submenuCarat = $( "<span>" )                                                                                      // 9404
						.addClass( "ui-menu-icon ui-icon " + icon )                                                                      // 9405
						.data( "ui-menu-submenu-carat", true );                                                                          // 9406
                                                                                                                       // 9407
				item                                                                                                               // 9408
					.attr( "aria-haspopup", "true" )                                                                                  // 9409
					.prepend( submenuCarat );                                                                                         // 9410
				menu.attr( "aria-labelledby", item.attr( "id" ) );                                                                 // 9411
			});                                                                                                                 // 9412
                                                                                                                       // 9413
		menus = submenus.add( this.element );                                                                                // 9414
                                                                                                                       // 9415
		// Don't refresh list items that are already adapted                                                                 // 9416
		menus.children( ":not(.ui-menu-item):has(a)" )                                                                       // 9417
			.addClass( "ui-menu-item" )                                                                                         // 9418
			.attr( "role", "presentation" )                                                                                     // 9419
			.children( "a" )                                                                                                    // 9420
				.uniqueId()                                                                                                        // 9421
				.addClass( "ui-corner-all" )                                                                                       // 9422
				.attr({                                                                                                            // 9423
					tabIndex: -1,                                                                                                     // 9424
					role: this._itemRole()                                                                                            // 9425
				});                                                                                                                // 9426
                                                                                                                       // 9427
		// Initialize unlinked menu-items containing spaces and/or dashes only as dividers                                   // 9428
		menus.children( ":not(.ui-menu-item)" ).each(function() {                                                            // 9429
			var item = $( this );                                                                                               // 9430
			// hyphen, em dash, en dash                                                                                         // 9431
			if ( !/[^\-—–\s]/.test( item.text() ) ) {                                                                           // 9432
				item.addClass( "ui-widget-content ui-menu-divider" );                                                              // 9433
			}                                                                                                                   // 9434
		});                                                                                                                  // 9435
                                                                                                                       // 9436
		// Add aria-disabled attribute to any disabled menu item                                                             // 9437
		menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );                                              // 9438
                                                                                                                       // 9439
		// If the active item has been removed, blur the menu                                                                // 9440
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {                                           // 9441
			this.blur();                                                                                                        // 9442
		}                                                                                                                    // 9443
	},                                                                                                                    // 9444
                                                                                                                       // 9445
	_itemRole: function() {                                                                                               // 9446
		return {                                                                                                             // 9447
			menu: "menuitem",                                                                                                   // 9448
			listbox: "option"                                                                                                   // 9449
		}[ this.options.role ];                                                                                              // 9450
	},                                                                                                                    // 9451
                                                                                                                       // 9452
	focus: function( event, item ) {                                                                                      // 9453
		var nested, focused;                                                                                                 // 9454
		this.blur( event, event && event.type === "focus" );                                                                 // 9455
                                                                                                                       // 9456
		this._scrollIntoView( item );                                                                                        // 9457
                                                                                                                       // 9458
		this.active = item.first();                                                                                          // 9459
		focused = this.active.children( "a" ).addClass( "ui-state-focus" );                                                  // 9460
		// Only update aria-activedescendant if there's a role                                                               // 9461
		// otherwise we assume focus is managed elsewhere                                                                    // 9462
		if ( this.options.role ) {                                                                                           // 9463
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );                                                 // 9464
		}                                                                                                                    // 9465
                                                                                                                       // 9466
		// Highlight active parent menu item, if any                                                                         // 9467
		this.active                                                                                                          // 9468
			.parent()                                                                                                           // 9469
			.closest( ".ui-menu-item" )                                                                                         // 9470
			.children( "a:first" )                                                                                              // 9471
			.addClass( "ui-state-active" );                                                                                     // 9472
                                                                                                                       // 9473
		if ( event && event.type === "keydown" ) {                                                                           // 9474
			this._close();                                                                                                      // 9475
		} else {                                                                                                             // 9476
			this.timer = this._delay(function() {                                                                               // 9477
				this._close();                                                                                                     // 9478
			}, this.delay );                                                                                                    // 9479
		}                                                                                                                    // 9480
                                                                                                                       // 9481
		nested = item.children( ".ui-menu" );                                                                                // 9482
		if ( nested.length && ( /^mouse/.test( event.type ) ) ) {                                                            // 9483
			this._startOpening(nested);                                                                                         // 9484
		}                                                                                                                    // 9485
		this.activeMenu = item.parent();                                                                                     // 9486
                                                                                                                       // 9487
		this._trigger( "focus", event, { item: item } );                                                                     // 9488
	},                                                                                                                    // 9489
                                                                                                                       // 9490
	_scrollIntoView: function( item ) {                                                                                   // 9491
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;                                                // 9492
		if ( this._hasScroll() ) {                                                                                           // 9493
			borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;                                       // 9494
			paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;                                          // 9495
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;                                 // 9496
			scroll = this.activeMenu.scrollTop();                                                                               // 9497
			elementHeight = this.activeMenu.height();                                                                           // 9498
			itemHeight = item.height();                                                                                         // 9499
                                                                                                                       // 9500
			if ( offset < 0 ) {                                                                                                 // 9501
				this.activeMenu.scrollTop( scroll + offset );                                                                      // 9502
			} else if ( offset + itemHeight > elementHeight ) {                                                                 // 9503
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );                                         // 9504
			}                                                                                                                   // 9505
		}                                                                                                                    // 9506
	},                                                                                                                    // 9507
                                                                                                                       // 9508
	blur: function( event, fromFocus ) {                                                                                  // 9509
		if ( !fromFocus ) {                                                                                                  // 9510
			clearTimeout( this.timer );                                                                                         // 9511
		}                                                                                                                    // 9512
                                                                                                                       // 9513
		if ( !this.active ) {                                                                                                // 9514
			return;                                                                                                             // 9515
		}                                                                                                                    // 9516
                                                                                                                       // 9517
		this.active.children( "a" ).removeClass( "ui-state-focus" );                                                         // 9518
		this.active = null;                                                                                                  // 9519
                                                                                                                       // 9520
		this._trigger( "blur", event, { item: this.active } );                                                               // 9521
	},                                                                                                                    // 9522
                                                                                                                       // 9523
	_startOpening: function( submenu ) {                                                                                  // 9524
		clearTimeout( this.timer );                                                                                          // 9525
                                                                                                                       // 9526
		// Don't open if already open fixes a Firefox bug that caused a .5 pixel                                             // 9527
		// shift in the submenu position when mousing over the carat icon                                                    // 9528
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {                                                                    // 9529
			return;                                                                                                             // 9530
		}                                                                                                                    // 9531
                                                                                                                       // 9532
		this.timer = this._delay(function() {                                                                                // 9533
			this._close();                                                                                                      // 9534
			this._open( submenu );                                                                                              // 9535
		}, this.delay );                                                                                                     // 9536
	},                                                                                                                    // 9537
                                                                                                                       // 9538
	_open: function( submenu ) {                                                                                          // 9539
		var position = $.extend({                                                                                            // 9540
			of: this.active                                                                                                     // 9541
		}, this.options.position );                                                                                          // 9542
                                                                                                                       // 9543
		clearTimeout( this.timer );                                                                                          // 9544
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )                                                 // 9545
			.hide()                                                                                                             // 9546
			.attr( "aria-hidden", "true" );                                                                                     // 9547
                                                                                                                       // 9548
		submenu                                                                                                              // 9549
			.show()                                                                                                             // 9550
			.removeAttr( "aria-hidden" )                                                                                        // 9551
			.attr( "aria-expanded", "true" )                                                                                    // 9552
			.position( position );                                                                                              // 9553
	},                                                                                                                    // 9554
                                                                                                                       // 9555
	collapseAll: function( event, all ) {                                                                                 // 9556
		clearTimeout( this.timer );                                                                                          // 9557
		this.timer = this._delay(function() {                                                                                // 9558
			// If we were passed an event, look for the submenu that contains the event                                         // 9559
			var currentMenu = all ? this.element :                                                                              // 9560
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );                                             // 9561
                                                                                                                       // 9562
			// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway                           // 9563
			if ( !currentMenu.length ) {                                                                                        // 9564
				currentMenu = this.element;                                                                                        // 9565
			}                                                                                                                   // 9566
                                                                                                                       // 9567
			this._close( currentMenu );                                                                                         // 9568
                                                                                                                       // 9569
			this.blur( event );                                                                                                 // 9570
			this.activeMenu = currentMenu;                                                                                      // 9571
		}, this.delay );                                                                                                     // 9572
	},                                                                                                                    // 9573
                                                                                                                       // 9574
	// With no arguments, closes the currently active menu - if nothing is active                                         // 9575
	// it closes all menus.  If passed an argument, it will search for menus BELOW                                        // 9576
	_close: function( startMenu ) {                                                                                       // 9577
		if ( !startMenu ) {                                                                                                  // 9578
			startMenu = this.active ? this.active.parent() : this.element;                                                      // 9579
		}                                                                                                                    // 9580
                                                                                                                       // 9581
		startMenu                                                                                                            // 9582
			.find( ".ui-menu" )                                                                                                 // 9583
				.hide()                                                                                                            // 9584
				.attr( "aria-hidden", "true" )                                                                                     // 9585
				.attr( "aria-expanded", "false" )                                                                                  // 9586
			.end()                                                                                                              // 9587
			.find( "a.ui-state-active" )                                                                                        // 9588
				.removeClass( "ui-state-active" );                                                                                 // 9589
	},                                                                                                                    // 9590
                                                                                                                       // 9591
	collapse: function( event ) {                                                                                         // 9592
		var newItem = this.active &&                                                                                         // 9593
			this.active.parent().closest( ".ui-menu-item", this.element );                                                      // 9594
		if ( newItem && newItem.length ) {                                                                                   // 9595
			this._close();                                                                                                      // 9596
			this.focus( event, newItem );                                                                                       // 9597
		}                                                                                                                    // 9598
	},                                                                                                                    // 9599
                                                                                                                       // 9600
	expand: function( event ) {                                                                                           // 9601
		var newItem = this.active &&                                                                                         // 9602
			this.active                                                                                                         // 9603
				.children( ".ui-menu " )                                                                                           // 9604
				.children( ".ui-menu-item" )                                                                                       // 9605
				.first();                                                                                                          // 9606
                                                                                                                       // 9607
		if ( newItem && newItem.length ) {                                                                                   // 9608
			this._open( newItem.parent() );                                                                                     // 9609
                                                                                                                       // 9610
			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT                              // 9611
			this._delay(function() {                                                                                            // 9612
				this.focus( event, newItem );                                                                                      // 9613
			});                                                                                                                 // 9614
		}                                                                                                                    // 9615
	},                                                                                                                    // 9616
                                                                                                                       // 9617
	next: function( event ) {                                                                                             // 9618
		this._move( "next", "first", event );                                                                                // 9619
	},                                                                                                                    // 9620
                                                                                                                       // 9621
	previous: function( event ) {                                                                                         // 9622
		this._move( "prev", "last", event );                                                                                 // 9623
	},                                                                                                                    // 9624
                                                                                                                       // 9625
	isFirstItem: function() {                                                                                             // 9626
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;                                                // 9627
	},                                                                                                                    // 9628
                                                                                                                       // 9629
	isLastItem: function() {                                                                                              // 9630
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;                                                // 9631
	},                                                                                                                    // 9632
                                                                                                                       // 9633
	_move: function( direction, filter, event ) {                                                                         // 9634
		var next;                                                                                                            // 9635
		if ( this.active ) {                                                                                                 // 9636
			if ( direction === "first" || direction === "last" ) {                                                              // 9637
				next = this.active                                                                                                 // 9638
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )                                              // 9639
					.eq( -1 );                                                                                                        // 9640
			} else {                                                                                                            // 9641
				next = this.active                                                                                                 // 9642
					[ direction + "All" ]( ".ui-menu-item" )                                                                          // 9643
					.eq( 0 );                                                                                                         // 9644
			}                                                                                                                   // 9645
		}                                                                                                                    // 9646
		if ( !next || !next.length || !this.active ) {                                                                       // 9647
			next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();                                                     // 9648
		}                                                                                                                    // 9649
                                                                                                                       // 9650
		this.focus( event, next );                                                                                           // 9651
	},                                                                                                                    // 9652
                                                                                                                       // 9653
	nextPage: function( event ) {                                                                                         // 9654
		var item, base, height;                                                                                              // 9655
                                                                                                                       // 9656
		if ( !this.active ) {                                                                                                // 9657
			this.next( event );                                                                                                 // 9658
			return;                                                                                                             // 9659
		}                                                                                                                    // 9660
		if ( this.isLastItem() ) {                                                                                           // 9661
			return;                                                                                                             // 9662
		}                                                                                                                    // 9663
		if ( this._hasScroll() ) {                                                                                           // 9664
			base = this.active.offset().top;                                                                                    // 9665
			height = this.element.height();                                                                                     // 9666
			this.active.nextAll( ".ui-menu-item" ).each(function() {                                                            // 9667
				item = $( this );                                                                                                  // 9668
				return item.offset().top - base - height < 0;                                                                      // 9669
			});                                                                                                                 // 9670
                                                                                                                       // 9671
			this.focus( event, item );                                                                                          // 9672
		} else {                                                                                                             // 9673
			this.focus( event, this.activeMenu.children( ".ui-menu-item" )                                                      // 9674
				[ !this.active ? "first" : "last" ]() );                                                                           // 9675
		}                                                                                                                    // 9676
	},                                                                                                                    // 9677
                                                                                                                       // 9678
	previousPage: function( event ) {                                                                                     // 9679
		var item, base, height;                                                                                              // 9680
		if ( !this.active ) {                                                                                                // 9681
			this.next( event );                                                                                                 // 9682
			return;                                                                                                             // 9683
		}                                                                                                                    // 9684
		if ( this.isFirstItem() ) {                                                                                          // 9685
			return;                                                                                                             // 9686
		}                                                                                                                    // 9687
		if ( this._hasScroll() ) {                                                                                           // 9688
			base = this.active.offset().top;                                                                                    // 9689
			height = this.element.height();                                                                                     // 9690
			this.active.prevAll( ".ui-menu-item" ).each(function() {                                                            // 9691
				item = $( this );                                                                                                  // 9692
				return item.offset().top - base + height > 0;                                                                      // 9693
			});                                                                                                                 // 9694
                                                                                                                       // 9695
			this.focus( event, item );                                                                                          // 9696
		} else {                                                                                                             // 9697
			this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );                                           // 9698
		}                                                                                                                    // 9699
	},                                                                                                                    // 9700
                                                                                                                       // 9701
	_hasScroll: function() {                                                                                              // 9702
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );                                             // 9703
	},                                                                                                                    // 9704
                                                                                                                       // 9705
	select: function( event ) {                                                                                           // 9706
		// TODO: It should never be possible to not have an active item at this                                              // 9707
		// point, but the tests don't trigger mouseenter before click.                                                       // 9708
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );                                           // 9709
		var ui = { item: this.active };                                                                                      // 9710
		if ( !this.active.has( ".ui-menu" ).length ) {                                                                       // 9711
			this.collapseAll( event, true );                                                                                    // 9712
		}                                                                                                                    // 9713
		this._trigger( "select", event, ui );                                                                                // 9714
	}                                                                                                                     // 9715
});                                                                                                                    // 9716
                                                                                                                       // 9717
}( jQuery ));                                                                                                          // 9718
(function( $, undefined ) {                                                                                            // 9719
                                                                                                                       // 9720
$.widget( "ui.progressbar", {                                                                                          // 9721
	version: "1.9.2",                                                                                                     // 9722
	options: {                                                                                                            // 9723
		value: 0,                                                                                                            // 9724
		max: 100                                                                                                             // 9725
	},                                                                                                                    // 9726
                                                                                                                       // 9727
	min: 0,                                                                                                               // 9728
                                                                                                                       // 9729
	_create: function() {                                                                                                 // 9730
		this.element                                                                                                         // 9731
			.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )                                             // 9732
			.attr({                                                                                                             // 9733
				role: "progressbar",                                                                                               // 9734
				"aria-valuemin": this.min,                                                                                         // 9735
				"aria-valuemax": this.options.max,                                                                                 // 9736
				"aria-valuenow": this._value()                                                                                     // 9737
			});                                                                                                                 // 9738
                                                                                                                       // 9739
		this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )                      // 9740
			.appendTo( this.element );                                                                                          // 9741
                                                                                                                       // 9742
		this.oldValue = this._value();                                                                                       // 9743
		this._refreshValue();                                                                                                // 9744
	},                                                                                                                    // 9745
                                                                                                                       // 9746
	_destroy: function() {                                                                                                // 9747
		this.element                                                                                                         // 9748
			.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )                                          // 9749
			.removeAttr( "role" )                                                                                               // 9750
			.removeAttr( "aria-valuemin" )                                                                                      // 9751
			.removeAttr( "aria-valuemax" )                                                                                      // 9752
			.removeAttr( "aria-valuenow" );                                                                                     // 9753
                                                                                                                       // 9754
		this.valueDiv.remove();                                                                                              // 9755
	},                                                                                                                    // 9756
                                                                                                                       // 9757
	value: function( newValue ) {                                                                                         // 9758
		if ( newValue === undefined ) {                                                                                      // 9759
			return this._value();                                                                                               // 9760
		}                                                                                                                    // 9761
                                                                                                                       // 9762
		this._setOption( "value", newValue );                                                                                // 9763
		return this;                                                                                                         // 9764
	},                                                                                                                    // 9765
                                                                                                                       // 9766
	_setOption: function( key, value ) {                                                                                  // 9767
		if ( key === "value" ) {                                                                                             // 9768
			this.options.value = value;                                                                                         // 9769
			this._refreshValue();                                                                                               // 9770
			if ( this._value() === this.options.max ) {                                                                         // 9771
				this._trigger( "complete" );                                                                                       // 9772
			}                                                                                                                   // 9773
		}                                                                                                                    // 9774
                                                                                                                       // 9775
		this._super( key, value );                                                                                           // 9776
	},                                                                                                                    // 9777
                                                                                                                       // 9778
	_value: function() {                                                                                                  // 9779
		var val = this.options.value;                                                                                        // 9780
		// normalize invalid value                                                                                           // 9781
		if ( typeof val !== "number" ) {                                                                                     // 9782
			val = 0;                                                                                                            // 9783
		}                                                                                                                    // 9784
		return Math.min( this.options.max, Math.max( this.min, val ) );                                                      // 9785
	},                                                                                                                    // 9786
                                                                                                                       // 9787
	_percentage: function() {                                                                                             // 9788
		return 100 * this._value() / this.options.max;                                                                       // 9789
	},                                                                                                                    // 9790
                                                                                                                       // 9791
	_refreshValue: function() {                                                                                           // 9792
		var value = this.value(),                                                                                            // 9793
			percentage = this._percentage();                                                                                    // 9794
                                                                                                                       // 9795
		if ( this.oldValue !== value ) {                                                                                     // 9796
			this.oldValue = value;                                                                                              // 9797
			this._trigger( "change" );                                                                                          // 9798
		}                                                                                                                    // 9799
                                                                                                                       // 9800
		this.valueDiv                                                                                                        // 9801
			.toggle( value > this.min )                                                                                         // 9802
			.toggleClass( "ui-corner-right", value === this.options.max )                                                       // 9803
			.width( percentage.toFixed(0) + "%" );                                                                              // 9804
		this.element.attr( "aria-valuenow", value );                                                                         // 9805
	}                                                                                                                     // 9806
});                                                                                                                    // 9807
                                                                                                                       // 9808
})( jQuery );                                                                                                          // 9809
(function( $, undefined ) {                                                                                            // 9810
                                                                                                                       // 9811
// number of pages in a slider                                                                                         // 9812
// (how many times can you page up/down to go through the whole range)                                                 // 9813
var numPages = 5;                                                                                                      // 9814
                                                                                                                       // 9815
$.widget( "ui.slider", $.ui.mouse, {                                                                                   // 9816
	version: "1.9.2",                                                                                                     // 9817
	widgetEventPrefix: "slide",                                                                                           // 9818
                                                                                                                       // 9819
	options: {                                                                                                            // 9820
		animate: false,                                                                                                      // 9821
		distance: 0,                                                                                                         // 9822
		max: 100,                                                                                                            // 9823
		min: 0,                                                                                                              // 9824
		orientation: "horizontal",                                                                                           // 9825
		range: false,                                                                                                        // 9826
		step: 1,                                                                                                             // 9827
		value: 0,                                                                                                            // 9828
		values: null                                                                                                         // 9829
	},                                                                                                                    // 9830
                                                                                                                       // 9831
	_create: function() {                                                                                                 // 9832
		var i, handleCount,                                                                                                  // 9833
			o = this.options,                                                                                                   // 9834
			existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),            // 9835
			handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",                                // 9836
			handles = [];                                                                                                       // 9837
                                                                                                                       // 9838
		this._keySliding = false;                                                                                            // 9839
		this._mouseSliding = false;                                                                                          // 9840
		this._animateOff = true;                                                                                             // 9841
		this._handleIndex = null;                                                                                            // 9842
		this._detectOrientation();                                                                                           // 9843
		this._mouseInit();                                                                                                   // 9844
                                                                                                                       // 9845
		this.element                                                                                                         // 9846
			.addClass( "ui-slider" +                                                                                            // 9847
				" ui-slider-" + this.orientation +                                                                                 // 9848
				" ui-widget" +                                                                                                     // 9849
				" ui-widget-content" +                                                                                             // 9850
				" ui-corner-all" +                                                                                                 // 9851
				( o.disabled ? " ui-slider-disabled ui-disabled" : "" ) );                                                         // 9852
                                                                                                                       // 9853
		this.range = $([]);                                                                                                  // 9854
                                                                                                                       // 9855
		if ( o.range ) {                                                                                                     // 9856
			if ( o.range === true ) {                                                                                           // 9857
				if ( !o.values ) {                                                                                                 // 9858
					o.values = [ this._valueMin(), this._valueMin() ];                                                                // 9859
				}                                                                                                                  // 9860
				if ( o.values.length && o.values.length !== 2 ) {                                                                  // 9861
					o.values = [ o.values[0], o.values[0] ];                                                                          // 9862
				}                                                                                                                  // 9863
			}                                                                                                                   // 9864
                                                                                                                       // 9865
			this.range = $( "<div></div>" )                                                                                     // 9866
				.appendTo( this.element )                                                                                          // 9867
				.addClass( "ui-slider-range" +                                                                                     // 9868
				// note: this isn't the most fittingly semantic framework class for this element,                                  // 9869
				// but worked best visually with a variety of themes                                                               // 9870
				" ui-widget-header" +                                                                                              // 9871
				( ( o.range === "min" || o.range === "max" ) ? " ui-slider-range-" + o.range : "" ) );                             // 9872
		}                                                                                                                    // 9873
                                                                                                                       // 9874
		handleCount = ( o.values && o.values.length ) || 1;                                                                  // 9875
                                                                                                                       // 9876
		for ( i = existingHandles.length; i < handleCount; i++ ) {                                                           // 9877
			handles.push( handle );                                                                                             // 9878
		}                                                                                                                    // 9879
                                                                                                                       // 9880
		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );                              // 9881
                                                                                                                       // 9882
		this.handle = this.handles.eq( 0 );                                                                                  // 9883
                                                                                                                       // 9884
		this.handles.add( this.range ).filter( "a" )                                                                         // 9885
			.click(function( event ) {                                                                                          // 9886
				event.preventDefault();                                                                                            // 9887
			})                                                                                                                  // 9888
			.mouseenter(function() {                                                                                            // 9889
				if ( !o.disabled ) {                                                                                               // 9890
					$( this ).addClass( "ui-state-hover" );                                                                           // 9891
				}                                                                                                                  // 9892
			})                                                                                                                  // 9893
			.mouseleave(function() {                                                                                            // 9894
				$( this ).removeClass( "ui-state-hover" );                                                                         // 9895
			})                                                                                                                  // 9896
			.focus(function() {                                                                                                 // 9897
				if ( !o.disabled ) {                                                                                               // 9898
					$( ".ui-slider .ui-state-focus" ).removeClass( "ui-state-focus" );                                                // 9899
					$( this ).addClass( "ui-state-focus" );                                                                           // 9900
				} else {                                                                                                           // 9901
					$( this ).blur();                                                                                                 // 9902
				}                                                                                                                  // 9903
			})                                                                                                                  // 9904
			.blur(function() {                                                                                                  // 9905
				$( this ).removeClass( "ui-state-focus" );                                                                         // 9906
			});                                                                                                                 // 9907
                                                                                                                       // 9908
		this.handles.each(function( i ) {                                                                                    // 9909
			$( this ).data( "ui-slider-handle-index", i );                                                                      // 9910
		});                                                                                                                  // 9911
                                                                                                                       // 9912
		this._on( this.handles, {                                                                                            // 9913
			keydown: function( event ) {                                                                                        // 9914
				var allowed, curVal, newVal, step,                                                                                 // 9915
					index = $( event.target ).data( "ui-slider-handle-index" );                                                       // 9916
                                                                                                                       // 9917
				switch ( event.keyCode ) {                                                                                         // 9918
					case $.ui.keyCode.HOME:                                                                                           // 9919
					case $.ui.keyCode.END:                                                                                            // 9920
					case $.ui.keyCode.PAGE_UP:                                                                                        // 9921
					case $.ui.keyCode.PAGE_DOWN:                                                                                      // 9922
					case $.ui.keyCode.UP:                                                                                             // 9923
					case $.ui.keyCode.RIGHT:                                                                                          // 9924
					case $.ui.keyCode.DOWN:                                                                                           // 9925
					case $.ui.keyCode.LEFT:                                                                                           // 9926
						event.preventDefault();                                                                                          // 9927
						if ( !this._keySliding ) {                                                                                       // 9928
							this._keySliding = true;                                                                                        // 9929
							$( event.target ).addClass( "ui-state-active" );                                                                // 9930
							allowed = this._start( event, index );                                                                          // 9931
							if ( allowed === false ) {                                                                                      // 9932
								return;                                                                                                        // 9933
							}                                                                                                               // 9934
						}                                                                                                                // 9935
						break;                                                                                                           // 9936
				}                                                                                                                  // 9937
                                                                                                                       // 9938
				step = this.options.step;                                                                                          // 9939
				if ( this.options.values && this.options.values.length ) {                                                         // 9940
					curVal = newVal = this.values( index );                                                                           // 9941
				} else {                                                                                                           // 9942
					curVal = newVal = this.value();                                                                                   // 9943
				}                                                                                                                  // 9944
                                                                                                                       // 9945
				switch ( event.keyCode ) {                                                                                         // 9946
					case $.ui.keyCode.HOME:                                                                                           // 9947
						newVal = this._valueMin();                                                                                       // 9948
						break;                                                                                                           // 9949
					case $.ui.keyCode.END:                                                                                            // 9950
						newVal = this._valueMax();                                                                                       // 9951
						break;                                                                                                           // 9952
					case $.ui.keyCode.PAGE_UP:                                                                                        // 9953
						newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );                  // 9954
						break;                                                                                                           // 9955
					case $.ui.keyCode.PAGE_DOWN:                                                                                      // 9956
						newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );                  // 9957
						break;                                                                                                           // 9958
					case $.ui.keyCode.UP:                                                                                             // 9959
					case $.ui.keyCode.RIGHT:                                                                                          // 9960
						if ( curVal === this._valueMax() ) {                                                                             // 9961
							return;                                                                                                         // 9962
						}                                                                                                                // 9963
						newVal = this._trimAlignValue( curVal + step );                                                                  // 9964
						break;                                                                                                           // 9965
					case $.ui.keyCode.DOWN:                                                                                           // 9966
					case $.ui.keyCode.LEFT:                                                                                           // 9967
						if ( curVal === this._valueMin() ) {                                                                             // 9968
							return;                                                                                                         // 9969
						}                                                                                                                // 9970
						newVal = this._trimAlignValue( curVal - step );                                                                  // 9971
						break;                                                                                                           // 9972
				}                                                                                                                  // 9973
                                                                                                                       // 9974
				this._slide( event, index, newVal );                                                                               // 9975
			},                                                                                                                  // 9976
			keyup: function( event ) {                                                                                          // 9977
				var index = $( event.target ).data( "ui-slider-handle-index" );                                                    // 9978
                                                                                                                       // 9979
				if ( this._keySliding ) {                                                                                          // 9980
					this._keySliding = false;                                                                                         // 9981
					this._stop( event, index );                                                                                       // 9982
					this._change( event, index );                                                                                     // 9983
					$( event.target ).removeClass( "ui-state-active" );                                                               // 9984
				}                                                                                                                  // 9985
			}                                                                                                                   // 9986
		});                                                                                                                  // 9987
                                                                                                                       // 9988
		this._refreshValue();                                                                                                // 9989
                                                                                                                       // 9990
		this._animateOff = false;                                                                                            // 9991
	},                                                                                                                    // 9992
                                                                                                                       // 9993
	_destroy: function() {                                                                                                // 9994
		this.handles.remove();                                                                                               // 9995
		this.range.remove();                                                                                                 // 9996
                                                                                                                       // 9997
		this.element                                                                                                         // 9998
			.removeClass( "ui-slider" +                                                                                         // 9999
				" ui-slider-horizontal" +                                                                                          // 10000
				" ui-slider-vertical" +                                                                                            // 10001
				" ui-slider-disabled" +                                                                                            // 10002
				" ui-widget" +                                                                                                     // 10003
				" ui-widget-content" +                                                                                             // 10004
				" ui-corner-all" );                                                                                                // 10005
                                                                                                                       // 10006
		this._mouseDestroy();                                                                                                // 10007
	},                                                                                                                    // 10008
                                                                                                                       // 10009
	_mouseCapture: function( event ) {                                                                                    // 10010
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,                           // 10011
			that = this,                                                                                                        // 10012
			o = this.options;                                                                                                   // 10013
                                                                                                                       // 10014
		if ( o.disabled ) {                                                                                                  // 10015
			return false;                                                                                                       // 10016
		}                                                                                                                    // 10017
                                                                                                                       // 10018
		this.elementSize = {                                                                                                 // 10019
			width: this.element.outerWidth(),                                                                                   // 10020
			height: this.element.outerHeight()                                                                                  // 10021
		};                                                                                                                   // 10022
		this.elementOffset = this.element.offset();                                                                          // 10023
                                                                                                                       // 10024
		position = { x: event.pageX, y: event.pageY };                                                                       // 10025
		normValue = this._normValueFromMouse( position );                                                                    // 10026
		distance = this._valueMax() - this._valueMin() + 1;                                                                  // 10027
		this.handles.each(function( i ) {                                                                                    // 10028
			var thisDistance = Math.abs( normValue - that.values(i) );                                                          // 10029
			if ( distance > thisDistance ) {                                                                                    // 10030
				distance = thisDistance;                                                                                           // 10031
				closestHandle = $( this );                                                                                         // 10032
				index = i;                                                                                                         // 10033
			}                                                                                                                   // 10034
		});                                                                                                                  // 10035
                                                                                                                       // 10036
		// workaround for bug #3736 (if both handles of a range are at 0,                                                    // 10037
		// the first is always used as the one with least distance,                                                          // 10038
		// and moving it is obviously prevented by preventing negative ranges)                                               // 10039
		if( o.range === true && this.values(1) === o.min ) {                                                                 // 10040
			index += 1;                                                                                                         // 10041
			closestHandle = $( this.handles[index] );                                                                           // 10042
		}                                                                                                                    // 10043
                                                                                                                       // 10044
		allowed = this._start( event, index );                                                                               // 10045
		if ( allowed === false ) {                                                                                           // 10046
			return false;                                                                                                       // 10047
		}                                                                                                                    // 10048
		this._mouseSliding = true;                                                                                           // 10049
                                                                                                                       // 10050
		this._handleIndex = index;                                                                                           // 10051
                                                                                                                       // 10052
		closestHandle                                                                                                        // 10053
			.addClass( "ui-state-active" )                                                                                      // 10054
			.focus();                                                                                                           // 10055
                                                                                                                       // 10056
		offset = closestHandle.offset();                                                                                     // 10057
		mouseOverHandle = !$( event.target ).parents().andSelf().is( ".ui-slider-handle" );                                  // 10058
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {                                                        // 10059
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),                                                    // 10060
			top: event.pageY - offset.top -                                                                                     // 10061
				( closestHandle.height() / 2 ) -                                                                                   // 10062
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -                                                     // 10063
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +                                                   // 10064
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)                                                             // 10065
		};                                                                                                                   // 10066
                                                                                                                       // 10067
		if ( !this.handles.hasClass( "ui-state-hover" ) ) {                                                                  // 10068
			this._slide( event, index, normValue );                                                                             // 10069
		}                                                                                                                    // 10070
		this._animateOff = true;                                                                                             // 10071
		return true;                                                                                                         // 10072
	},                                                                                                                    // 10073
                                                                                                                       // 10074
	_mouseStart: function() {                                                                                             // 10075
		return true;                                                                                                         // 10076
	},                                                                                                                    // 10077
                                                                                                                       // 10078
	_mouseDrag: function( event ) {                                                                                       // 10079
		var position = { x: event.pageX, y: event.pageY },                                                                   // 10080
			normValue = this._normValueFromMouse( position );                                                                   // 10081
                                                                                                                       // 10082
		this._slide( event, this._handleIndex, normValue );                                                                  // 10083
                                                                                                                       // 10084
		return false;                                                                                                        // 10085
	},                                                                                                                    // 10086
                                                                                                                       // 10087
	_mouseStop: function( event ) {                                                                                       // 10088
		this.handles.removeClass( "ui-state-active" );                                                                       // 10089
		this._mouseSliding = false;                                                                                          // 10090
                                                                                                                       // 10091
		this._stop( event, this._handleIndex );                                                                              // 10092
		this._change( event, this._handleIndex );                                                                            // 10093
                                                                                                                       // 10094
		this._handleIndex = null;                                                                                            // 10095
		this._clickOffset = null;                                                                                            // 10096
		this._animateOff = false;                                                                                            // 10097
                                                                                                                       // 10098
		return false;                                                                                                        // 10099
	},                                                                                                                    // 10100
                                                                                                                       // 10101
	_detectOrientation: function() {                                                                                      // 10102
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";                          // 10103
	},                                                                                                                    // 10104
                                                                                                                       // 10105
	_normValueFromMouse: function( position ) {                                                                           // 10106
		var pixelTotal,                                                                                                      // 10107
			pixelMouse,                                                                                                         // 10108
			percentMouse,                                                                                                       // 10109
			valueTotal,                                                                                                         // 10110
			valueMouse;                                                                                                         // 10111
                                                                                                                       // 10112
		if ( this.orientation === "horizontal" ) {                                                                           // 10113
			pixelTotal = this.elementSize.width;                                                                                // 10114
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );             // 10115
		} else {                                                                                                             // 10116
			pixelTotal = this.elementSize.height;                                                                               // 10117
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );               // 10118
		}                                                                                                                    // 10119
                                                                                                                       // 10120
		percentMouse = ( pixelMouse / pixelTotal );                                                                          // 10121
		if ( percentMouse > 1 ) {                                                                                            // 10122
			percentMouse = 1;                                                                                                   // 10123
		}                                                                                                                    // 10124
		if ( percentMouse < 0 ) {                                                                                            // 10125
			percentMouse = 0;                                                                                                   // 10126
		}                                                                                                                    // 10127
		if ( this.orientation === "vertical" ) {                                                                             // 10128
			percentMouse = 1 - percentMouse;                                                                                    // 10129
		}                                                                                                                    // 10130
                                                                                                                       // 10131
		valueTotal = this._valueMax() - this._valueMin();                                                                    // 10132
		valueMouse = this._valueMin() + percentMouse * valueTotal;                                                           // 10133
                                                                                                                       // 10134
		return this._trimAlignValue( valueMouse );                                                                           // 10135
	},                                                                                                                    // 10136
                                                                                                                       // 10137
	_start: function( event, index ) {                                                                                    // 10138
		var uiHash = {                                                                                                       // 10139
			handle: this.handles[ index ],                                                                                      // 10140
			value: this.value()                                                                                                 // 10141
		};                                                                                                                   // 10142
		if ( this.options.values && this.options.values.length ) {                                                           // 10143
			uiHash.value = this.values( index );                                                                                // 10144
			uiHash.values = this.values();                                                                                      // 10145
		}                                                                                                                    // 10146
		return this._trigger( "start", event, uiHash );                                                                      // 10147
	},                                                                                                                    // 10148
                                                                                                                       // 10149
	_slide: function( event, index, newVal ) {                                                                            // 10150
		var otherVal,                                                                                                        // 10151
			newValues,                                                                                                          // 10152
			allowed;                                                                                                            // 10153
                                                                                                                       // 10154
		if ( this.options.values && this.options.values.length ) {                                                           // 10155
			otherVal = this.values( index ? 0 : 1 );                                                                            // 10156
                                                                                                                       // 10157
			if ( ( this.options.values.length === 2 && this.options.range === true ) &&                                         // 10158
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )                                   // 10159
				) {                                                                                                                // 10160
				newVal = otherVal;                                                                                                 // 10161
			}                                                                                                                   // 10162
                                                                                                                       // 10163
			if ( newVal !== this.values( index ) ) {                                                                            // 10164
				newValues = this.values();                                                                                         // 10165
				newValues[ index ] = newVal;                                                                                       // 10166
				// A slide can be canceled by returning false from the slide callback                                              // 10167
				allowed = this._trigger( "slide", event, {                                                                         // 10168
					handle: this.handles[ index ],                                                                                    // 10169
					value: newVal,                                                                                                    // 10170
					values: newValues                                                                                                 // 10171
				} );                                                                                                               // 10172
				otherVal = this.values( index ? 0 : 1 );                                                                           // 10173
				if ( allowed !== false ) {                                                                                         // 10174
					this.values( index, newVal, true );                                                                               // 10175
				}                                                                                                                  // 10176
			}                                                                                                                   // 10177
		} else {                                                                                                             // 10178
			if ( newVal !== this.value() ) {                                                                                    // 10179
				// A slide can be canceled by returning false from the slide callback                                              // 10180
				allowed = this._trigger( "slide", event, {                                                                         // 10181
					handle: this.handles[ index ],                                                                                    // 10182
					value: newVal                                                                                                     // 10183
				} );                                                                                                               // 10184
				if ( allowed !== false ) {                                                                                         // 10185
					this.value( newVal );                                                                                             // 10186
				}                                                                                                                  // 10187
			}                                                                                                                   // 10188
		}                                                                                                                    // 10189
	},                                                                                                                    // 10190
                                                                                                                       // 10191
	_stop: function( event, index ) {                                                                                     // 10192
		var uiHash = {                                                                                                       // 10193
			handle: this.handles[ index ],                                                                                      // 10194
			value: this.value()                                                                                                 // 10195
		};                                                                                                                   // 10196
		if ( this.options.values && this.options.values.length ) {                                                           // 10197
			uiHash.value = this.values( index );                                                                                // 10198
			uiHash.values = this.values();                                                                                      // 10199
		}                                                                                                                    // 10200
                                                                                                                       // 10201
		this._trigger( "stop", event, uiHash );                                                                              // 10202
	},                                                                                                                    // 10203
                                                                                                                       // 10204
	_change: function( event, index ) {                                                                                   // 10205
		if ( !this._keySliding && !this._mouseSliding ) {                                                                    // 10206
			var uiHash = {                                                                                                      // 10207
				handle: this.handles[ index ],                                                                                     // 10208
				value: this.value()                                                                                                // 10209
			};                                                                                                                  // 10210
			if ( this.options.values && this.options.values.length ) {                                                          // 10211
				uiHash.value = this.values( index );                                                                               // 10212
				uiHash.values = this.values();                                                                                     // 10213
			}                                                                                                                   // 10214
                                                                                                                       // 10215
			this._trigger( "change", event, uiHash );                                                                           // 10216
		}                                                                                                                    // 10217
	},                                                                                                                    // 10218
                                                                                                                       // 10219
	value: function( newValue ) {                                                                                         // 10220
		if ( arguments.length ) {                                                                                            // 10221
			this.options.value = this._trimAlignValue( newValue );                                                              // 10222
			this._refreshValue();                                                                                               // 10223
			this._change( null, 0 );                                                                                            // 10224
			return;                                                                                                             // 10225
		}                                                                                                                    // 10226
                                                                                                                       // 10227
		return this._value();                                                                                                // 10228
	},                                                                                                                    // 10229
                                                                                                                       // 10230
	values: function( index, newValue ) {                                                                                 // 10231
		var vals,                                                                                                            // 10232
			newValues,                                                                                                          // 10233
			i;                                                                                                                  // 10234
                                                                                                                       // 10235
		if ( arguments.length > 1 ) {                                                                                        // 10236
			this.options.values[ index ] = this._trimAlignValue( newValue );                                                    // 10237
			this._refreshValue();                                                                                               // 10238
			this._change( null, index );                                                                                        // 10239
			return;                                                                                                             // 10240
		}                                                                                                                    // 10241
                                                                                                                       // 10242
		if ( arguments.length ) {                                                                                            // 10243
			if ( $.isArray( arguments[ 0 ] ) ) {                                                                                // 10244
				vals = this.options.values;                                                                                        // 10245
				newValues = arguments[ 0 ];                                                                                        // 10246
				for ( i = 0; i < vals.length; i += 1 ) {                                                                           // 10247
					vals[ i ] = this._trimAlignValue( newValues[ i ] );                                                               // 10248
					this._change( null, i );                                                                                          // 10249
				}                                                                                                                  // 10250
				this._refreshValue();                                                                                              // 10251
			} else {                                                                                                            // 10252
				if ( this.options.values && this.options.values.length ) {                                                         // 10253
					return this._values( index );                                                                                     // 10254
				} else {                                                                                                           // 10255
					return this.value();                                                                                              // 10256
				}                                                                                                                  // 10257
			}                                                                                                                   // 10258
		} else {                                                                                                             // 10259
			return this._values();                                                                                              // 10260
		}                                                                                                                    // 10261
	},                                                                                                                    // 10262
                                                                                                                       // 10263
	_setOption: function( key, value ) {                                                                                  // 10264
		var i,                                                                                                               // 10265
			valsLength = 0;                                                                                                     // 10266
                                                                                                                       // 10267
		if ( $.isArray( this.options.values ) ) {                                                                            // 10268
			valsLength = this.options.values.length;                                                                            // 10269
		}                                                                                                                    // 10270
                                                                                                                       // 10271
		$.Widget.prototype._setOption.apply( this, arguments );                                                              // 10272
                                                                                                                       // 10273
		switch ( key ) {                                                                                                     // 10274
			case "disabled":                                                                                                    // 10275
				if ( value ) {                                                                                                     // 10276
					this.handles.filter( ".ui-state-focus" ).blur();                                                                  // 10277
					this.handles.removeClass( "ui-state-hover" );                                                                     // 10278
					this.handles.prop( "disabled", true );                                                                            // 10279
					this.element.addClass( "ui-disabled" );                                                                           // 10280
				} else {                                                                                                           // 10281
					this.handles.prop( "disabled", false );                                                                           // 10282
					this.element.removeClass( "ui-disabled" );                                                                        // 10283
				}                                                                                                                  // 10284
				break;                                                                                                             // 10285
			case "orientation":                                                                                                 // 10286
				this._detectOrientation();                                                                                         // 10287
				this.element                                                                                                       // 10288
					.removeClass( "ui-slider-horizontal ui-slider-vertical" )                                                         // 10289
					.addClass( "ui-slider-" + this.orientation );                                                                     // 10290
				this._refreshValue();                                                                                              // 10291
				break;                                                                                                             // 10292
			case "value":                                                                                                       // 10293
				this._animateOff = true;                                                                                           // 10294
				this._refreshValue();                                                                                              // 10295
				this._change( null, 0 );                                                                                           // 10296
				this._animateOff = false;                                                                                          // 10297
				break;                                                                                                             // 10298
			case "values":                                                                                                      // 10299
				this._animateOff = true;                                                                                           // 10300
				this._refreshValue();                                                                                              // 10301
				for ( i = 0; i < valsLength; i += 1 ) {                                                                            // 10302
					this._change( null, i );                                                                                          // 10303
				}                                                                                                                  // 10304
				this._animateOff = false;                                                                                          // 10305
				break;                                                                                                             // 10306
			case "min":                                                                                                         // 10307
			case "max":                                                                                                         // 10308
				this._animateOff = true;                                                                                           // 10309
				this._refreshValue();                                                                                              // 10310
				this._animateOff = false;                                                                                          // 10311
				break;                                                                                                             // 10312
		}                                                                                                                    // 10313
	},                                                                                                                    // 10314
                                                                                                                       // 10315
	//internal value getter                                                                                               // 10316
	// _value() returns value trimmed by min and max, aligned by step                                                     // 10317
	_value: function() {                                                                                                  // 10318
		var val = this.options.value;                                                                                        // 10319
		val = this._trimAlignValue( val );                                                                                   // 10320
                                                                                                                       // 10321
		return val;                                                                                                          // 10322
	},                                                                                                                    // 10323
                                                                                                                       // 10324
	//internal values getter                                                                                              // 10325
	// _values() returns array of values trimmed by min and max, aligned by step                                          // 10326
	// _values( index ) returns single value trimmed by min and max, aligned by step                                      // 10327
	_values: function( index ) {                                                                                          // 10328
		var val,                                                                                                             // 10329
			vals,                                                                                                               // 10330
			i;                                                                                                                  // 10331
                                                                                                                       // 10332
		if ( arguments.length ) {                                                                                            // 10333
			val = this.options.values[ index ];                                                                                 // 10334
			val = this._trimAlignValue( val );                                                                                  // 10335
                                                                                                                       // 10336
			return val;                                                                                                         // 10337
		} else {                                                                                                             // 10338
			// .slice() creates a copy of the array                                                                             // 10339
			// this copy gets trimmed by min and max and then returned                                                          // 10340
			vals = this.options.values.slice();                                                                                 // 10341
			for ( i = 0; i < vals.length; i+= 1) {                                                                              // 10342
				vals[ i ] = this._trimAlignValue( vals[ i ] );                                                                     // 10343
			}                                                                                                                   // 10344
                                                                                                                       // 10345
			return vals;                                                                                                        // 10346
		}                                                                                                                    // 10347
	},                                                                                                                    // 10348
                                                                                                                       // 10349
	// returns the step-aligned value that val is closest to, between (inclusive) min and max                             // 10350
	_trimAlignValue: function( val ) {                                                                                    // 10351
		if ( val <= this._valueMin() ) {                                                                                     // 10352
			return this._valueMin();                                                                                            // 10353
		}                                                                                                                    // 10354
		if ( val >= this._valueMax() ) {                                                                                     // 10355
			return this._valueMax();                                                                                            // 10356
		}                                                                                                                    // 10357
		var step = ( this.options.step > 0 ) ? this.options.step : 1,                                                        // 10358
			valModStep = (val - this._valueMin()) % step,                                                                       // 10359
			alignValue = val - valModStep;                                                                                      // 10360
                                                                                                                       // 10361
		if ( Math.abs(valModStep) * 2 >= step ) {                                                                            // 10362
			alignValue += ( valModStep > 0 ) ? step : ( -step );                                                                // 10363
		}                                                                                                                    // 10364
                                                                                                                       // 10365
		// Since JavaScript has problems with large floats, round                                                            // 10366
		// the final value to 5 digits after the decimal point (see #4124)                                                   // 10367
		return parseFloat( alignValue.toFixed(5) );                                                                          // 10368
	},                                                                                                                    // 10369
                                                                                                                       // 10370
	_valueMin: function() {                                                                                               // 10371
		return this.options.min;                                                                                             // 10372
	},                                                                                                                    // 10373
                                                                                                                       // 10374
	_valueMax: function() {                                                                                               // 10375
		return this.options.max;                                                                                             // 10376
	},                                                                                                                    // 10377
                                                                                                                       // 10378
	_refreshValue: function() {                                                                                           // 10379
		var lastValPercent, valPercent, value, valueMin, valueMax,                                                           // 10380
			oRange = this.options.range,                                                                                        // 10381
			o = this.options,                                                                                                   // 10382
			that = this,                                                                                                        // 10383
			animate = ( !this._animateOff ) ? o.animate : false,                                                                // 10384
			_set = {};                                                                                                          // 10385
                                                                                                                       // 10386
		if ( this.options.values && this.options.values.length ) {                                                           // 10387
			this.handles.each(function( i ) {                                                                                   // 10388
				valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;                // 10389
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";                                  // 10390
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );                                          // 10391
				if ( that.options.range === true ) {                                                                               // 10392
					if ( that.orientation === "horizontal" ) {                                                                        // 10393
						if ( i === 0 ) {                                                                                                 // 10394
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );                // 10395
						}                                                                                                                // 10396
						if ( i === 1 ) {                                                                                                 // 10397
							that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}                                                                                                                // 10399
					} else {                                                                                                          // 10400
						if ( i === 0 ) {                                                                                                 // 10401
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );          // 10402
						}                                                                                                                // 10403
						if ( i === 1 ) {                                                                                                 // 10404
							that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}                                                                                                                // 10406
					}                                                                                                                 // 10407
				}                                                                                                                  // 10408
				lastValPercent = valPercent;                                                                                       // 10409
			});                                                                                                                 // 10410
		} else {                                                                                                             // 10411
			value = this.value();                                                                                               // 10412
			valueMin = this._valueMin();                                                                                        // 10413
			valueMax = this._valueMax();                                                                                        // 10414
			valPercent = ( valueMax !== valueMin ) ?                                                                            // 10415
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :                                                            // 10416
					0;                                                                                                                // 10417
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";                                   // 10418
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );                                         // 10419
                                                                                                                       // 10420
			if ( oRange === "min" && this.orientation === "horizontal" ) {                                                      // 10421
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );                  // 10422
			}                                                                                                                   // 10423
			if ( oRange === "max" && this.orientation === "horizontal" ) {                                                      // 10424
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}                                                                                                                   // 10426
			if ( oRange === "min" && this.orientation === "vertical" ) {                                                        // 10427
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );                 // 10428
			}                                                                                                                   // 10429
			if ( oRange === "max" && this.orientation === "vertical" ) {                                                        // 10430
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}                                                                                                                   // 10432
		}                                                                                                                    // 10433
	}                                                                                                                     // 10434
                                                                                                                       // 10435
});                                                                                                                    // 10436
                                                                                                                       // 10437
}(jQuery));                                                                                                            // 10438
(function( $ ) {                                                                                                       // 10439
                                                                                                                       // 10440
function modifier( fn ) {                                                                                              // 10441
	return function() {                                                                                                   // 10442
		var previous = this.element.val();                                                                                   // 10443
		fn.apply( this, arguments );                                                                                         // 10444
		this._refresh();                                                                                                     // 10445
		if ( previous !== this.element.val() ) {                                                                             // 10446
			this._trigger( "change" );                                                                                          // 10447
		}                                                                                                                    // 10448
	};                                                                                                                    // 10449
}                                                                                                                      // 10450
                                                                                                                       // 10451
$.widget( "ui.spinner", {                                                                                              // 10452
	version: "1.9.2",                                                                                                     // 10453
	defaultElement: "<input>",                                                                                            // 10454
	widgetEventPrefix: "spin",                                                                                            // 10455
	options: {                                                                                                            // 10456
		culture: null,                                                                                                       // 10457
		icons: {                                                                                                             // 10458
			down: "ui-icon-triangle-1-s",                                                                                       // 10459
			up: "ui-icon-triangle-1-n"                                                                                          // 10460
		},                                                                                                                   // 10461
		incremental: true,                                                                                                   // 10462
		max: null,                                                                                                           // 10463
		min: null,                                                                                                           // 10464
		numberFormat: null,                                                                                                  // 10465
		page: 10,                                                                                                            // 10466
		step: 1,                                                                                                             // 10467
                                                                                                                       // 10468
		change: null,                                                                                                        // 10469
		spin: null,                                                                                                          // 10470
		start: null,                                                                                                         // 10471
		stop: null                                                                                                           // 10472
	},                                                                                                                    // 10473
                                                                                                                       // 10474
	_create: function() {                                                                                                 // 10475
		// handle string values that need to be parsed                                                                       // 10476
		this._setOption( "max", this.options.max );                                                                          // 10477
		this._setOption( "min", this.options.min );                                                                          // 10478
		this._setOption( "step", this.options.step );                                                                        // 10479
                                                                                                                       // 10480
		// format the value, but don't constrain                                                                             // 10481
		this._value( this.element.val(), true );                                                                             // 10482
                                                                                                                       // 10483
		this._draw();                                                                                                        // 10484
		this._on( this._events );                                                                                            // 10485
		this._refresh();                                                                                                     // 10486
                                                                                                                       // 10487
		// turning off autocomplete prevents the browser from remembering the                                                // 10488
		// value when navigating through history, so we re-enable autocomplete                                               // 10489
		// if the page is unloaded before the widget is destroyed. #7790                                                     // 10490
		this._on( this.window, {                                                                                             // 10491
			beforeunload: function() {                                                                                          // 10492
				this.element.removeAttr( "autocomplete" );                                                                         // 10493
			}                                                                                                                   // 10494
		});                                                                                                                  // 10495
	},                                                                                                                    // 10496
                                                                                                                       // 10497
	_getCreateOptions: function() {                                                                                       // 10498
		var options = {},                                                                                                    // 10499
			element = this.element;                                                                                             // 10500
                                                                                                                       // 10501
		$.each( [ "min", "max", "step" ], function( i, option ) {                                                            // 10502
			var value = element.attr( option );                                                                                 // 10503
			if ( value !== undefined && value.length ) {                                                                        // 10504
				options[ option ] = value;                                                                                         // 10505
			}                                                                                                                   // 10506
		});                                                                                                                  // 10507
                                                                                                                       // 10508
		return options;                                                                                                      // 10509
	},                                                                                                                    // 10510
                                                                                                                       // 10511
	_events: {                                                                                                            // 10512
		keydown: function( event ) {                                                                                         // 10513
			if ( this._start( event ) && this._keydown( event ) ) {                                                             // 10514
				event.preventDefault();                                                                                            // 10515
			}                                                                                                                   // 10516
		},                                                                                                                   // 10517
		keyup: "_stop",                                                                                                      // 10518
		focus: function() {                                                                                                  // 10519
			this.previous = this.element.val();                                                                                 // 10520
		},                                                                                                                   // 10521
		blur: function( event ) {                                                                                            // 10522
			if ( this.cancelBlur ) {                                                                                            // 10523
				delete this.cancelBlur;                                                                                            // 10524
				return;                                                                                                            // 10525
			}                                                                                                                   // 10526
                                                                                                                       // 10527
			this._refresh();                                                                                                    // 10528
			if ( this.previous !== this.element.val() ) {                                                                       // 10529
				this._trigger( "change", event );                                                                                  // 10530
			}                                                                                                                   // 10531
		},                                                                                                                   // 10532
		mousewheel: function( event, delta ) {                                                                               // 10533
			if ( !delta ) {                                                                                                     // 10534
				return;                                                                                                            // 10535
			}                                                                                                                   // 10536
			if ( !this.spinning && !this._start( event ) ) {                                                                    // 10537
				return false;                                                                                                      // 10538
			}                                                                                                                   // 10539
                                                                                                                       // 10540
			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );                                                      // 10541
			clearTimeout( this.mousewheelTimer );                                                                               // 10542
			this.mousewheelTimer = this._delay(function() {                                                                     // 10543
				if ( this.spinning ) {                                                                                             // 10544
					this._stop( event );                                                                                              // 10545
				}                                                                                                                  // 10546
			}, 100 );                                                                                                           // 10547
			event.preventDefault();                                                                                             // 10548
		},                                                                                                                   // 10549
		"mousedown .ui-spinner-button": function( event ) {                                                                  // 10550
			var previous;                                                                                                       // 10551
                                                                                                                       // 10552
			// We never want the buttons to have focus; whenever the user is                                                    // 10553
			// interacting with the spinner, the focus should be on the input.                                                  // 10554
			// If the input is focused then this.previous is properly set from                                                  // 10555
			// when the input first received focus. If the input is not focused                                                 // 10556
			// then we need to set this.previous based on the value before spinning.                                            // 10557
			previous = this.element[0] === this.document[0].activeElement ?                                                     // 10558
				this.previous : this.element.val();                                                                                // 10559
			function checkFocus() {                                                                                             // 10560
				var isActive = this.element[0] === this.document[0].activeElement;                                                 // 10561
				if ( !isActive ) {                                                                                                 // 10562
					this.element.focus();                                                                                             // 10563
					this.previous = previous;                                                                                         // 10564
					// support: IE                                                                                                    // 10565
					// IE sets focus asynchronously, so we need to check if focus                                                     // 10566
					// moved off of the input because the user clicked on the button.                                                 // 10567
					this._delay(function() {                                                                                          // 10568
						this.previous = previous;                                                                                        // 10569
					});                                                                                                               // 10570
				}                                                                                                                  // 10571
			}                                                                                                                   // 10572
                                                                                                                       // 10573
			// ensure focus is on (or stays on) the text field                                                                  // 10574
			event.preventDefault();                                                                                             // 10575
			checkFocus.call( this );                                                                                            // 10576
                                                                                                                       // 10577
			// support: IE                                                                                                      // 10578
			// IE doesn't prevent moving focus even with event.preventDefault()                                                 // 10579
			// so we set a flag to know when we should ignore the blur event                                                    // 10580
			// and check (again) if focus moved off of the input.                                                               // 10581
			this.cancelBlur = true;                                                                                             // 10582
			this._delay(function() {                                                                                            // 10583
				delete this.cancelBlur;                                                                                            // 10584
				checkFocus.call( this );                                                                                           // 10585
			});                                                                                                                 // 10586
                                                                                                                       // 10587
			if ( this._start( event ) === false ) {                                                                             // 10588
				return;                                                                                                            // 10589
			}                                                                                                                   // 10590
                                                                                                                       // 10591
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );                         // 10592
		},                                                                                                                   // 10593
		"mouseup .ui-spinner-button": "_stop",                                                                               // 10594
		"mouseenter .ui-spinner-button": function( event ) {                                                                 // 10595
			// button will add ui-state-active if mouse was down while mouseleave and kept down                                 // 10596
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {                                                    // 10597
				return;                                                                                                            // 10598
			}                                                                                                                   // 10599
                                                                                                                       // 10600
			if ( this._start( event ) === false ) {                                                                             // 10601
				return false;                                                                                                      // 10602
			}                                                                                                                   // 10603
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );                         // 10604
		},                                                                                                                   // 10605
		// TODO: do we really want to consider this a stop?                                                                  // 10606
		// shouldn't we just stop the repeater and wait until mouseup before                                                 // 10607
		// we trigger the stop event?                                                                                        // 10608
		"mouseleave .ui-spinner-button": "_stop"                                                                             // 10609
	},                                                                                                                    // 10610
                                                                                                                       // 10611
	_draw: function() {                                                                                                   // 10612
		var uiSpinner = this.uiSpinner = this.element                                                                        // 10613
			.addClass( "ui-spinner-input" )                                                                                     // 10614
			.attr( "autocomplete", "off" )                                                                                      // 10615
			.wrap( this._uiSpinnerHtml() )                                                                                      // 10616
			.parent()                                                                                                           // 10617
				// add buttons                                                                                                     // 10618
				.append( this._buttonHtml() );                                                                                     // 10619
                                                                                                                       // 10620
		this.element.attr( "role", "spinbutton" );                                                                           // 10621
                                                                                                                       // 10622
		// button bindings                                                                                                   // 10623
		this.buttons = uiSpinner.find( ".ui-spinner-button" )                                                                // 10624
			.attr( "tabIndex", -1 )                                                                                             // 10625
			.button()                                                                                                           // 10626
			.removeClass( "ui-corner-all" );                                                                                    // 10627
                                                                                                                       // 10628
		// IE 6 doesn't understand height: 50% for the buttons                                                               // 10629
		// unless the wrapper has an explicit height                                                                         // 10630
		if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&                                                // 10631
				uiSpinner.height() > 0 ) {                                                                                         // 10632
			uiSpinner.height( uiSpinner.height() );                                                                             // 10633
		}                                                                                                                    // 10634
                                                                                                                       // 10635
		// disable spinner if element was already disabled                                                                   // 10636
		if ( this.options.disabled ) {                                                                                       // 10637
			this.disable();                                                                                                     // 10638
		}                                                                                                                    // 10639
	},                                                                                                                    // 10640
                                                                                                                       // 10641
	_keydown: function( event ) {                                                                                         // 10642
		var options = this.options,                                                                                          // 10643
			keyCode = $.ui.keyCode;                                                                                             // 10644
                                                                                                                       // 10645
		switch ( event.keyCode ) {                                                                                           // 10646
		case keyCode.UP:                                                                                                     // 10647
			this._repeat( null, 1, event );                                                                                     // 10648
			return true;                                                                                                        // 10649
		case keyCode.DOWN:                                                                                                   // 10650
			this._repeat( null, -1, event );                                                                                    // 10651
			return true;                                                                                                        // 10652
		case keyCode.PAGE_UP:                                                                                                // 10653
			this._repeat( null, options.page, event );                                                                          // 10654
			return true;                                                                                                        // 10655
		case keyCode.PAGE_DOWN:                                                                                              // 10656
			this._repeat( null, -options.page, event );                                                                         // 10657
			return true;                                                                                                        // 10658
		}                                                                                                                    // 10659
                                                                                                                       // 10660
		return false;                                                                                                        // 10661
	},                                                                                                                    // 10662
                                                                                                                       // 10663
	_uiSpinnerHtml: function() {                                                                                          // 10664
		return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";                                 // 10665
	},                                                                                                                    // 10666
                                                                                                                       // 10667
	_buttonHtml: function() {                                                                                             // 10668
		return "" +                                                                                                          // 10669
			"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +                                                        // 10670
				"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +                                             // 10671
			"</a>" +                                                                                                            // 10672
			"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +                                                      // 10673
				"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +                                           // 10674
			"</a>";                                                                                                             // 10675
	},                                                                                                                    // 10676
                                                                                                                       // 10677
	_start: function( event ) {                                                                                           // 10678
		if ( !this.spinning && this._trigger( "start", event ) === false ) {                                                 // 10679
			return false;                                                                                                       // 10680
		}                                                                                                                    // 10681
                                                                                                                       // 10682
		if ( !this.counter ) {                                                                                               // 10683
			this.counter = 1;                                                                                                   // 10684
		}                                                                                                                    // 10685
		this.spinning = true;                                                                                                // 10686
		return true;                                                                                                         // 10687
	},                                                                                                                    // 10688
                                                                                                                       // 10689
	_repeat: function( i, steps, event ) {                                                                                // 10690
		i = i || 500;                                                                                                        // 10691
                                                                                                                       // 10692
		clearTimeout( this.timer );                                                                                          // 10693
		this.timer = this._delay(function() {                                                                                // 10694
			this._repeat( 40, steps, event );                                                                                   // 10695
		}, i );                                                                                                              // 10696
                                                                                                                       // 10697
		this._spin( steps * this.options.step, event );                                                                      // 10698
	},                                                                                                                    // 10699
                                                                                                                       // 10700
	_spin: function( step, event ) {                                                                                      // 10701
		var value = this.value() || 0;                                                                                       // 10702
                                                                                                                       // 10703
		if ( !this.counter ) {                                                                                               // 10704
			this.counter = 1;                                                                                                   // 10705
		}                                                                                                                    // 10706
                                                                                                                       // 10707
		value = this._adjustValue( value + step * this._increment( this.counter ) );                                         // 10708
                                                                                                                       // 10709
		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {                                 // 10710
			this._value( value );                                                                                               // 10711
			this.counter++;                                                                                                     // 10712
		}                                                                                                                    // 10713
	},                                                                                                                    // 10714
                                                                                                                       // 10715
	_increment: function( i ) {                                                                                           // 10716
		var incremental = this.options.incremental;                                                                          // 10717
                                                                                                                       // 10718
		if ( incremental ) {                                                                                                 // 10719
			return $.isFunction( incremental ) ?                                                                                // 10720
				incremental( i ) :                                                                                                 // 10721
				Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );                                                                // 10722
		}                                                                                                                    // 10723
                                                                                                                       // 10724
		return 1;                                                                                                            // 10725
	},                                                                                                                    // 10726
                                                                                                                       // 10727
	_precision: function() {                                                                                              // 10728
		var precision = this._precisionOf( this.options.step );                                                              // 10729
		if ( this.options.min !== null ) {                                                                                   // 10730
			precision = Math.max( precision, this._precisionOf( this.options.min ) );                                           // 10731
		}                                                                                                                    // 10732
		return precision;                                                                                                    // 10733
	},                                                                                                                    // 10734
                                                                                                                       // 10735
	_precisionOf: function( num ) {                                                                                       // 10736
		var str = num.toString(),                                                                                            // 10737
			decimal = str.indexOf( "." );                                                                                       // 10738
		return decimal === -1 ? 0 : str.length - decimal - 1;                                                                // 10739
	},                                                                                                                    // 10740
                                                                                                                       // 10741
	_adjustValue: function( value ) {                                                                                     // 10742
		var base, aboveMin,                                                                                                  // 10743
			options = this.options;                                                                                             // 10744
                                                                                                                       // 10745
		// make sure we're at a valid step                                                                                   // 10746
		// - find out where we are relative to the base (min or 0)                                                           // 10747
		base = options.min !== null ? options.min : 0;                                                                       // 10748
		aboveMin = value - base;                                                                                             // 10749
		// - round to the nearest step                                                                                       // 10750
		aboveMin = Math.round(aboveMin / options.step) * options.step;                                                       // 10751
		// - rounding is based on 0, so adjust back to our base                                                              // 10752
		value = base + aboveMin;                                                                                             // 10753
                                                                                                                       // 10754
		// fix precision from bad JS floating point math                                                                     // 10755
		value = parseFloat( value.toFixed( this._precision() ) );                                                            // 10756
                                                                                                                       // 10757
		// clamp the value                                                                                                   // 10758
		if ( options.max !== null && value > options.max) {                                                                  // 10759
			return options.max;                                                                                                 // 10760
		}                                                                                                                    // 10761
		if ( options.min !== null && value < options.min ) {                                                                 // 10762
			return options.min;                                                                                                 // 10763
		}                                                                                                                    // 10764
                                                                                                                       // 10765
		return value;                                                                                                        // 10766
	},                                                                                                                    // 10767
                                                                                                                       // 10768
	_stop: function( event ) {                                                                                            // 10769
		if ( !this.spinning ) {                                                                                              // 10770
			return;                                                                                                             // 10771
		}                                                                                                                    // 10772
                                                                                                                       // 10773
		clearTimeout( this.timer );                                                                                          // 10774
		clearTimeout( this.mousewheelTimer );                                                                                // 10775
		this.counter = 0;                                                                                                    // 10776
		this.spinning = false;                                                                                               // 10777
		this._trigger( "stop", event );                                                                                      // 10778
	},                                                                                                                    // 10779
                                                                                                                       // 10780
	_setOption: function( key, value ) {                                                                                  // 10781
		if ( key === "culture" || key === "numberFormat" ) {                                                                 // 10782
			var prevValue = this._parse( this.element.val() );                                                                  // 10783
			this.options[ key ] = value;                                                                                        // 10784
			this.element.val( this._format( prevValue ) );                                                                      // 10785
			return;                                                                                                             // 10786
		}                                                                                                                    // 10787
                                                                                                                       // 10788
		if ( key === "max" || key === "min" || key === "step" ) {                                                            // 10789
			if ( typeof value === "string" ) {                                                                                  // 10790
				value = this._parse( value );                                                                                      // 10791
			}                                                                                                                   // 10792
		}                                                                                                                    // 10793
                                                                                                                       // 10794
		this._super( key, value );                                                                                           // 10795
                                                                                                                       // 10796
		if ( key === "disabled" ) {                                                                                          // 10797
			if ( value ) {                                                                                                      // 10798
				this.element.prop( "disabled", true );                                                                             // 10799
				this.buttons.button( "disable" );                                                                                  // 10800
			} else {                                                                                                            // 10801
				this.element.prop( "disabled", false );                                                                            // 10802
				this.buttons.button( "enable" );                                                                                   // 10803
			}                                                                                                                   // 10804
		}                                                                                                                    // 10805
	},                                                                                                                    // 10806
                                                                                                                       // 10807
	_setOptions: modifier(function( options ) {                                                                           // 10808
		this._super( options );                                                                                              // 10809
		this._value( this.element.val() );                                                                                   // 10810
	}),                                                                                                                   // 10811
                                                                                                                       // 10812
	_parse: function( val ) {                                                                                             // 10813
		if ( typeof val === "string" && val !== "" ) {                                                                       // 10814
			val = window.Globalize && this.options.numberFormat ?                                                               // 10815
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;                                                      // 10816
		}                                                                                                                    // 10817
		return val === "" || isNaN( val ) ? null : val;                                                                      // 10818
	},                                                                                                                    // 10819
                                                                                                                       // 10820
	_format: function( value ) {                                                                                          // 10821
		if ( value === "" ) {                                                                                                // 10822
			return "";                                                                                                          // 10823
		}                                                                                                                    // 10824
		return window.Globalize && this.options.numberFormat ?                                                               // 10825
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :                                        // 10826
			value;                                                                                                              // 10827
	},                                                                                                                    // 10828
                                                                                                                       // 10829
	_refresh: function() {                                                                                                // 10830
		this.element.attr({                                                                                                  // 10831
			"aria-valuemin": this.options.min,                                                                                  // 10832
			"aria-valuemax": this.options.max,                                                                                  // 10833
			// TODO: what should we do with values that can't be parsed?                                                        // 10834
			"aria-valuenow": this._parse( this.element.val() )                                                                  // 10835
		});                                                                                                                  // 10836
	},                                                                                                                    // 10837
                                                                                                                       // 10838
	// update the value without triggering change                                                                         // 10839
	_value: function( value, allowAny ) {                                                                                 // 10840
		var parsed;                                                                                                          // 10841
		if ( value !== "" ) {                                                                                                // 10842
			parsed = this._parse( value );                                                                                      // 10843
			if ( parsed !== null ) {                                                                                            // 10844
				if ( !allowAny ) {                                                                                                 // 10845
					parsed = this._adjustValue( parsed );                                                                             // 10846
				}                                                                                                                  // 10847
				value = this._format( parsed );                                                                                    // 10848
			}                                                                                                                   // 10849
		}                                                                                                                    // 10850
		this.element.val( value );                                                                                           // 10851
		this._refresh();                                                                                                     // 10852
	},                                                                                                                    // 10853
                                                                                                                       // 10854
	_destroy: function() {                                                                                                // 10855
		this.element                                                                                                         // 10856
			.removeClass( "ui-spinner-input" )                                                                                  // 10857
			.prop( "disabled", false )                                                                                          // 10858
			.removeAttr( "autocomplete" )                                                                                       // 10859
			.removeAttr( "role" )                                                                                               // 10860
			.removeAttr( "aria-valuemin" )                                                                                      // 10861
			.removeAttr( "aria-valuemax" )                                                                                      // 10862
			.removeAttr( "aria-valuenow" );                                                                                     // 10863
		this.uiSpinner.replaceWith( this.element );                                                                          // 10864
	},                                                                                                                    // 10865
                                                                                                                       // 10866
	stepUp: modifier(function( steps ) {                                                                                  // 10867
		this._stepUp( steps );                                                                                               // 10868
	}),                                                                                                                   // 10869
	_stepUp: function( steps ) {                                                                                          // 10870
		this._spin( (steps || 1) * this.options.step );                                                                      // 10871
	},                                                                                                                    // 10872
                                                                                                                       // 10873
	stepDown: modifier(function( steps ) {                                                                                // 10874
		this._stepDown( steps );                                                                                             // 10875
	}),                                                                                                                   // 10876
	_stepDown: function( steps ) {                                                                                        // 10877
		this._spin( (steps || 1) * -this.options.step );                                                                     // 10878
	},                                                                                                                    // 10879
                                                                                                                       // 10880
	pageUp: modifier(function( pages ) {                                                                                  // 10881
		this._stepUp( (pages || 1) * this.options.page );                                                                    // 10882
	}),                                                                                                                   // 10883
                                                                                                                       // 10884
	pageDown: modifier(function( pages ) {                                                                                // 10885
		this._stepDown( (pages || 1) * this.options.page );                                                                  // 10886
	}),                                                                                                                   // 10887
                                                                                                                       // 10888
	value: function( newVal ) {                                                                                           // 10889
		if ( !arguments.length ) {                                                                                           // 10890
			return this._parse( this.element.val() );                                                                           // 10891
		}                                                                                                                    // 10892
		modifier( this._value ).call( this, newVal );                                                                        // 10893
	},                                                                                                                    // 10894
                                                                                                                       // 10895
	widget: function() {                                                                                                  // 10896
		return this.uiSpinner;                                                                                               // 10897
	}                                                                                                                     // 10898
});                                                                                                                    // 10899
                                                                                                                       // 10900
}( jQuery ) );                                                                                                         // 10901
(function( $, undefined ) {                                                                                            // 10902
                                                                                                                       // 10903
var tabId = 0,                                                                                                         // 10904
	rhash = /#.*$/;                                                                                                       // 10905
                                                                                                                       // 10906
function getNextTabId() {                                                                                              // 10907
	return ++tabId;                                                                                                       // 10908
}                                                                                                                      // 10909
                                                                                                                       // 10910
function isLocal( anchor ) {                                                                                           // 10911
	return anchor.hash.length > 1 &&                                                                                      // 10912
		anchor.href.replace( rhash, "" ) ===                                                                                 // 10913
			location.href.replace( rhash, "" )                                                                                  // 10914
				// support: Safari 5.1                                                                                             // 10915
				// Safari 5.1 doesn't encode spaces in window.location                                                             // 10916
				// but it does encode spaces from anchors (#8777)                                                                  // 10917
				.replace( /\s/g, "%20" );                                                                                          // 10918
}                                                                                                                      // 10919
                                                                                                                       // 10920
$.widget( "ui.tabs", {                                                                                                 // 10921
	version: "1.9.2",                                                                                                     // 10922
	delay: 300,                                                                                                           // 10923
	options: {                                                                                                            // 10924
		active: null,                                                                                                        // 10925
		collapsible: false,                                                                                                  // 10926
		event: "click",                                                                                                      // 10927
		heightStyle: "content",                                                                                              // 10928
		hide: null,                                                                                                          // 10929
		show: null,                                                                                                          // 10930
                                                                                                                       // 10931
		// callbacks                                                                                                         // 10932
		activate: null,                                                                                                      // 10933
		beforeActivate: null,                                                                                                // 10934
		beforeLoad: null,                                                                                                    // 10935
		load: null                                                                                                           // 10936
	},                                                                                                                    // 10937
                                                                                                                       // 10938
	_create: function() {                                                                                                 // 10939
		var that = this,                                                                                                     // 10940
			options = this.options,                                                                                             // 10941
			active = options.active,                                                                                            // 10942
			locationHash = location.hash.substring( 1 );                                                                        // 10943
                                                                                                                       // 10944
		this.running = false;                                                                                                // 10945
                                                                                                                       // 10946
		this.element                                                                                                         // 10947
			.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )                                                    // 10948
			.toggleClass( "ui-tabs-collapsible", options.collapsible )                                                          // 10949
			// Prevent users from focusing disabled tabs via click                                                              // 10950
			.delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {                              // 10951
				if ( $( this ).is( ".ui-state-disabled" ) ) {                                                                      // 10952
					event.preventDefault();                                                                                           // 10953
				}                                                                                                                  // 10954
			})                                                                                                                  // 10955
			// support: IE <9                                                                                                   // 10956
			// Preventing the default action in mousedown doesn't prevent IE                                                    // 10957
			// from focusing the element, so if the anchor gets focused, blur.                                                  // 10958
			// We don't have to worry about focusing the previously focused                                                     // 10959
			// element since clicking on a non-focusable element should focus                                                   // 10960
			// the body anyway.                                                                                                 // 10961
			.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {                                           // 10962
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {                                                      // 10963
					this.blur();                                                                                                      // 10964
				}                                                                                                                  // 10965
			});                                                                                                                 // 10966
                                                                                                                       // 10967
		this._processTabs();                                                                                                 // 10968
                                                                                                                       // 10969
		if ( active === null ) {                                                                                             // 10970
			// check the fragment identifier in the URL                                                                         // 10971
			if ( locationHash ) {                                                                                               // 10972
				this.tabs.each(function( i, tab ) {                                                                                // 10973
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {                                                        // 10974
						active = i;                                                                                                      // 10975
						return false;                                                                                                    // 10976
					}                                                                                                                 // 10977
				});                                                                                                                // 10978
			}                                                                                                                   // 10979
                                                                                                                       // 10980
			// check for a tab marked active via a class                                                                        // 10981
			if ( active === null ) {                                                                                            // 10982
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );                                                 // 10983
			}                                                                                                                   // 10984
                                                                                                                       // 10985
			// no active tab, set to false                                                                                      // 10986
			if ( active === null || active === -1 ) {                                                                           // 10987
				active = this.tabs.length ? 0 : false;                                                                             // 10988
			}                                                                                                                   // 10989
		}                                                                                                                    // 10990
                                                                                                                       // 10991
		// handle numbers: negative, out of range                                                                            // 10992
		if ( active !== false ) {                                                                                            // 10993
			active = this.tabs.index( this.tabs.eq( active ) );                                                                 // 10994
			if ( active === -1 ) {                                                                                              // 10995
				active = options.collapsible ? false : 0;                                                                          // 10996
			}                                                                                                                   // 10997
		}                                                                                                                    // 10998
		options.active = active;                                                                                             // 10999
                                                                                                                       // 11000
		// don't allow collapsible: false and active: false                                                                  // 11001
		if ( !options.collapsible && options.active === false && this.anchors.length ) {                                     // 11002
			options.active = 0;                                                                                                 // 11003
		}                                                                                                                    // 11004
                                                                                                                       // 11005
		// Take disabling tabs via class attribute from HTML                                                                 // 11006
		// into account and update option properly.                                                                          // 11007
		if ( $.isArray( options.disabled ) ) {                                                                               // 11008
			options.disabled = $.unique( options.disabled.concat(                                                               // 11009
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {                                                  // 11010
					return that.tabs.index( li );                                                                                     // 11011
				})                                                                                                                 // 11012
			) ).sort();                                                                                                         // 11013
		}                                                                                                                    // 11014
                                                                                                                       // 11015
		// check for length avoids error when initializing empty list                                                        // 11016
		if ( this.options.active !== false && this.anchors.length ) {                                                        // 11017
			this.active = this._findActive( this.options.active );                                                              // 11018
		} else {                                                                                                             // 11019
			this.active = $();                                                                                                  // 11020
		}                                                                                                                    // 11021
                                                                                                                       // 11022
		this._refresh();                                                                                                     // 11023
                                                                                                                       // 11024
		if ( this.active.length ) {                                                                                          // 11025
			this.load( options.active );                                                                                        // 11026
		}                                                                                                                    // 11027
	},                                                                                                                    // 11028
                                                                                                                       // 11029
	_getCreateEventData: function() {                                                                                     // 11030
		return {                                                                                                             // 11031
			tab: this.active,                                                                                                   // 11032
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )                                              // 11033
		};                                                                                                                   // 11034
	},                                                                                                                    // 11035
                                                                                                                       // 11036
	_tabKeydown: function( event ) {                                                                                      // 11037
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),                                                // 11038
			selectedIndex = this.tabs.index( focusedTab ),                                                                      // 11039
			goingForward = true;                                                                                                // 11040
                                                                                                                       // 11041
		if ( this._handlePageNav( event ) ) {                                                                                // 11042
			return;                                                                                                             // 11043
		}                                                                                                                    // 11044
                                                                                                                       // 11045
		switch ( event.keyCode ) {                                                                                           // 11046
			case $.ui.keyCode.RIGHT:                                                                                            // 11047
			case $.ui.keyCode.DOWN:                                                                                             // 11048
				selectedIndex++;                                                                                                   // 11049
				break;                                                                                                             // 11050
			case $.ui.keyCode.UP:                                                                                               // 11051
			case $.ui.keyCode.LEFT:                                                                                             // 11052
				goingForward = false;                                                                                              // 11053
				selectedIndex--;                                                                                                   // 11054
				break;                                                                                                             // 11055
			case $.ui.keyCode.END:                                                                                              // 11056
				selectedIndex = this.anchors.length - 1;                                                                           // 11057
				break;                                                                                                             // 11058
			case $.ui.keyCode.HOME:                                                                                             // 11059
				selectedIndex = 0;                                                                                                 // 11060
				break;                                                                                                             // 11061
			case $.ui.keyCode.SPACE:                                                                                            // 11062
				// Activate only, no collapsing                                                                                    // 11063
				event.preventDefault();                                                                                            // 11064
				clearTimeout( this.activating );                                                                                   // 11065
				this._activate( selectedIndex );                                                                                   // 11066
				return;                                                                                                            // 11067
			case $.ui.keyCode.ENTER:                                                                                            // 11068
				// Toggle (cancel delayed activation, allow collapsing)                                                            // 11069
				event.preventDefault();                                                                                            // 11070
				clearTimeout( this.activating );                                                                                   // 11071
				// Determine if we should collapse or activate                                                                     // 11072
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );                                   // 11073
				return;                                                                                                            // 11074
			default:                                                                                                            // 11075
				return;                                                                                                            // 11076
		}                                                                                                                    // 11077
                                                                                                                       // 11078
		// Focus the appropriate tab, based on which key was pressed                                                         // 11079
		event.preventDefault();                                                                                              // 11080
		clearTimeout( this.activating );                                                                                     // 11081
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );                                                   // 11082
                                                                                                                       // 11083
		// Navigating with control key will prevent automatic activation                                                     // 11084
		if ( !event.ctrlKey ) {                                                                                              // 11085
			// Update aria-selected immediately so that AT think the tab is already selected.                                   // 11086
			// Otherwise AT may confuse the user by stating that they need to activate the tab,                                 // 11087
			// but the tab will already be activated by the time the announcement finishes.                                     // 11088
			focusedTab.attr( "aria-selected", "false" );                                                                        // 11089
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );                                                      // 11090
                                                                                                                       // 11091
			this.activating = this._delay(function() {                                                                          // 11092
				this.option( "active", selectedIndex );                                                                            // 11093
			}, this.delay );                                                                                                    // 11094
		}                                                                                                                    // 11095
	},                                                                                                                    // 11096
                                                                                                                       // 11097
	_panelKeydown: function( event ) {                                                                                    // 11098
		if ( this._handlePageNav( event ) ) {                                                                                // 11099
			return;                                                                                                             // 11100
		}                                                                                                                    // 11101
                                                                                                                       // 11102
		// Ctrl+up moves focus to the current tab                                                                            // 11103
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {                                                          // 11104
			event.preventDefault();                                                                                             // 11105
			this.active.focus();                                                                                                // 11106
		}                                                                                                                    // 11107
	},                                                                                                                    // 11108
                                                                                                                       // 11109
	// Alt+page up/down moves focus to the previous/next tab (and activates)                                              // 11110
	_handlePageNav: function( event ) {                                                                                   // 11111
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {                                                      // 11112
			this._activate( this._focusNextTab( this.options.active - 1, false ) );                                             // 11113
			return true;                                                                                                        // 11114
		}                                                                                                                    // 11115
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {                                                    // 11116
			this._activate( this._focusNextTab( this.options.active + 1, true ) );                                              // 11117
			return true;                                                                                                        // 11118
		}                                                                                                                    // 11119
	},                                                                                                                    // 11120
                                                                                                                       // 11121
	_findNextTab: function( index, goingForward ) {                                                                       // 11122
		var lastTabIndex = this.tabs.length - 1;                                                                             // 11123
                                                                                                                       // 11124
		function constrain() {                                                                                               // 11125
			if ( index > lastTabIndex ) {                                                                                       // 11126
				index = 0;                                                                                                         // 11127
			}                                                                                                                   // 11128
			if ( index < 0 ) {                                                                                                  // 11129
				index = lastTabIndex;                                                                                              // 11130
			}                                                                                                                   // 11131
			return index;                                                                                                       // 11132
		}                                                                                                                    // 11133
                                                                                                                       // 11134
		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {                                                   // 11135
			index = goingForward ? index + 1 : index - 1;                                                                       // 11136
		}                                                                                                                    // 11137
                                                                                                                       // 11138
		return index;                                                                                                        // 11139
	},                                                                                                                    // 11140
                                                                                                                       // 11141
	_focusNextTab: function( index, goingForward ) {                                                                      // 11142
		index = this._findNextTab( index, goingForward );                                                                    // 11143
		this.tabs.eq( index ).focus();                                                                                       // 11144
		return index;                                                                                                        // 11145
	},                                                                                                                    // 11146
                                                                                                                       // 11147
	_setOption: function( key, value ) {                                                                                  // 11148
		if ( key === "active" ) {                                                                                            // 11149
			// _activate() will handle invalid values and update this.options                                                   // 11150
			this._activate( value );                                                                                            // 11151
			return;                                                                                                             // 11152
		}                                                                                                                    // 11153
                                                                                                                       // 11154
		if ( key === "disabled" ) {                                                                                          // 11155
			// don't use the widget factory's disabled handling                                                                 // 11156
			this._setupDisabled( value );                                                                                       // 11157
			return;                                                                                                             // 11158
		}                                                                                                                    // 11159
                                                                                                                       // 11160
		this._super( key, value);                                                                                            // 11161
                                                                                                                       // 11162
		if ( key === "collapsible" ) {                                                                                       // 11163
			this.element.toggleClass( "ui-tabs-collapsible", value );                                                           // 11164
			// Setting collapsible: false while collapsed; open first panel                                                     // 11165
			if ( !value && this.options.active === false ) {                                                                    // 11166
				this._activate( 0 );                                                                                               // 11167
			}                                                                                                                   // 11168
		}                                                                                                                    // 11169
                                                                                                                       // 11170
		if ( key === "event" ) {                                                                                             // 11171
			this._setupEvents( value );                                                                                         // 11172
		}                                                                                                                    // 11173
                                                                                                                       // 11174
		if ( key === "heightStyle" ) {                                                                                       // 11175
			this._setupHeightStyle( value );                                                                                    // 11176
		}                                                                                                                    // 11177
	},                                                                                                                    // 11178
                                                                                                                       // 11179
	_tabId: function( tab ) {                                                                                             // 11180
		return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();                                                   // 11181
	},                                                                                                                    // 11182
                                                                                                                       // 11183
	_sanitizeSelector: function( hash ) {                                                                                 // 11184
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";                                    // 11185
	},                                                                                                                    // 11186
                                                                                                                       // 11187
	refresh: function() {                                                                                                 // 11188
		var options = this.options,                                                                                          // 11189
			lis = this.tablist.children( ":has(a[href])" );                                                                     // 11190
                                                                                                                       // 11191
		// get disabled tabs from class attribute from HTML                                                                  // 11192
		// this will get converted to a boolean if needed in _refresh()                                                      // 11193
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {                                      // 11194
			return lis.index( tab );                                                                                            // 11195
		});                                                                                                                  // 11196
                                                                                                                       // 11197
		this._processTabs();                                                                                                 // 11198
                                                                                                                       // 11199
		// was collapsed or no tabs                                                                                          // 11200
		if ( options.active === false || !this.anchors.length ) {                                                            // 11201
			options.active = false;                                                                                             // 11202
			this.active = $();                                                                                                  // 11203
		// was active, but active tab is gone                                                                                // 11204
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {                             // 11205
			// all remaining tabs are disabled                                                                                  // 11206
			if ( this.tabs.length === options.disabled.length ) {                                                               // 11207
				options.active = false;                                                                                            // 11208
				this.active = $();                                                                                                 // 11209
			// activate previous tab                                                                                            // 11210
			} else {                                                                                                            // 11211
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );                                   // 11212
			}                                                                                                                   // 11213
		// was active, active tab still exists                                                                               // 11214
		} else {                                                                                                             // 11215
			// make sure active index is correct                                                                                // 11216
			options.active = this.tabs.index( this.active );                                                                    // 11217
		}                                                                                                                    // 11218
                                                                                                                       // 11219
		this._refresh();                                                                                                     // 11220
	},                                                                                                                    // 11221
                                                                                                                       // 11222
	_refresh: function() {                                                                                                // 11223
		this._setupDisabled( this.options.disabled );                                                                        // 11224
		this._setupEvents( this.options.event );                                                                             // 11225
		this._setupHeightStyle( this.options.heightStyle );                                                                  // 11226
                                                                                                                       // 11227
		this.tabs.not( this.active ).attr({                                                                                  // 11228
			"aria-selected": "false",                                                                                           // 11229
			tabIndex: -1                                                                                                        // 11230
		});                                                                                                                  // 11231
		this.panels.not( this._getPanelForTab( this.active ) )                                                               // 11232
			.hide()                                                                                                             // 11233
			.attr({                                                                                                             // 11234
				"aria-expanded": "false",                                                                                          // 11235
				"aria-hidden": "true"                                                                                              // 11236
			});                                                                                                                 // 11237
                                                                                                                       // 11238
		// Make sure one tab is in the tab order                                                                             // 11239
		if ( !this.active.length ) {                                                                                         // 11240
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );                                                                            // 11241
		} else {                                                                                                             // 11242
			this.active                                                                                                         // 11243
				.addClass( "ui-tabs-active ui-state-active" )                                                                      // 11244
				.attr({                                                                                                            // 11245
					"aria-selected": "true",                                                                                          // 11246
					tabIndex: 0                                                                                                       // 11247
				});                                                                                                                // 11248
			this._getPanelForTab( this.active )                                                                                 // 11249
				.show()                                                                                                            // 11250
				.attr({                                                                                                            // 11251
					"aria-expanded": "true",                                                                                          // 11252
					"aria-hidden": "false"                                                                                            // 11253
				});                                                                                                                // 11254
		}                                                                                                                    // 11255
	},                                                                                                                    // 11256
                                                                                                                       // 11257
	_processTabs: function() {                                                                                            // 11258
		var that = this;                                                                                                     // 11259
                                                                                                                       // 11260
		this.tablist = this._getList()                                                                                       // 11261
			.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )                        // 11262
			.attr( "role", "tablist" );                                                                                         // 11263
                                                                                                                       // 11264
		this.tabs = this.tablist.find( "> li:has(a[href])" )                                                                 // 11265
			.addClass( "ui-state-default ui-corner-top" )                                                                       // 11266
			.attr({                                                                                                             // 11267
				role: "tab",                                                                                                       // 11268
				tabIndex: -1                                                                                                       // 11269
			});                                                                                                                 // 11270
                                                                                                                       // 11271
		this.anchors = this.tabs.map(function() {                                                                            // 11272
				return $( "a", this )[ 0 ];                                                                                        // 11273
			})                                                                                                                  // 11274
			.addClass( "ui-tabs-anchor" )                                                                                       // 11275
			.attr({                                                                                                             // 11276
				role: "presentation",                                                                                              // 11277
				tabIndex: -1                                                                                                       // 11278
			});                                                                                                                 // 11279
                                                                                                                       // 11280
		this.panels = $();                                                                                                   // 11281
                                                                                                                       // 11282
		this.anchors.each(function( i, anchor ) {                                                                            // 11283
			var selector, panel, panelId,                                                                                       // 11284
				anchorId = $( anchor ).uniqueId().attr( "id" ),                                                                    // 11285
				tab = $( anchor ).closest( "li" ),                                                                                 // 11286
				originalAriaControls = tab.attr( "aria-controls" );                                                                // 11287
                                                                                                                       // 11288
			// inline tab                                                                                                       // 11289
			if ( isLocal( anchor ) ) {                                                                                          // 11290
				selector = anchor.hash;                                                                                            // 11291
				panel = that.element.find( that._sanitizeSelector( selector ) );                                                   // 11292
			// remote tab                                                                                                       // 11293
			} else {                                                                                                            // 11294
				panelId = that._tabId( tab );                                                                                      // 11295
				selector = "#" + panelId;                                                                                          // 11296
				panel = that.element.find( selector );                                                                             // 11297
				if ( !panel.length ) {                                                                                             // 11298
					panel = that._createPanel( panelId );                                                                             // 11299
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );                                                        // 11300
				}                                                                                                                  // 11301
				panel.attr( "aria-live", "polite" );                                                                               // 11302
			}                                                                                                                   // 11303
                                                                                                                       // 11304
			if ( panel.length) {                                                                                                // 11305
				that.panels = that.panels.add( panel );                                                                            // 11306
			}                                                                                                                   // 11307
			if ( originalAriaControls ) {                                                                                       // 11308
				tab.data( "ui-tabs-aria-controls", originalAriaControls );                                                         // 11309
			}                                                                                                                   // 11310
			tab.attr({                                                                                                          // 11311
				"aria-controls": selector.substring( 1 ),                                                                          // 11312
				"aria-labelledby": anchorId                                                                                        // 11313
			});                                                                                                                 // 11314
			panel.attr( "aria-labelledby", anchorId );                                                                          // 11315
		});                                                                                                                  // 11316
                                                                                                                       // 11317
		this.panels                                                                                                          // 11318
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )                                                     // 11319
			.attr( "role", "tabpanel" );                                                                                        // 11320
	},                                                                                                                    // 11321
                                                                                                                       // 11322
	// allow overriding how to find the list for rare usage scenarios (#7715)                                             // 11323
	_getList: function() {                                                                                                // 11324
		return this.element.find( "ol,ul" ).eq( 0 );                                                                         // 11325
	},                                                                                                                    // 11326
                                                                                                                       // 11327
	_createPanel: function( id ) {                                                                                        // 11328
		return $( "<div>" )                                                                                                  // 11329
			.attr( "id", id )                                                                                                   // 11330
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )                                                     // 11331
			.data( "ui-tabs-destroy", true );                                                                                   // 11332
	},                                                                                                                    // 11333
                                                                                                                       // 11334
	_setupDisabled: function( disabled ) {                                                                                // 11335
		if ( $.isArray( disabled ) ) {                                                                                       // 11336
			if ( !disabled.length ) {                                                                                           // 11337
				disabled = false;                                                                                                  // 11338
			} else if ( disabled.length === this.anchors.length ) {                                                             // 11339
				disabled = true;                                                                                                   // 11340
			}                                                                                                                   // 11341
		}                                                                                                                    // 11342
                                                                                                                       // 11343
		// disable tabs                                                                                                      // 11344
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {                                                                // 11345
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {                                                       // 11346
				$( li )                                                                                                            // 11347
					.addClass( "ui-state-disabled" )                                                                                  // 11348
					.attr( "aria-disabled", "true" );                                                                                 // 11349
			} else {                                                                                                            // 11350
				$( li )                                                                                                            // 11351
					.removeClass( "ui-state-disabled" )                                                                               // 11352
					.removeAttr( "aria-disabled" );                                                                                   // 11353
			}                                                                                                                   // 11354
		}                                                                                                                    // 11355
                                                                                                                       // 11356
		this.options.disabled = disabled;                                                                                    // 11357
	},                                                                                                                    // 11358
                                                                                                                       // 11359
	_setupEvents: function( event ) {                                                                                     // 11360
		var events = {                                                                                                       // 11361
			click: function( event ) {                                                                                          // 11362
				event.preventDefault();                                                                                            // 11363
			}                                                                                                                   // 11364
		};                                                                                                                   // 11365
		if ( event ) {                                                                                                       // 11366
			$.each( event.split(" "), function( index, eventName ) {                                                            // 11367
				events[ eventName ] = "_eventHandler";                                                                             // 11368
			});                                                                                                                 // 11369
		}                                                                                                                    // 11370
                                                                                                                       // 11371
		this._off( this.anchors.add( this.tabs ).add( this.panels ) );                                                       // 11372
		this._on( this.anchors, events );                                                                                    // 11373
		this._on( this.tabs, { keydown: "_tabKeydown" } );                                                                   // 11374
		this._on( this.panels, { keydown: "_panelKeydown" } );                                                               // 11375
                                                                                                                       // 11376
		this._focusable( this.tabs );                                                                                        // 11377
		this._hoverable( this.tabs );                                                                                        // 11378
	},                                                                                                                    // 11379
                                                                                                                       // 11380
	_setupHeightStyle: function( heightStyle ) {                                                                          // 11381
		var maxHeight, overflow,                                                                                             // 11382
			parent = this.element.parent();                                                                                     // 11383
                                                                                                                       // 11384
		if ( heightStyle === "fill" ) {                                                                                      // 11385
			// IE 6 treats height like minHeight, so we need to turn off overflow                                               // 11386
			// in order to get a reliable height                                                                                // 11387
			// we use the minHeight support test because we assume that only                                                    // 11388
			// browsers that don't support minHeight will treat height as minHeight                                             // 11389
			if ( !$.support.minHeight ) {                                                                                       // 11390
				overflow = parent.css( "overflow" );                                                                               // 11391
				parent.css( "overflow", "hidden");                                                                                 // 11392
			}                                                                                                                   // 11393
			maxHeight = parent.height();                                                                                        // 11394
			this.element.siblings( ":visible" ).each(function() {                                                               // 11395
				var elem = $( this ),                                                                                              // 11396
					position = elem.css( "position" );                                                                                // 11397
                                                                                                                       // 11398
				if ( position === "absolute" || position === "fixed" ) {                                                           // 11399
					return;                                                                                                           // 11400
				}                                                                                                                  // 11401
				maxHeight -= elem.outerHeight( true );                                                                             // 11402
			});                                                                                                                 // 11403
			if ( overflow ) {                                                                                                   // 11404
				parent.css( "overflow", overflow );                                                                                // 11405
			}                                                                                                                   // 11406
                                                                                                                       // 11407
			this.element.children().not( this.panels ).each(function() {                                                        // 11408
				maxHeight -= $( this ).outerHeight( true );                                                                        // 11409
			});                                                                                                                 // 11410
                                                                                                                       // 11411
			this.panels.each(function() {                                                                                       // 11412
				$( this ).height( Math.max( 0, maxHeight -                                                                         // 11413
					$( this ).innerHeight() + $( this ).height() ) );                                                                 // 11414
			})                                                                                                                  // 11415
			.css( "overflow", "auto" );                                                                                         // 11416
		} else if ( heightStyle === "auto" ) {                                                                               // 11417
			maxHeight = 0;                                                                                                      // 11418
			this.panels.each(function() {                                                                                       // 11419
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );                                                // 11420
			}).height( maxHeight );                                                                                             // 11421
		}                                                                                                                    // 11422
	},                                                                                                                    // 11423
                                                                                                                       // 11424
	_eventHandler: function( event ) {                                                                                    // 11425
		var options = this.options,                                                                                          // 11426
			active = this.active,                                                                                               // 11427
			anchor = $( event.currentTarget ),                                                                                  // 11428
			tab = anchor.closest( "li" ),                                                                                       // 11429
			clickedIsActive = tab[ 0 ] === active[ 0 ],                                                                         // 11430
			collapsing = clickedIsActive && options.collapsible,                                                                // 11431
			toShow = collapsing ? $() : this._getPanelForTab( tab ),                                                            // 11432
			toHide = !active.length ? $() : this._getPanelForTab( active ),                                                     // 11433
			eventData = {                                                                                                       // 11434
				oldTab: active,                                                                                                    // 11435
				oldPanel: toHide,                                                                                                  // 11436
				newTab: collapsing ? $() : tab,                                                                                    // 11437
				newPanel: toShow                                                                                                   // 11438
			};                                                                                                                  // 11439
                                                                                                                       // 11440
		event.preventDefault();                                                                                              // 11441
                                                                                                                       // 11442
		if ( tab.hasClass( "ui-state-disabled" ) ||                                                                          // 11443
				// tab is already loading                                                                                          // 11444
				tab.hasClass( "ui-tabs-loading" ) ||                                                                               // 11445
				// can't switch durning an animation                                                                               // 11446
				this.running ||                                                                                                    // 11447
				// click on active header, but not collapsible                                                                     // 11448
				( clickedIsActive && !options.collapsible ) ||                                                                     // 11449
				// allow canceling activation                                                                                      // 11450
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {                                              // 11451
			return;                                                                                                             // 11452
		}                                                                                                                    // 11453
                                                                                                                       // 11454
		options.active = collapsing ? false : this.tabs.index( tab );                                                        // 11455
                                                                                                                       // 11456
		this.active = clickedIsActive ? $() : tab;                                                                           // 11457
		if ( this.xhr ) {                                                                                                    // 11458
			this.xhr.abort();                                                                                                   // 11459
		}                                                                                                                    // 11460
                                                                                                                       // 11461
		if ( !toHide.length && !toShow.length ) {                                                                            // 11462
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );                                                      // 11463
		}                                                                                                                    // 11464
                                                                                                                       // 11465
		if ( toShow.length ) {                                                                                               // 11466
			this.load( this.tabs.index( tab ), event );                                                                         // 11467
		}                                                                                                                    // 11468
		this._toggle( event, eventData );                                                                                    // 11469
	},                                                                                                                    // 11470
                                                                                                                       // 11471
	// handles show/hide for selecting tabs                                                                               // 11472
	_toggle: function( event, eventData ) {                                                                               // 11473
		var that = this,                                                                                                     // 11474
			toShow = eventData.newPanel,                                                                                        // 11475
			toHide = eventData.oldPanel;                                                                                        // 11476
                                                                                                                       // 11477
		this.running = true;                                                                                                 // 11478
                                                                                                                       // 11479
		function complete() {                                                                                                // 11480
			that.running = false;                                                                                               // 11481
			that._trigger( "activate", event, eventData );                                                                      // 11482
		}                                                                                                                    // 11483
                                                                                                                       // 11484
		function show() {                                                                                                    // 11485
			eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );                                      // 11486
                                                                                                                       // 11487
			if ( toShow.length && that.options.show ) {                                                                         // 11488
				that._show( toShow, that.options.show, complete );                                                                 // 11489
			} else {                                                                                                            // 11490
				toShow.show();                                                                                                     // 11491
				complete();                                                                                                        // 11492
			}                                                                                                                   // 11493
		}                                                                                                                    // 11494
                                                                                                                       // 11495
		// start out by hiding, then showing, then completing                                                                // 11496
		if ( toHide.length && this.options.hide ) {                                                                          // 11497
			this._hide( toHide, this.options.hide, function() {                                                                 // 11498
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );                                  // 11499
				show();                                                                                                            // 11500
			});                                                                                                                 // 11501
		} else {                                                                                                             // 11502
			eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );                                   // 11503
			toHide.hide();                                                                                                      // 11504
			show();                                                                                                             // 11505
		}                                                                                                                    // 11506
                                                                                                                       // 11507
		toHide.attr({                                                                                                        // 11508
			"aria-expanded": "false",                                                                                           // 11509
			"aria-hidden": "true"                                                                                               // 11510
		});                                                                                                                  // 11511
		eventData.oldTab.attr( "aria-selected", "false" );                                                                   // 11512
		// If we're switching tabs, remove the old tab from the tab order.                                                   // 11513
		// If we're opening from collapsed state, remove the previous tab from the tab order.                                // 11514
		// If we're collapsing, then keep the collapsing tab in the tab order.                                               // 11515
		if ( toShow.length && toHide.length ) {                                                                              // 11516
			eventData.oldTab.attr( "tabIndex", -1 );                                                                            // 11517
		} else if ( toShow.length ) {                                                                                        // 11518
			this.tabs.filter(function() {                                                                                       // 11519
				return $( this ).attr( "tabIndex" ) === 0;                                                                         // 11520
			})                                                                                                                  // 11521
			.attr( "tabIndex", -1 );                                                                                            // 11522
		}                                                                                                                    // 11523
                                                                                                                       // 11524
		toShow.attr({                                                                                                        // 11525
			"aria-expanded": "true",                                                                                            // 11526
			"aria-hidden": "false"                                                                                              // 11527
		});                                                                                                                  // 11528
		eventData.newTab.attr({                                                                                              // 11529
			"aria-selected": "true",                                                                                            // 11530
			tabIndex: 0                                                                                                         // 11531
		});                                                                                                                  // 11532
	},                                                                                                                    // 11533
                                                                                                                       // 11534
	_activate: function( index ) {                                                                                        // 11535
		var anchor,                                                                                                          // 11536
			active = this._findActive( index );                                                                                 // 11537
                                                                                                                       // 11538
		// trying to activate the already active panel                                                                       // 11539
		if ( active[ 0 ] === this.active[ 0 ] ) {                                                                            // 11540
			return;                                                                                                             // 11541
		}                                                                                                                    // 11542
                                                                                                                       // 11543
		// trying to collapse, simulate a click on the current active header                                                 // 11544
		if ( !active.length ) {                                                                                              // 11545
			active = this.active;                                                                                               // 11546
		}                                                                                                                    // 11547
                                                                                                                       // 11548
		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];                                                                      // 11549
		this._eventHandler({                                                                                                 // 11550
			target: anchor,                                                                                                     // 11551
			currentTarget: anchor,                                                                                              // 11552
			preventDefault: $.noop                                                                                              // 11553
		});                                                                                                                  // 11554
	},                                                                                                                    // 11555
                                                                                                                       // 11556
	_findActive: function( index ) {                                                                                      // 11557
		return index === false ? $() : this.tabs.eq( index );                                                                // 11558
	},                                                                                                                    // 11559
                                                                                                                       // 11560
	_getIndex: function( index ) {                                                                                        // 11561
		// meta-function to give users option to provide a href string instead of a numerical index.                         // 11562
		if ( typeof index === "string" ) {                                                                                   // 11563
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );                                     // 11564
		}                                                                                                                    // 11565
                                                                                                                       // 11566
		return index;                                                                                                        // 11567
	},                                                                                                                    // 11568
                                                                                                                       // 11569
	_destroy: function() {                                                                                                // 11570
		if ( this.xhr ) {                                                                                                    // 11571
			this.xhr.abort();                                                                                                   // 11572
		}                                                                                                                    // 11573
                                                                                                                       // 11574
		this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );                 // 11575
                                                                                                                       // 11576
		this.tablist                                                                                                         // 11577
			.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )                     // 11578
			.removeAttr( "role" );                                                                                              // 11579
                                                                                                                       // 11580
		this.anchors                                                                                                         // 11581
			.removeClass( "ui-tabs-anchor" )                                                                                    // 11582
			.removeAttr( "role" )                                                                                               // 11583
			.removeAttr( "tabIndex" )                                                                                           // 11584
			.removeData( "href.tabs" )                                                                                          // 11585
			.removeData( "load.tabs" )                                                                                          // 11586
			.removeUniqueId();                                                                                                  // 11587
                                                                                                                       // 11588
		this.tabs.add( this.panels ).each(function() {                                                                       // 11589
			if ( $.data( this, "ui-tabs-destroy" ) ) {                                                                          // 11590
				$( this ).remove();                                                                                                // 11591
			} else {                                                                                                            // 11592
				$( this )                                                                                                          // 11593
					.removeClass( "ui-state-default ui-state-active ui-state-disabled " +                                             // 11594
						"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )                                // 11595
					.removeAttr( "tabIndex" )                                                                                         // 11596
					.removeAttr( "aria-live" )                                                                                        // 11597
					.removeAttr( "aria-busy" )                                                                                        // 11598
					.removeAttr( "aria-selected" )                                                                                    // 11599
					.removeAttr( "aria-labelledby" )                                                                                  // 11600
					.removeAttr( "aria-hidden" )                                                                                      // 11601
					.removeAttr( "aria-expanded" )                                                                                    // 11602
					.removeAttr( "role" );                                                                                            // 11603
			}                                                                                                                   // 11604
		});                                                                                                                  // 11605
                                                                                                                       // 11606
		this.tabs.each(function() {                                                                                          // 11607
			var li = $( this ),                                                                                                 // 11608
				prev = li.data( "ui-tabs-aria-controls" );                                                                         // 11609
			if ( prev ) {                                                                                                       // 11610
				li.attr( "aria-controls", prev );                                                                                  // 11611
			} else {                                                                                                            // 11612
				li.removeAttr( "aria-controls" );                                                                                  // 11613
			}                                                                                                                   // 11614
		});                                                                                                                  // 11615
                                                                                                                       // 11616
		this.panels.show();                                                                                                  // 11617
                                                                                                                       // 11618
		if ( this.options.heightStyle !== "content" ) {                                                                      // 11619
			this.panels.css( "height", "" );                                                                                    // 11620
		}                                                                                                                    // 11621
	},                                                                                                                    // 11622
                                                                                                                       // 11623
	enable: function( index ) {                                                                                           // 11624
		var disabled = this.options.disabled;                                                                                // 11625
		if ( disabled === false ) {                                                                                          // 11626
			return;                                                                                                             // 11627
		}                                                                                                                    // 11628
                                                                                                                       // 11629
		if ( index === undefined ) {                                                                                         // 11630
			disabled = false;                                                                                                   // 11631
		} else {                                                                                                             // 11632
			index = this._getIndex( index );                                                                                    // 11633
			if ( $.isArray( disabled ) ) {                                                                                      // 11634
				disabled = $.map( disabled, function( num ) {                                                                      // 11635
					return num !== index ? num : null;                                                                                // 11636
				});                                                                                                                // 11637
			} else {                                                                                                            // 11638
				disabled = $.map( this.tabs, function( li, num ) {                                                                 // 11639
					return num !== index ? num : null;                                                                                // 11640
				});                                                                                                                // 11641
			}                                                                                                                   // 11642
		}                                                                                                                    // 11643
		this._setupDisabled( disabled );                                                                                     // 11644
	},                                                                                                                    // 11645
                                                                                                                       // 11646
	disable: function( index ) {                                                                                          // 11647
		var disabled = this.options.disabled;                                                                                // 11648
		if ( disabled === true ) {                                                                                           // 11649
			return;                                                                                                             // 11650
		}                                                                                                                    // 11651
                                                                                                                       // 11652
		if ( index === undefined ) {                                                                                         // 11653
			disabled = true;                                                                                                    // 11654
		} else {                                                                                                             // 11655
			index = this._getIndex( index );                                                                                    // 11656
			if ( $.inArray( index, disabled ) !== -1 ) {                                                                        // 11657
				return;                                                                                                            // 11658
			}                                                                                                                   // 11659
			if ( $.isArray( disabled ) ) {                                                                                      // 11660
				disabled = $.merge( [ index ], disabled ).sort();                                                                  // 11661
			} else {                                                                                                            // 11662
				disabled = [ index ];                                                                                              // 11663
			}                                                                                                                   // 11664
		}                                                                                                                    // 11665
		this._setupDisabled( disabled );                                                                                     // 11666
	},                                                                                                                    // 11667
                                                                                                                       // 11668
	load: function( index, event ) {                                                                                      // 11669
		index = this._getIndex( index );                                                                                     // 11670
		var that = this,                                                                                                     // 11671
			tab = this.tabs.eq( index ),                                                                                        // 11672
			anchor = tab.find( ".ui-tabs-anchor" ),                                                                             // 11673
			panel = this._getPanelForTab( tab ),                                                                                // 11674
			eventData = {                                                                                                       // 11675
				tab: tab,                                                                                                          // 11676
				panel: panel                                                                                                       // 11677
			};                                                                                                                  // 11678
                                                                                                                       // 11679
		// not remote                                                                                                        // 11680
		if ( isLocal( anchor[ 0 ] ) ) {                                                                                      // 11681
			return;                                                                                                             // 11682
		}                                                                                                                    // 11683
                                                                                                                       // 11684
		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );                                                 // 11685
                                                                                                                       // 11686
		// support: jQuery <1.8                                                                                              // 11687
		// jQuery <1.8 returns false if the request is canceled in beforeSend,                                               // 11688
		// but as of 1.8, $.ajax() always returns a jqXHR object.                                                            // 11689
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {                                                              // 11690
			tab.addClass( "ui-tabs-loading" );                                                                                  // 11691
			panel.attr( "aria-busy", "true" );                                                                                  // 11692
                                                                                                                       // 11693
			this.xhr                                                                                                            // 11694
				.success(function( response ) {                                                                                    // 11695
					// support: jQuery <1.8                                                                                           // 11696
					// http://bugs.jquery.com/ticket/11778                                                                            // 11697
					setTimeout(function() {                                                                                           // 11698
						panel.html( response );                                                                                          // 11699
						that._trigger( "load", event, eventData );                                                                       // 11700
					}, 1 );                                                                                                           // 11701
				})                                                                                                                 // 11702
				.complete(function( jqXHR, status ) {                                                                              // 11703
					// support: jQuery <1.8                                                                                           // 11704
					// http://bugs.jquery.com/ticket/11778                                                                            // 11705
					setTimeout(function() {                                                                                           // 11706
						if ( status === "abort" ) {                                                                                      // 11707
							that.panels.stop( false, true );                                                                                // 11708
						}                                                                                                                // 11709
                                                                                                                       // 11710
						tab.removeClass( "ui-tabs-loading" );                                                                            // 11711
						panel.removeAttr( "aria-busy" );                                                                                 // 11712
                                                                                                                       // 11713
						if ( jqXHR === that.xhr ) {                                                                                      // 11714
							delete that.xhr;                                                                                                // 11715
						}                                                                                                                // 11716
					}, 1 );                                                                                                           // 11717
				});                                                                                                                // 11718
		}                                                                                                                    // 11719
	},                                                                                                                    // 11720
                                                                                                                       // 11721
	// TODO: Remove this function in 1.10 when ajaxOptions is removed                                                     // 11722
	_ajaxSettings: function( anchor, event, eventData ) {                                                                 // 11723
		var that = this;                                                                                                     // 11724
		return {                                                                                                             // 11725
			url: anchor.attr( "href" ),                                                                                         // 11726
			beforeSend: function( jqXHR, settings ) {                                                                           // 11727
				return that._trigger( "beforeLoad", event,                                                                         // 11728
					$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );                                               // 11729
			}                                                                                                                   // 11730
		};                                                                                                                   // 11731
	},                                                                                                                    // 11732
                                                                                                                       // 11733
	_getPanelForTab: function( tab ) {                                                                                    // 11734
		var id = $( tab ).attr( "aria-controls" );                                                                           // 11735
		return this.element.find( this._sanitizeSelector( "#" + id ) );                                                      // 11736
	}                                                                                                                     // 11737
});                                                                                                                    // 11738
                                                                                                                       // 11739
// DEPRECATED                                                                                                          // 11740
if ( $.uiBackCompat !== false ) {                                                                                      // 11741
                                                                                                                       // 11742
	// helper method for a lot of the back compat extensions                                                              // 11743
	$.ui.tabs.prototype._ui = function( tab, panel ) {                                                                    // 11744
		return {                                                                                                             // 11745
			tab: tab,                                                                                                           // 11746
			panel: panel,                                                                                                       // 11747
			index: this.anchors.index( tab )                                                                                    // 11748
		};                                                                                                                   // 11749
	};                                                                                                                    // 11750
                                                                                                                       // 11751
	// url method                                                                                                         // 11752
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11753
		url: function( index, url ) {                                                                                        // 11754
			this.anchors.eq( index ).attr( "href", url );                                                                       // 11755
		}                                                                                                                    // 11756
	});                                                                                                                   // 11757
                                                                                                                       // 11758
	// TODO: Remove _ajaxSettings() method when removing this extension                                                   // 11759
	// ajaxOptions and cache options                                                                                      // 11760
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11761
		options: {                                                                                                           // 11762
			ajaxOptions: null,                                                                                                  // 11763
			cache: false                                                                                                        // 11764
		},                                                                                                                   // 11765
                                                                                                                       // 11766
		_create: function() {                                                                                                // 11767
			this._super();                                                                                                      // 11768
                                                                                                                       // 11769
			var that = this;                                                                                                    // 11770
                                                                                                                       // 11771
			this._on({ tabsbeforeload: function( event, ui ) {                                                                  // 11772
				// tab is already cached                                                                                           // 11773
				if ( $.data( ui.tab[ 0 ], "cache.tabs" ) ) {                                                                       // 11774
					event.preventDefault();                                                                                           // 11775
					return;                                                                                                           // 11776
				}                                                                                                                  // 11777
                                                                                                                       // 11778
				ui.jqXHR.success(function() {                                                                                      // 11779
					if ( that.options.cache ) {                                                                                       // 11780
						$.data( ui.tab[ 0 ], "cache.tabs", true );                                                                       // 11781
					}                                                                                                                 // 11782
				});                                                                                                                // 11783
			}});                                                                                                                // 11784
		},                                                                                                                   // 11785
                                                                                                                       // 11786
		_ajaxSettings: function( anchor, event, ui ) {                                                                       // 11787
			var ajaxOptions = this.options.ajaxOptions;                                                                         // 11788
			return $.extend( {}, ajaxOptions, {                                                                                 // 11789
				error: function( xhr, status ) {                                                                                   // 11790
					try {                                                                                                             // 11791
						// Passing index avoid a race condition when this method is                                                      // 11792
						// called after the user has selected another tab.                                                               // 11793
						// Pass the anchor that initiated this request allows                                                            // 11794
						// loadError to manipulate the tab content panel via $(a.hash)                                                   // 11795
						ajaxOptions.error(                                                                                               // 11796
							xhr, status, ui.tab.closest( "li" ).index(), ui.tab[ 0 ] );                                                     // 11797
					}                                                                                                                 // 11798
					catch ( error ) {}                                                                                                // 11799
				}                                                                                                                  // 11800
			}, this._superApply( arguments ) );                                                                                 // 11801
		},                                                                                                                   // 11802
                                                                                                                       // 11803
		_setOption: function( key, value ) {                                                                                 // 11804
			// reset cache if switching from cached to not cached                                                               // 11805
			if ( key === "cache" && value === false ) {                                                                         // 11806
				this.anchors.removeData( "cache.tabs" );                                                                           // 11807
			}                                                                                                                   // 11808
			this._super( key, value );                                                                                          // 11809
		},                                                                                                                   // 11810
                                                                                                                       // 11811
		_destroy: function() {                                                                                               // 11812
			this.anchors.removeData( "cache.tabs" );                                                                            // 11813
			this._super();                                                                                                      // 11814
		},                                                                                                                   // 11815
                                                                                                                       // 11816
		url: function( index ){                                                                                              // 11817
			this.anchors.eq( index ).removeData( "cache.tabs" );                                                                // 11818
			this._superApply( arguments );                                                                                      // 11819
		}                                                                                                                    // 11820
	});                                                                                                                   // 11821
                                                                                                                       // 11822
	// abort method                                                                                                       // 11823
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11824
		abort: function() {                                                                                                  // 11825
			if ( this.xhr ) {                                                                                                   // 11826
				this.xhr.abort();                                                                                                  // 11827
			}                                                                                                                   // 11828
		}                                                                                                                    // 11829
	});                                                                                                                   // 11830
                                                                                                                       // 11831
	// spinner                                                                                                            // 11832
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11833
		options: {                                                                                                           // 11834
			spinner: "<em>Loading&#8230;</em>"                                                                                  // 11835
		},                                                                                                                   // 11836
		_create: function() {                                                                                                // 11837
			this._super();                                                                                                      // 11838
			this._on({                                                                                                          // 11839
				tabsbeforeload: function( event, ui ) {                                                                            // 11840
					// Don't react to nested tabs or tabs that don't use a spinner                                                    // 11841
					if ( event.target !== this.element[ 0 ] ||                                                                        // 11842
							!this.options.spinner ) {                                                                                       // 11843
						return;                                                                                                          // 11844
					}                                                                                                                 // 11845
                                                                                                                       // 11846
					var span = ui.tab.find( "span" ),                                                                                 // 11847
						html = span.html();                                                                                              // 11848
					span.html( this.options.spinner );                                                                                // 11849
					ui.jqXHR.complete(function() {                                                                                    // 11850
						span.html( html );                                                                                               // 11851
					});                                                                                                               // 11852
				}                                                                                                                  // 11853
			});                                                                                                                 // 11854
		}                                                                                                                    // 11855
	});                                                                                                                   // 11856
                                                                                                                       // 11857
	// enable/disable events                                                                                              // 11858
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11859
		options: {                                                                                                           // 11860
			enable: null,                                                                                                       // 11861
			disable: null                                                                                                       // 11862
		},                                                                                                                   // 11863
                                                                                                                       // 11864
		enable: function( index ) {                                                                                          // 11865
			var options = this.options,                                                                                         // 11866
				trigger;                                                                                                           // 11867
                                                                                                                       // 11868
			if ( index && options.disabled === true ||                                                                          // 11869
					( $.isArray( options.disabled ) && $.inArray( index, options.disabled ) !== -1 ) ) {                              // 11870
				trigger = true;                                                                                                    // 11871
			}                                                                                                                   // 11872
                                                                                                                       // 11873
			this._superApply( arguments );                                                                                      // 11874
                                                                                                                       // 11875
			if ( trigger ) {                                                                                                    // 11876
				this._trigger( "enable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );                          // 11877
			}                                                                                                                   // 11878
		},                                                                                                                   // 11879
                                                                                                                       // 11880
		disable: function( index ) {                                                                                         // 11881
			var options = this.options,                                                                                         // 11882
				trigger;                                                                                                           // 11883
                                                                                                                       // 11884
			if ( index && options.disabled === false ||                                                                         // 11885
					( $.isArray( options.disabled ) && $.inArray( index, options.disabled ) === -1 ) ) {                              // 11886
				trigger = true;                                                                                                    // 11887
			}                                                                                                                   // 11888
                                                                                                                       // 11889
			this._superApply( arguments );                                                                                      // 11890
                                                                                                                       // 11891
			if ( trigger ) {                                                                                                    // 11892
				this._trigger( "disable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );                         // 11893
			}                                                                                                                   // 11894
		}                                                                                                                    // 11895
	});                                                                                                                   // 11896
                                                                                                                       // 11897
	// add/remove methods and events                                                                                      // 11898
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11899
		options: {                                                                                                           // 11900
			add: null,                                                                                                          // 11901
			remove: null,                                                                                                       // 11902
			tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"                                                 // 11903
		},                                                                                                                   // 11904
                                                                                                                       // 11905
		add: function( url, label, index ) {                                                                                 // 11906
			if ( index === undefined ) {                                                                                        // 11907
				index = this.anchors.length;                                                                                       // 11908
			}                                                                                                                   // 11909
                                                                                                                       // 11910
			var doInsertAfter, panel,                                                                                           // 11911
				options = this.options,                                                                                            // 11912
				li = $( options.tabTemplate                                                                                        // 11913
					.replace( /#\{href\}/g, url )                                                                                     // 11914
					.replace( /#\{label\}/g, label ) ),                                                                               // 11915
				id = !url.indexOf( "#" ) ?                                                                                         // 11916
					url.replace( "#", "" ) :                                                                                          // 11917
					this._tabId( li );                                                                                                // 11918
                                                                                                                       // 11919
			li.addClass( "ui-state-default ui-corner-top" ).data( "ui-tabs-destroy", true );                                    // 11920
			li.attr( "aria-controls", id );                                                                                     // 11921
                                                                                                                       // 11922
			doInsertAfter = index >= this.tabs.length;                                                                          // 11923
                                                                                                                       // 11924
			// try to find an existing element before creating a new one                                                        // 11925
			panel = this.element.find( "#" + id );                                                                              // 11926
			if ( !panel.length ) {                                                                                              // 11927
				panel = this._createPanel( id );                                                                                   // 11928
				if ( doInsertAfter ) {                                                                                             // 11929
					if ( index > 0 ) {                                                                                                // 11930
						panel.insertAfter( this.panels.eq( -1 ) );                                                                       // 11931
					} else {                                                                                                          // 11932
						panel.appendTo( this.element );                                                                                  // 11933
					}                                                                                                                 // 11934
				} else {                                                                                                           // 11935
					panel.insertBefore( this.panels[ index ] );                                                                       // 11936
				}                                                                                                                  // 11937
			}                                                                                                                   // 11938
			panel.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" ).hide();                                        // 11939
                                                                                                                       // 11940
			if ( doInsertAfter ) {                                                                                              // 11941
				li.appendTo( this.tablist );                                                                                       // 11942
			} else {                                                                                                            // 11943
				li.insertBefore( this.tabs[ index ] );                                                                             // 11944
			}                                                                                                                   // 11945
                                                                                                                       // 11946
			options.disabled = $.map( options.disabled, function( n ) {                                                         // 11947
				return n >= index ? ++n : n;                                                                                       // 11948
			});                                                                                                                 // 11949
                                                                                                                       // 11950
			this.refresh();                                                                                                     // 11951
			if ( this.tabs.length === 1 && options.active === false ) {                                                         // 11952
				this.option( "active", 0 );                                                                                        // 11953
			}                                                                                                                   // 11954
                                                                                                                       // 11955
			this._trigger( "add", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );                              // 11956
			return this;                                                                                                        // 11957
		},                                                                                                                   // 11958
                                                                                                                       // 11959
		remove: function( index ) {                                                                                          // 11960
			index = this._getIndex( index );                                                                                    // 11961
			var options = this.options,                                                                                         // 11962
				tab = this.tabs.eq( index ).remove(),                                                                              // 11963
				panel = this._getPanelForTab( tab ).remove();                                                                      // 11964
                                                                                                                       // 11965
			// If selected tab was removed focus tab to the right or                                                            // 11966
			// in case the last tab was removed the tab to the left.                                                            // 11967
			// We check for more than 2 tabs, because if there are only 2,                                                      // 11968
			// then when we remove this tab, there will only be one tab left                                                    // 11969
			// so we don't need to detect which tab to activate.                                                                // 11970
			if ( tab.hasClass( "ui-tabs-active" ) && this.anchors.length > 2 ) {                                                // 11971
				this._activate( index + ( index + 1 < this.anchors.length ? 1 : -1 ) );                                            // 11972
			}                                                                                                                   // 11973
                                                                                                                       // 11974
			options.disabled = $.map(                                                                                           // 11975
				$.grep( options.disabled, function( n ) {                                                                          // 11976
					return n !== index;                                                                                               // 11977
				}),                                                                                                                // 11978
				function( n ) {                                                                                                    // 11979
					return n >= index ? --n : n;                                                                                      // 11980
				});                                                                                                                // 11981
                                                                                                                       // 11982
			this.refresh();                                                                                                     // 11983
                                                                                                                       // 11984
			this._trigger( "remove", null, this._ui( tab.find( "a" )[ 0 ], panel[ 0 ] ) );                                      // 11985
			return this;                                                                                                        // 11986
		}                                                                                                                    // 11987
	});                                                                                                                   // 11988
                                                                                                                       // 11989
	// length method                                                                                                      // 11990
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11991
		length: function() {                                                                                                 // 11992
			return this.anchors.length;                                                                                         // 11993
		}                                                                                                                    // 11994
	});                                                                                                                   // 11995
                                                                                                                       // 11996
	// panel ids (idPrefix option + title attribute)                                                                      // 11997
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 11998
		options: {                                                                                                           // 11999
			idPrefix: "ui-tabs-"                                                                                                // 12000
		},                                                                                                                   // 12001
                                                                                                                       // 12002
		_tabId: function( tab ) {                                                                                            // 12003
			var a = tab.is( "li" ) ? tab.find( "a[href]" ) : tab;                                                               // 12004
			a = a[0];                                                                                                           // 12005
			return $( a ).closest( "li" ).attr( "aria-controls" ) ||                                                            // 12006
				a.title && a.title.replace( /\s/g, "_" ).replace( /[^\w\u00c0-\uFFFF\-]/g, "" ) ||                                 // 12007
				this.options.idPrefix + getNextTabId();                                                                            // 12008
		}                                                                                                                    // 12009
	});                                                                                                                   // 12010
                                                                                                                       // 12011
	// _createPanel method                                                                                                // 12012
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12013
		options: {                                                                                                           // 12014
			panelTemplate: "<div></div>"                                                                                        // 12015
		},                                                                                                                   // 12016
                                                                                                                       // 12017
		_createPanel: function( id ) {                                                                                       // 12018
			return $( this.options.panelTemplate )                                                                              // 12019
				.attr( "id", id )                                                                                                  // 12020
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )                                                    // 12021
				.data( "ui-tabs-destroy", true );                                                                                  // 12022
		}                                                                                                                    // 12023
	});                                                                                                                   // 12024
                                                                                                                       // 12025
	// selected option                                                                                                    // 12026
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12027
		_create: function() {                                                                                                // 12028
			var options = this.options;                                                                                         // 12029
			if ( options.active === null && options.selected !== undefined ) {                                                  // 12030
				options.active = options.selected === -1 ? false : options.selected;                                               // 12031
			}                                                                                                                   // 12032
			this._super();                                                                                                      // 12033
			options.selected = options.active;                                                                                  // 12034
			if ( options.selected === false ) {                                                                                 // 12035
				options.selected = -1;                                                                                             // 12036
			}                                                                                                                   // 12037
		},                                                                                                                   // 12038
                                                                                                                       // 12039
		_setOption: function( key, value ) {                                                                                 // 12040
			if ( key !== "selected" ) {                                                                                         // 12041
				return this._super( key, value );                                                                                  // 12042
			}                                                                                                                   // 12043
                                                                                                                       // 12044
			var options = this.options;                                                                                         // 12045
			this._super( "active", value === -1 ? false : value );                                                              // 12046
			options.selected = options.active;                                                                                  // 12047
			if ( options.selected === false ) {                                                                                 // 12048
				options.selected = -1;                                                                                             // 12049
			}                                                                                                                   // 12050
		},                                                                                                                   // 12051
                                                                                                                       // 12052
		_eventHandler: function() {                                                                                          // 12053
			this._superApply( arguments );                                                                                      // 12054
			this.options.selected = this.options.active;                                                                        // 12055
			if ( this.options.selected === false ) {                                                                            // 12056
				this.options.selected = -1;                                                                                        // 12057
			}                                                                                                                   // 12058
		}                                                                                                                    // 12059
	});                                                                                                                   // 12060
                                                                                                                       // 12061
	// show and select event                                                                                              // 12062
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12063
		options: {                                                                                                           // 12064
			show: null,                                                                                                         // 12065
			select: null                                                                                                        // 12066
		},                                                                                                                   // 12067
		_create: function() {                                                                                                // 12068
			this._super();                                                                                                      // 12069
			if ( this.options.active !== false ) {                                                                              // 12070
				this._trigger( "show", null, this._ui(                                                                             // 12071
					this.active.find( ".ui-tabs-anchor" )[ 0 ],                                                                       // 12072
					this._getPanelForTab( this.active )[ 0 ] ) );                                                                     // 12073
			}                                                                                                                   // 12074
		},                                                                                                                   // 12075
		_trigger: function( type, event, data ) {                                                                            // 12076
			var tab, panel,                                                                                                     // 12077
				ret = this._superApply( arguments );                                                                               // 12078
                                                                                                                       // 12079
			if ( !ret ) {                                                                                                       // 12080
				return false;                                                                                                      // 12081
			}                                                                                                                   // 12082
                                                                                                                       // 12083
			if ( type === "beforeActivate" ) {                                                                                  // 12084
				tab = data.newTab.length ? data.newTab : data.oldTab;                                                              // 12085
				panel = data.newPanel.length ? data.newPanel : data.oldPanel;                                                      // 12086
				ret = this._super( "select", event, {                                                                              // 12087
					tab: tab.find( ".ui-tabs-anchor" )[ 0],                                                                           // 12088
					panel: panel[ 0 ],                                                                                                // 12089
					index: tab.closest( "li" ).index()                                                                                // 12090
				});                                                                                                                // 12091
			} else if ( type === "activate" && data.newTab.length ) {                                                           // 12092
				ret = this._super( "show", event, {                                                                                // 12093
					tab: data.newTab.find( ".ui-tabs-anchor" )[ 0 ],                                                                  // 12094
					panel: data.newPanel[ 0 ],                                                                                        // 12095
					index: data.newTab.closest( "li" ).index()                                                                        // 12096
				});                                                                                                                // 12097
			}                                                                                                                   // 12098
			return ret;                                                                                                         // 12099
		}                                                                                                                    // 12100
	});                                                                                                                   // 12101
                                                                                                                       // 12102
	// select method                                                                                                      // 12103
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12104
		select: function( index ) {                                                                                          // 12105
			index = this._getIndex( index );                                                                                    // 12106
			if ( index === -1 ) {                                                                                               // 12107
				if ( this.options.collapsible && this.options.selected !== -1 ) {                                                  // 12108
					index = this.options.selected;                                                                                    // 12109
				} else {                                                                                                           // 12110
					return;                                                                                                           // 12111
				}                                                                                                                  // 12112
			}                                                                                                                   // 12113
			this.anchors.eq( index ).trigger( this.options.event + this.eventNamespace );                                       // 12114
		}                                                                                                                    // 12115
	});                                                                                                                   // 12116
                                                                                                                       // 12117
	// cookie option                                                                                                      // 12118
	(function() {                                                                                                         // 12119
                                                                                                                       // 12120
	var listId = 0;                                                                                                       // 12121
                                                                                                                       // 12122
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12123
		options: {                                                                                                           // 12124
			cookie: null // e.g. { expires: 7, path: '/', domain: 'jquery.com', secure: true }                                  // 12125
		},                                                                                                                   // 12126
		_create: function() {                                                                                                // 12127
			var options = this.options,                                                                                         // 12128
				active;                                                                                                            // 12129
			if ( options.active == null && options.cookie ) {                                                                   // 12130
				active = parseInt( this._cookie(), 10 );                                                                           // 12131
				if ( active === -1 ) {                                                                                             // 12132
					active = false;                                                                                                   // 12133
				}                                                                                                                  // 12134
				options.active = active;                                                                                           // 12135
			}                                                                                                                   // 12136
			this._super();                                                                                                      // 12137
		},                                                                                                                   // 12138
		_cookie: function( active ) {                                                                                        // 12139
			var cookie = [ this.cookie ||                                                                                       // 12140
				( this.cookie = this.options.cookie.name || "ui-tabs-" + (++listId) ) ];                                           // 12141
			if ( arguments.length ) {                                                                                           // 12142
				cookie.push( active === false ? -1 : active );                                                                     // 12143
				cookie.push( this.options.cookie );                                                                                // 12144
			}                                                                                                                   // 12145
			return $.cookie.apply( null, cookie );                                                                              // 12146
		},                                                                                                                   // 12147
		_refresh: function() {                                                                                               // 12148
			this._super();                                                                                                      // 12149
			if ( this.options.cookie ) {                                                                                        // 12150
				this._cookie( this.options.active, this.options.cookie );                                                          // 12151
			}                                                                                                                   // 12152
		},                                                                                                                   // 12153
		_eventHandler: function() {                                                                                          // 12154
			this._superApply( arguments );                                                                                      // 12155
			if ( this.options.cookie ) {                                                                                        // 12156
				this._cookie( this.options.active, this.options.cookie );                                                          // 12157
			}                                                                                                                   // 12158
		},                                                                                                                   // 12159
		_destroy: function() {                                                                                               // 12160
			this._super();                                                                                                      // 12161
			if ( this.options.cookie ) {                                                                                        // 12162
				this._cookie( null, this.options.cookie );                                                                         // 12163
			}                                                                                                                   // 12164
		}                                                                                                                    // 12165
	});                                                                                                                   // 12166
                                                                                                                       // 12167
	})();                                                                                                                 // 12168
                                                                                                                       // 12169
	// load event                                                                                                         // 12170
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12171
		_trigger: function( type, event, data ) {                                                                            // 12172
			var _data = $.extend( {}, data );                                                                                   // 12173
			if ( type === "load" ) {                                                                                            // 12174
				_data.panel = _data.panel[ 0 ];                                                                                    // 12175
				_data.tab = _data.tab.find( ".ui-tabs-anchor" )[ 0 ];                                                              // 12176
			}                                                                                                                   // 12177
			return this._super( type, event, _data );                                                                           // 12178
		}                                                                                                                    // 12179
	});                                                                                                                   // 12180
                                                                                                                       // 12181
	// fx option                                                                                                          // 12182
	// The new animation options (show, hide) conflict with the old show callback.                                        // 12183
	// The old fx option wins over show/hide anyway (always favor back-compat).                                           // 12184
	// If a user wants to use the new animation API, they must give up the old API.                                       // 12185
	$.widget( "ui.tabs", $.ui.tabs, {                                                                                     // 12186
		options: {                                                                                                           // 12187
			fx: null // e.g. { height: "toggle", opacity: "toggle", duration: 200 }                                             // 12188
		},                                                                                                                   // 12189
                                                                                                                       // 12190
		_getFx: function() {                                                                                                 // 12191
			var hide, show,                                                                                                     // 12192
				fx = this.options.fx;                                                                                              // 12193
                                                                                                                       // 12194
			if ( fx ) {                                                                                                         // 12195
				if ( $.isArray( fx ) ) {                                                                                           // 12196
					hide = fx[ 0 ];                                                                                                   // 12197
					show = fx[ 1 ];                                                                                                   // 12198
				} else {                                                                                                           // 12199
					hide = show = fx;                                                                                                 // 12200
				}                                                                                                                  // 12201
			}                                                                                                                   // 12202
                                                                                                                       // 12203
			return fx ? { show: show, hide: hide } : null;                                                                      // 12204
		},                                                                                                                   // 12205
                                                                                                                       // 12206
		_toggle: function( event, eventData ) {                                                                              // 12207
			var that = this,                                                                                                    // 12208
				toShow = eventData.newPanel,                                                                                       // 12209
				toHide = eventData.oldPanel,                                                                                       // 12210
				fx = this._getFx();                                                                                                // 12211
                                                                                                                       // 12212
			if ( !fx ) {                                                                                                        // 12213
				return this._super( event, eventData );                                                                            // 12214
			}                                                                                                                   // 12215
                                                                                                                       // 12216
			that.running = true;                                                                                                // 12217
                                                                                                                       // 12218
			function complete() {                                                                                               // 12219
				that.running = false;                                                                                              // 12220
				that._trigger( "activate", event, eventData );                                                                     // 12221
			}                                                                                                                   // 12222
                                                                                                                       // 12223
			function show() {                                                                                                   // 12224
				eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );                                     // 12225
                                                                                                                       // 12226
				if ( toShow.length && fx.show ) {                                                                                  // 12227
					toShow                                                                                                            // 12228
						.animate( fx.show, fx.show.duration, function() {                                                                // 12229
							complete();                                                                                                     // 12230
						});                                                                                                              // 12231
				} else {                                                                                                           // 12232
					toShow.show();                                                                                                    // 12233
					complete();                                                                                                       // 12234
				}                                                                                                                  // 12235
			}                                                                                                                   // 12236
                                                                                                                       // 12237
			// start out by hiding, then showing, then completing                                                               // 12238
			if ( toHide.length && fx.hide ) {                                                                                   // 12239
				toHide.animate( fx.hide, fx.hide.duration, function() {                                                            // 12240
					eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );                                 // 12241
					show();                                                                                                           // 12242
				});                                                                                                                // 12243
			} else {                                                                                                            // 12244
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );                                  // 12245
				toHide.hide();                                                                                                     // 12246
				show();                                                                                                            // 12247
			}                                                                                                                   // 12248
		}                                                                                                                    // 12249
	});                                                                                                                   // 12250
}                                                                                                                      // 12251
                                                                                                                       // 12252
})( jQuery );                                                                                                          // 12253
(function( $ ) {                                                                                                       // 12254
                                                                                                                       // 12255
var increments = 0;                                                                                                    // 12256
                                                                                                                       // 12257
function addDescribedBy( elem, id ) {                                                                                  // 12258
	var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );                                             // 12259
	describedby.push( id );                                                                                               // 12260
	elem                                                                                                                  // 12261
		.data( "ui-tooltip-id", id )                                                                                         // 12262
		.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );                                                      // 12263
}                                                                                                                      // 12264
                                                                                                                       // 12265
function removeDescribedBy( elem ) {                                                                                   // 12266
	var id = elem.data( "ui-tooltip-id" ),                                                                                // 12267
		describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),                                                // 12268
		index = $.inArray( id, describedby );                                                                                // 12269
	if ( index !== -1 ) {                                                                                                 // 12270
		describedby.splice( index, 1 );                                                                                      // 12271
	}                                                                                                                     // 12272
                                                                                                                       // 12273
	elem.removeData( "ui-tooltip-id" );                                                                                   // 12274
	describedby = $.trim( describedby.join( " " ) );                                                                      // 12275
	if ( describedby ) {                                                                                                  // 12276
		elem.attr( "aria-describedby", describedby );                                                                        // 12277
	} else {                                                                                                              // 12278
		elem.removeAttr( "aria-describedby" );                                                                               // 12279
	}                                                                                                                     // 12280
}                                                                                                                      // 12281
                                                                                                                       // 12282
$.widget( "ui.tooltip", {                                                                                              // 12283
	version: "1.9.2",                                                                                                     // 12284
	options: {                                                                                                            // 12285
		content: function() {                                                                                                // 12286
			return $( this ).attr( "title" );                                                                                   // 12287
		},                                                                                                                   // 12288
		hide: true,                                                                                                          // 12289
		// Disabled elements have inconsistent behavior across browsers (#8661)                                              // 12290
		items: "[title]:not([disabled])",                                                                                    // 12291
		position: {                                                                                                          // 12292
			my: "left top+15",                                                                                                  // 12293
			at: "left bottom",                                                                                                  // 12294
			collision: "flipfit flip"                                                                                           // 12295
		},                                                                                                                   // 12296
		show: true,                                                                                                          // 12297
		tooltipClass: null,                                                                                                  // 12298
		track: false,                                                                                                        // 12299
                                                                                                                       // 12300
		// callbacks                                                                                                         // 12301
		close: null,                                                                                                         // 12302
		open: null                                                                                                           // 12303
	},                                                                                                                    // 12304
                                                                                                                       // 12305
	_create: function() {                                                                                                 // 12306
		this._on({                                                                                                           // 12307
			mouseover: "open",                                                                                                  // 12308
			focusin: "open"                                                                                                     // 12309
		});                                                                                                                  // 12310
                                                                                                                       // 12311
		// IDs of generated tooltips, needed for destroy                                                                     // 12312
		this.tooltips = {};                                                                                                  // 12313
		// IDs of parent tooltips where we removed the title attribute                                                       // 12314
		this.parents = {};                                                                                                   // 12315
                                                                                                                       // 12316
		if ( this.options.disabled ) {                                                                                       // 12317
			this._disable();                                                                                                    // 12318
		}                                                                                                                    // 12319
	},                                                                                                                    // 12320
                                                                                                                       // 12321
	_setOption: function( key, value ) {                                                                                  // 12322
		var that = this;                                                                                                     // 12323
                                                                                                                       // 12324
		if ( key === "disabled" ) {                                                                                          // 12325
			this[ value ? "_disable" : "_enable" ]();                                                                           // 12326
			this.options[ key ] = value;                                                                                        // 12327
			// disable element style changes                                                                                    // 12328
			return;                                                                                                             // 12329
		}                                                                                                                    // 12330
                                                                                                                       // 12331
		this._super( key, value );                                                                                           // 12332
                                                                                                                       // 12333
		if ( key === "content" ) {                                                                                           // 12334
			$.each( this.tooltips, function( id, element ) {                                                                    // 12335
				that._updateContent( element );                                                                                    // 12336
			});                                                                                                                 // 12337
		}                                                                                                                    // 12338
	},                                                                                                                    // 12339
                                                                                                                       // 12340
	_disable: function() {                                                                                                // 12341
		var that = this;                                                                                                     // 12342
                                                                                                                       // 12343
		// close open tooltips                                                                                               // 12344
		$.each( this.tooltips, function( id, element ) {                                                                     // 12345
			var event = $.Event( "blur" );                                                                                      // 12346
			event.target = event.currentTarget = element[0];                                                                    // 12347
			that.close( event, true );                                                                                          // 12348
		});                                                                                                                  // 12349
                                                                                                                       // 12350
		// remove title attributes to prevent native tooltips                                                                // 12351
		this.element.find( this.options.items ).andSelf().each(function() {                                                  // 12352
			var element = $( this );                                                                                            // 12353
			if ( element.is( "[title]" ) ) {                                                                                    // 12354
				element                                                                                                            // 12355
					.data( "ui-tooltip-title", element.attr( "title" ) )                                                              // 12356
					.attr( "title", "" );                                                                                             // 12357
			}                                                                                                                   // 12358
		});                                                                                                                  // 12359
	},                                                                                                                    // 12360
                                                                                                                       // 12361
	_enable: function() {                                                                                                 // 12362
		// restore title attributes                                                                                          // 12363
		this.element.find( this.options.items ).andSelf().each(function() {                                                  // 12364
			var element = $( this );                                                                                            // 12365
			if ( element.data( "ui-tooltip-title" ) ) {                                                                         // 12366
				element.attr( "title", element.data( "ui-tooltip-title" ) );                                                       // 12367
			}                                                                                                                   // 12368
		});                                                                                                                  // 12369
	},                                                                                                                    // 12370
                                                                                                                       // 12371
	open: function( event ) {                                                                                             // 12372
		var that = this,                                                                                                     // 12373
			target = $( event ? event.target : this.element )                                                                   // 12374
				// we need closest here due to mouseover bubbling,                                                                 // 12375
				// but always pointing at the same event target                                                                    // 12376
				.closest( this.options.items );                                                                                    // 12377
                                                                                                                       // 12378
		// No element to show a tooltip for or the tooltip is already open                                                   // 12379
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {                                                            // 12380
			return;                                                                                                             // 12381
		}                                                                                                                    // 12382
                                                                                                                       // 12383
		if ( target.attr( "title" ) ) {                                                                                      // 12384
			target.data( "ui-tooltip-title", target.attr( "title" ) );                                                          // 12385
		}                                                                                                                    // 12386
                                                                                                                       // 12387
		target.data( "ui-tooltip-open", true );                                                                              // 12388
                                                                                                                       // 12389
		// kill parent tooltips, custom or native, for hover                                                                 // 12390
		if ( event && event.type === "mouseover" ) {                                                                         // 12391
			target.parents().each(function() {                                                                                  // 12392
				var parent = $( this ),                                                                                            // 12393
					blurEvent;                                                                                                        // 12394
				if ( parent.data( "ui-tooltip-open" ) ) {                                                                          // 12395
					blurEvent = $.Event( "blur" );                                                                                    // 12396
					blurEvent.target = blurEvent.currentTarget = this;                                                                // 12397
					that.close( blurEvent, true );                                                                                    // 12398
				}                                                                                                                  // 12399
				if ( parent.attr( "title" ) ) {                                                                                    // 12400
					parent.uniqueId();                                                                                                // 12401
					that.parents[ this.id ] = {                                                                                       // 12402
						element: this,                                                                                                   // 12403
						title: parent.attr( "title" )                                                                                    // 12404
					};                                                                                                                // 12405
					parent.attr( "title", "" );                                                                                       // 12406
				}                                                                                                                  // 12407
			});                                                                                                                 // 12408
		}                                                                                                                    // 12409
                                                                                                                       // 12410
		this._updateContent( target, event );                                                                                // 12411
	},                                                                                                                    // 12412
                                                                                                                       // 12413
	_updateContent: function( target, event ) {                                                                           // 12414
		var content,                                                                                                         // 12415
			contentOption = this.options.content,                                                                               // 12416
			that = this,                                                                                                        // 12417
			eventType = event ? event.type : null;                                                                              // 12418
                                                                                                                       // 12419
		if ( typeof contentOption === "string" ) {                                                                           // 12420
			return this._open( event, target, contentOption );                                                                  // 12421
		}                                                                                                                    // 12422
                                                                                                                       // 12423
		content = contentOption.call( target[0], function( response ) {                                                      // 12424
			// ignore async response if tooltip was closed already                                                              // 12425
			if ( !target.data( "ui-tooltip-open" ) ) {                                                                          // 12426
				return;                                                                                                            // 12427
			}                                                                                                                   // 12428
			// IE may instantly serve a cached response for ajax requests                                                       // 12429
			// delay this call to _open so the other call to _open runs first                                                   // 12430
			that._delay(function() {                                                                                            // 12431
				// jQuery creates a special event for focusin when it doesn't                                                      // 12432
				// exist natively. To improve performance, the native event                                                        // 12433
				// object is reused and the type is changed. Therefore, we can't                                                   // 12434
				// rely on the type being correct after the event finished                                                         // 12435
				// bubbling, so we set it back to the previous value. (#8740)                                                      // 12436
				if ( event ) {                                                                                                     // 12437
					event.type = eventType;                                                                                           // 12438
				}                                                                                                                  // 12439
				this._open( event, target, response );                                                                             // 12440
			});                                                                                                                 // 12441
		});                                                                                                                  // 12442
		if ( content ) {                                                                                                     // 12443
			this._open( event, target, content );                                                                               // 12444
		}                                                                                                                    // 12445
	},                                                                                                                    // 12446
                                                                                                                       // 12447
	_open: function( event, target, content ) {                                                                           // 12448
		var tooltip, events, delayedShow,                                                                                    // 12449
			positionOption = $.extend( {}, this.options.position );                                                             // 12450
                                                                                                                       // 12451
		if ( !content ) {                                                                                                    // 12452
			return;                                                                                                             // 12453
		}                                                                                                                    // 12454
                                                                                                                       // 12455
		// Content can be updated multiple times. If the tooltip already                                                     // 12456
		// exists, then just update the content and bail.                                                                    // 12457
		tooltip = this._find( target );                                                                                      // 12458
		if ( tooltip.length ) {                                                                                              // 12459
			tooltip.find( ".ui-tooltip-content" ).html( content );                                                              // 12460
			return;                                                                                                             // 12461
		}                                                                                                                    // 12462
                                                                                                                       // 12463
		// if we have a title, clear it to prevent the native tooltip                                                        // 12464
		// we have to check first to avoid defining a title if none exists                                                   // 12465
		// (we don't want to cause an element to start matching [title])                                                     // 12466
		//                                                                                                                   // 12467
		// We use removeAttr only for key events, to allow IE to export the correct                                          // 12468
		// accessible attributes. For mouse events, set to empty string to avoid                                             // 12469
		// native tooltip showing up (happens only when removing inside mouseover).                                          // 12470
		if ( target.is( "[title]" ) ) {                                                                                      // 12471
			if ( event && event.type === "mouseover" ) {                                                                        // 12472
				target.attr( "title", "" );                                                                                        // 12473
			} else {                                                                                                            // 12474
				target.removeAttr( "title" );                                                                                      // 12475
			}                                                                                                                   // 12476
		}                                                                                                                    // 12477
                                                                                                                       // 12478
		tooltip = this._tooltip( target );                                                                                   // 12479
		addDescribedBy( target, tooltip.attr( "id" ) );                                                                      // 12480
		tooltip.find( ".ui-tooltip-content" ).html( content );                                                               // 12481
                                                                                                                       // 12482
		function position( event ) {                                                                                         // 12483
			positionOption.of = event;                                                                                          // 12484
			if ( tooltip.is( ":hidden" ) ) {                                                                                    // 12485
				return;                                                                                                            // 12486
			}                                                                                                                   // 12487
			tooltip.position( positionOption );                                                                                 // 12488
		}                                                                                                                    // 12489
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {                                                  // 12490
			this._on( this.document, {                                                                                          // 12491
				mousemove: position                                                                                                // 12492
			});                                                                                                                 // 12493
			// trigger once to override element-relative positioning                                                            // 12494
			position( event );                                                                                                  // 12495
		} else {                                                                                                             // 12496
			tooltip.position( $.extend({                                                                                        // 12497
				of: target                                                                                                         // 12498
			}, this.options.position ) );                                                                                       // 12499
		}                                                                                                                    // 12500
                                                                                                                       // 12501
		tooltip.hide();                                                                                                      // 12502
                                                                                                                       // 12503
		this._show( tooltip, this.options.show );                                                                            // 12504
		// Handle tracking tooltips that are shown with a delay (#8644). As soon                                             // 12505
		// as the tooltip is visible, position the tooltip using the most recent                                             // 12506
		// event.                                                                                                            // 12507
		if ( this.options.show && this.options.show.delay ) {                                                                // 12508
			delayedShow = setInterval(function() {                                                                              // 12509
				if ( tooltip.is( ":visible" ) ) {                                                                                  // 12510
					position( positionOption.of );                                                                                    // 12511
					clearInterval( delayedShow );                                                                                     // 12512
				}                                                                                                                  // 12513
			}, $.fx.interval );                                                                                                 // 12514
		}                                                                                                                    // 12515
                                                                                                                       // 12516
		this._trigger( "open", event, { tooltip: tooltip } );                                                                // 12517
                                                                                                                       // 12518
		events = {                                                                                                           // 12519
			keyup: function( event ) {                                                                                          // 12520
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {                                                                     // 12521
					var fakeEvent = $.Event(event);                                                                                   // 12522
					fakeEvent.currentTarget = target[0];                                                                              // 12523
					this.close( fakeEvent, true );                                                                                    // 12524
				}                                                                                                                  // 12525
			},                                                                                                                  // 12526
			remove: function() {                                                                                                // 12527
				this._removeTooltip( tooltip );                                                                                    // 12528
			}                                                                                                                   // 12529
		};                                                                                                                   // 12530
		if ( !event || event.type === "mouseover" ) {                                                                        // 12531
			events.mouseleave = "close";                                                                                        // 12532
		}                                                                                                                    // 12533
		if ( !event || event.type === "focusin" ) {                                                                          // 12534
			events.focusout = "close";                                                                                          // 12535
		}                                                                                                                    // 12536
		this._on( true, target, events );                                                                                    // 12537
	},                                                                                                                    // 12538
                                                                                                                       // 12539
	close: function( event ) {                                                                                            // 12540
		var that = this,                                                                                                     // 12541
			target = $( event ? event.currentTarget : this.element ),                                                           // 12542
			tooltip = this._find( target );                                                                                     // 12543
                                                                                                                       // 12544
		// disabling closes the tooltip, so we need to track when we're closing                                              // 12545
		// to avoid an infinite loop in case the tooltip becomes disabled on close                                           // 12546
		if ( this.closing ) {                                                                                                // 12547
			return;                                                                                                             // 12548
		}                                                                                                                    // 12549
                                                                                                                       // 12550
		// only set title if we had one before (see comment in _open())                                                      // 12551
		if ( target.data( "ui-tooltip-title" ) ) {                                                                           // 12552
			target.attr( "title", target.data( "ui-tooltip-title" ) );                                                          // 12553
		}                                                                                                                    // 12554
                                                                                                                       // 12555
		removeDescribedBy( target );                                                                                         // 12556
                                                                                                                       // 12557
		tooltip.stop( true );                                                                                                // 12558
		this._hide( tooltip, this.options.hide, function() {                                                                 // 12559
			that._removeTooltip( $( this ) );                                                                                   // 12560
		});                                                                                                                  // 12561
                                                                                                                       // 12562
		target.removeData( "ui-tooltip-open" );                                                                              // 12563
		this._off( target, "mouseleave focusout keyup" );                                                                    // 12564
		// Remove 'remove' binding only on delegated targets                                                                 // 12565
		if ( target[0] !== this.element[0] ) {                                                                               // 12566
			this._off( target, "remove" );                                                                                      // 12567
		}                                                                                                                    // 12568
		this._off( this.document, "mousemove" );                                                                             // 12569
                                                                                                                       // 12570
		if ( event && event.type === "mouseleave" ) {                                                                        // 12571
			$.each( this.parents, function( id, parent ) {                                                                      // 12572
				$( parent.element ).attr( "title", parent.title );                                                                 // 12573
				delete that.parents[ id ];                                                                                         // 12574
			});                                                                                                                 // 12575
		}                                                                                                                    // 12576
                                                                                                                       // 12577
		this.closing = true;                                                                                                 // 12578
		this._trigger( "close", event, { tooltip: tooltip } );                                                               // 12579
		this.closing = false;                                                                                                // 12580
	},                                                                                                                    // 12581
                                                                                                                       // 12582
	_tooltip: function( element ) {                                                                                       // 12583
		var id = "ui-tooltip-" + increments++,                                                                               // 12584
			tooltip = $( "<div>" )                                                                                              // 12585
				.attr({                                                                                                            // 12586
					id: id,                                                                                                           // 12587
					role: "tooltip"                                                                                                   // 12588
				})                                                                                                                 // 12589
				.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +                                               // 12590
					( this.options.tooltipClass || "" ) );                                                                            // 12591
		$( "<div>" )                                                                                                         // 12592
			.addClass( "ui-tooltip-content" )                                                                                   // 12593
			.appendTo( tooltip );                                                                                               // 12594
		tooltip.appendTo( this.document[0].body );                                                                           // 12595
		if ( $.fn.bgiframe ) {                                                                                               // 12596
			tooltip.bgiframe();                                                                                                 // 12597
		}                                                                                                                    // 12598
		this.tooltips[ id ] = element;                                                                                       // 12599
		return tooltip;                                                                                                      // 12600
	},                                                                                                                    // 12601
                                                                                                                       // 12602
	_find: function( target ) {                                                                                           // 12603
		var id = target.data( "ui-tooltip-id" );                                                                             // 12604
		return id ? $( "#" + id ) : $();                                                                                     // 12605
	},                                                                                                                    // 12606
                                                                                                                       // 12607
	_removeTooltip: function( tooltip ) {                                                                                 // 12608
		tooltip.remove();                                                                                                    // 12609
		delete this.tooltips[ tooltip.attr( "id" ) ];                                                                        // 12610
	},                                                                                                                    // 12611
                                                                                                                       // 12612
	_destroy: function() {                                                                                                // 12613
		var that = this;                                                                                                     // 12614
                                                                                                                       // 12615
		// close open tooltips                                                                                               // 12616
		$.each( this.tooltips, function( id, element ) {                                                                     // 12617
			// Delegate to close method to handle common cleanup                                                                // 12618
			var event = $.Event( "blur" );                                                                                      // 12619
			event.target = event.currentTarget = element[0];                                                                    // 12620
			that.close( event, true );                                                                                          // 12621
                                                                                                                       // 12622
			// Remove immediately; destroying an open tooltip doesn't use the                                                   // 12623
			// hide animation                                                                                                   // 12624
			$( "#" + id ).remove();                                                                                             // 12625
                                                                                                                       // 12626
			// Restore the title                                                                                                // 12627
			if ( element.data( "ui-tooltip-title" ) ) {                                                                         // 12628
				element.attr( "title", element.data( "ui-tooltip-title" ) );                                                       // 12629
				element.removeData( "ui-tooltip-title" );                                                                          // 12630
			}                                                                                                                   // 12631
		});                                                                                                                  // 12632
	}                                                                                                                     // 12633
});                                                                                                                    // 12634
                                                                                                                       // 12635
}( jQuery ) );                                                                                                         // 12636
;(jQuery.effects || (function($, undefined) {                                                                          // 12637
                                                                                                                       // 12638
var backCompat = $.uiBackCompat !== false,                                                                             // 12639
	// prefix used for storing data on .data()                                                                            // 12640
	dataSpace = "ui-effects-";                                                                                            // 12641
                                                                                                                       // 12642
$.effects = {                                                                                                          // 12643
	effect: {}                                                                                                            // 12644
};                                                                                                                     // 12645
                                                                                                                       // 12646
/*!                                                                                                                    // 12647
 * jQuery Color Animations v2.0.0                                                                                      // 12648
 * http://jquery.com/                                                                                                  // 12649
 *                                                                                                                     // 12650
 * Copyright 2012 jQuery Foundation and other contributors                                                             // 12651
 * Released under the MIT license.                                                                                     // 12652
 * http://jquery.org/license                                                                                           // 12653
 *                                                                                                                     // 12654
 * Date: Mon Aug 13 13:41:02 2012 -0500                                                                                // 12655
 */                                                                                                                    // 12656
(function( jQuery, undefined ) {                                                                                       // 12657
                                                                                                                       // 12658
	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "),
                                                                                                                       // 12660
	// plusequals test for += 100 -= 100                                                                                  // 12661
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,                                                                              // 12662
	// a set of RE's that can match strings and generate color tuples.                                                    // 12663
	stringParsers = [{                                                                                                    // 12664
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,                          // 12665
			parse: function( execResult ) {                                                                                     // 12666
				return [                                                                                                           // 12667
					execResult[ 1 ],                                                                                                  // 12668
					execResult[ 2 ],                                                                                                  // 12669
					execResult[ 3 ],                                                                                                  // 12670
					execResult[ 4 ]                                                                                                   // 12671
				];                                                                                                                 // 12672
			}                                                                                                                   // 12673
		}, {                                                                                                                 // 12674
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,  // 12675
			parse: function( execResult ) {                                                                                     // 12676
				return [                                                                                                           // 12677
					execResult[ 1 ] * 2.55,                                                                                           // 12678
					execResult[ 2 ] * 2.55,                                                                                           // 12679
					execResult[ 3 ] * 2.55,                                                                                           // 12680
					execResult[ 4 ]                                                                                                   // 12681
				];                                                                                                                 // 12682
			}                                                                                                                   // 12683
		}, {                                                                                                                 // 12684
			// this regex ignores A-F because it's compared against an already lowercased string                                // 12685
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,                                                                     // 12686
			parse: function( execResult ) {                                                                                     // 12687
				return [                                                                                                           // 12688
					parseInt( execResult[ 1 ], 16 ),                                                                                  // 12689
					parseInt( execResult[ 2 ], 16 ),                                                                                  // 12690
					parseInt( execResult[ 3 ], 16 )                                                                                   // 12691
				];                                                                                                                 // 12692
			}                                                                                                                   // 12693
		}, {                                                                                                                 // 12694
			// this regex ignores A-F because it's compared against an already lowercased string                                // 12695
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,                                                                              // 12696
			parse: function( execResult ) {                                                                                     // 12697
				return [                                                                                                           // 12698
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),                                                                // 12699
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),                                                                // 12700
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )                                                                 // 12701
				];                                                                                                                 // 12702
			}                                                                                                                   // 12703
		}, {                                                                                                                 // 12704
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,    // 12705
			space: "hsla",                                                                                                      // 12706
			parse: function( execResult ) {                                                                                     // 12707
				return [                                                                                                           // 12708
					execResult[ 1 ],                                                                                                  // 12709
					execResult[ 2 ] / 100,                                                                                            // 12710
					execResult[ 3 ] / 100,                                                                                            // 12711
					execResult[ 4 ]                                                                                                   // 12712
				];                                                                                                                 // 12713
			}                                                                                                                   // 12714
		}],                                                                                                                  // 12715
                                                                                                                       // 12716
	// jQuery.Color( )                                                                                                    // 12717
	color = jQuery.Color = function( color, green, blue, alpha ) {                                                        // 12718
		return new jQuery.Color.fn.parse( color, green, blue, alpha );                                                       // 12719
	},                                                                                                                    // 12720
	spaces = {                                                                                                            // 12721
		rgba: {                                                                                                              // 12722
			props: {                                                                                                            // 12723
				red: {                                                                                                             // 12724
					idx: 0,                                                                                                           // 12725
					type: "byte"                                                                                                      // 12726
				},                                                                                                                 // 12727
				green: {                                                                                                           // 12728
					idx: 1,                                                                                                           // 12729
					type: "byte"                                                                                                      // 12730
				},                                                                                                                 // 12731
				blue: {                                                                                                            // 12732
					idx: 2,                                                                                                           // 12733
					type: "byte"                                                                                                      // 12734
				}                                                                                                                  // 12735
			}                                                                                                                   // 12736
		},                                                                                                                   // 12737
                                                                                                                       // 12738
		hsla: {                                                                                                              // 12739
			props: {                                                                                                            // 12740
				hue: {                                                                                                             // 12741
					idx: 0,                                                                                                           // 12742
					type: "degrees"                                                                                                   // 12743
				},                                                                                                                 // 12744
				saturation: {                                                                                                      // 12745
					idx: 1,                                                                                                           // 12746
					type: "percent"                                                                                                   // 12747
				},                                                                                                                 // 12748
				lightness: {                                                                                                       // 12749
					idx: 2,                                                                                                           // 12750
					type: "percent"                                                                                                   // 12751
				}                                                                                                                  // 12752
			}                                                                                                                   // 12753
		}                                                                                                                    // 12754
	},                                                                                                                    // 12755
	propTypes = {                                                                                                         // 12756
		"byte": {                                                                                                            // 12757
			floor: true,                                                                                                        // 12758
			max: 255                                                                                                            // 12759
		},                                                                                                                   // 12760
		"percent": {                                                                                                         // 12761
			max: 1                                                                                                              // 12762
		},                                                                                                                   // 12763
		"degrees": {                                                                                                         // 12764
			mod: 360,                                                                                                           // 12765
			floor: true                                                                                                         // 12766
		}                                                                                                                    // 12767
	},                                                                                                                    // 12768
	support = color.support = {},                                                                                         // 12769
                                                                                                                       // 12770
	// element for support tests                                                                                          // 12771
	supportElem = jQuery( "<p>" )[ 0 ],                                                                                   // 12772
                                                                                                                       // 12773
	// colors = jQuery.Color.names                                                                                        // 12774
	colors,                                                                                                               // 12775
                                                                                                                       // 12776
	// local aliases of functions called often                                                                            // 12777
	each = jQuery.each;                                                                                                   // 12778
                                                                                                                       // 12779
// determine rgba support immediately                                                                                  // 12780
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";                                                         // 12781
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;                                               // 12782
                                                                                                                       // 12783
// define cache name and alpha properties                                                                              // 12784
// for rgba and hsla spaces                                                                                            // 12785
each( spaces, function( spaceName, space ) {                                                                           // 12786
	space.cache = "_" + spaceName;                                                                                        // 12787
	space.props.alpha = {                                                                                                 // 12788
		idx: 3,                                                                                                              // 12789
		type: "percent",                                                                                                     // 12790
		def: 1                                                                                                               // 12791
	};                                                                                                                    // 12792
});                                                                                                                    // 12793
                                                                                                                       // 12794
function clamp( value, prop, allowEmpty ) {                                                                            // 12795
	var type = propTypes[ prop.type ] || {};                                                                              // 12796
                                                                                                                       // 12797
	if ( value == null ) {                                                                                                // 12798
		return (allowEmpty || !prop.def) ? null : prop.def;                                                                  // 12799
	}                                                                                                                     // 12800
                                                                                                                       // 12801
	// ~~ is an short way of doing floor for positive numbers                                                             // 12802
	value = type.floor ? ~~value : parseFloat( value );                                                                   // 12803
                                                                                                                       // 12804
	// IE will pass in empty strings as value for alpha,                                                                  // 12805
	// which will hit this case                                                                                           // 12806
	if ( isNaN( value ) ) {                                                                                               // 12807
		return prop.def;                                                                                                     // 12808
	}                                                                                                                     // 12809
                                                                                                                       // 12810
	if ( type.mod ) {                                                                                                     // 12811
		// we add mod before modding to make sure that negatives values                                                      // 12812
		// get converted properly: -10 -> 350                                                                                // 12813
		return (value + type.mod) % type.mod;                                                                                // 12814
	}                                                                                                                     // 12815
                                                                                                                       // 12816
	// for now all property types without mod have min and max                                                            // 12817
	return 0 > value ? 0 : type.max < value ? type.max : value;                                                           // 12818
}                                                                                                                      // 12819
                                                                                                                       // 12820
function stringParse( string ) {                                                                                       // 12821
	var inst = color(),                                                                                                   // 12822
		rgba = inst._rgba = [];                                                                                              // 12823
                                                                                                                       // 12824
	string = string.toLowerCase();                                                                                        // 12825
                                                                                                                       // 12826
	each( stringParsers, function( i, parser ) {                                                                          // 12827
		var parsed,                                                                                                          // 12828
			match = parser.re.exec( string ),                                                                                   // 12829
			values = match && parser.parse( match ),                                                                            // 12830
			spaceName = parser.space || "rgba";                                                                                 // 12831
                                                                                                                       // 12832
		if ( values ) {                                                                                                      // 12833
			parsed = inst[ spaceName ]( values );                                                                               // 12834
                                                                                                                       // 12835
			// if this was an rgba parse the assignment might happen twice                                                      // 12836
			// oh well....                                                                                                      // 12837
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];                                            // 12838
			rgba = inst._rgba = parsed._rgba;                                                                                   // 12839
                                                                                                                       // 12840
			// exit each( stringParsers ) here because we matched                                                               // 12841
			return false;                                                                                                       // 12842
		}                                                                                                                    // 12843
	});                                                                                                                   // 12844
                                                                                                                       // 12845
	// Found a stringParser that handled it                                                                               // 12846
	if ( rgba.length ) {                                                                                                  // 12847
                                                                                                                       // 12848
		// if this came from a parsed string, force "transparent" when alpha is 0                                            // 12849
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)                                                  // 12850
		if ( rgba.join() === "0,0,0,0" ) {                                                                                   // 12851
			jQuery.extend( rgba, colors.transparent );                                                                          // 12852
		}                                                                                                                    // 12853
		return inst;                                                                                                         // 12854
	}                                                                                                                     // 12855
                                                                                                                       // 12856
	// named colors                                                                                                       // 12857
	return colors[ string ];                                                                                              // 12858
}                                                                                                                      // 12859
                                                                                                                       // 12860
color.fn = jQuery.extend( color.prototype, {                                                                           // 12861
	parse: function( red, green, blue, alpha ) {                                                                          // 12862
		if ( red === undefined ) {                                                                                           // 12863
			this._rgba = [ null, null, null, null ];                                                                            // 12864
			return this;                                                                                                        // 12865
		}                                                                                                                    // 12866
		if ( red.jquery || red.nodeType ) {                                                                                  // 12867
			red = jQuery( red ).css( green );                                                                                   // 12868
			green = undefined;                                                                                                  // 12869
		}                                                                                                                    // 12870
                                                                                                                       // 12871
		var inst = this,                                                                                                     // 12872
			type = jQuery.type( red ),                                                                                          // 12873
			rgba = this._rgba = [];                                                                                             // 12874
                                                                                                                       // 12875
		// more than 1 argument specified - assume ( red, green, blue, alpha )                                               // 12876
		if ( green !== undefined ) {                                                                                         // 12877
			red = [ red, green, blue, alpha ];                                                                                  // 12878
			type = "array";                                                                                                     // 12879
		}                                                                                                                    // 12880
                                                                                                                       // 12881
		if ( type === "string" ) {                                                                                           // 12882
			return this.parse( stringParse( red ) || colors._default );                                                         // 12883
		}                                                                                                                    // 12884
                                                                                                                       // 12885
		if ( type === "array" ) {                                                                                            // 12886
			each( spaces.rgba.props, function( key, prop ) {                                                                    // 12887
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );                                                                 // 12888
			});                                                                                                                 // 12889
			return this;                                                                                                        // 12890
		}                                                                                                                    // 12891
                                                                                                                       // 12892
		if ( type === "object" ) {                                                                                           // 12893
			if ( red instanceof color ) {                                                                                       // 12894
				each( spaces, function( spaceName, space ) {                                                                       // 12895
					if ( red[ space.cache ] ) {                                                                                       // 12896
						inst[ space.cache ] = red[ space.cache ].slice();                                                                // 12897
					}                                                                                                                 // 12898
				});                                                                                                                // 12899
			} else {                                                                                                            // 12900
				each( spaces, function( spaceName, space ) {                                                                       // 12901
					var cache = space.cache;                                                                                          // 12902
					each( space.props, function( key, prop ) {                                                                        // 12903
                                                                                                                       // 12904
						// if the cache doesn't exist, and we know how to convert                                                        // 12905
						if ( !inst[ cache ] && space.to ) {                                                                              // 12906
                                                                                                                       // 12907
							// if the value was null, we don't need to copy it                                                              // 12908
							// if the key was alpha, we don't need to copy it either                                                        // 12909
							if ( key === "alpha" || red[ key ] == null ) {                                                                  // 12910
								return;                                                                                                        // 12911
							}                                                                                                               // 12912
							inst[ cache ] = space.to( inst._rgba );                                                                         // 12913
						}                                                                                                                // 12914
                                                                                                                       // 12915
						// this is the only case where we allow nulls for ALL properties.                                                // 12916
						// call clamp with alwaysAllowEmpty                                                                              // 12917
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );                                                     // 12918
					});                                                                                                               // 12919
                                                                                                                       // 12920
					// everything defined but alpha?                                                                                  // 12921
					if ( inst[ cache ] && $.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {                                      // 12922
						// use the default of 1                                                                                          // 12923
						inst[ cache ][ 3 ] = 1;                                                                                          // 12924
						if ( space.from ) {                                                                                              // 12925
							inst._rgba = space.from( inst[ cache ] );                                                                       // 12926
						}                                                                                                                // 12927
					}                                                                                                                 // 12928
				});                                                                                                                // 12929
			}                                                                                                                   // 12930
			return this;                                                                                                        // 12931
		}                                                                                                                    // 12932
	},                                                                                                                    // 12933
	is: function( compare ) {                                                                                             // 12934
		var is = color( compare ),                                                                                           // 12935
			same = true,                                                                                                        // 12936
			inst = this;                                                                                                        // 12937
                                                                                                                       // 12938
		each( spaces, function( _, space ) {                                                                                 // 12939
			var localCache,                                                                                                     // 12940
				isCache = is[ space.cache ];                                                                                       // 12941
			if (isCache) {                                                                                                      // 12942
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];                                      // 12943
				each( space.props, function( _, prop ) {                                                                           // 12944
					if ( isCache[ prop.idx ] != null ) {                                                                              // 12945
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );                                                       // 12946
						return same;                                                                                                     // 12947
					}                                                                                                                 // 12948
				});                                                                                                                // 12949
			}                                                                                                                   // 12950
			return same;                                                                                                        // 12951
		});                                                                                                                  // 12952
		return same;                                                                                                         // 12953
	},                                                                                                                    // 12954
	_space: function() {                                                                                                  // 12955
		var used = [],                                                                                                       // 12956
			inst = this;                                                                                                        // 12957
		each( spaces, function( spaceName, space ) {                                                                         // 12958
			if ( inst[ space.cache ] ) {                                                                                        // 12959
				used.push( spaceName );                                                                                            // 12960
			}                                                                                                                   // 12961
		});                                                                                                                  // 12962
		return used.pop();                                                                                                   // 12963
	},                                                                                                                    // 12964
	transition: function( other, distance ) {                                                                             // 12965
		var end = color( other ),                                                                                            // 12966
			spaceName = end._space(),                                                                                           // 12967
			space = spaces[ spaceName ],                                                                                        // 12968
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,                                                    // 12969
			start = startColor[ space.cache ] || space.to( startColor._rgba ),                                                  // 12970
			result = start.slice();                                                                                             // 12971
                                                                                                                       // 12972
		end = end[ space.cache ];                                                                                            // 12973
		each( space.props, function( key, prop ) {                                                                           // 12974
			var index = prop.idx,                                                                                               // 12975
				startValue = start[ index ],                                                                                       // 12976
				endValue = end[ index ],                                                                                           // 12977
				type = propTypes[ prop.type ] || {};                                                                               // 12978
                                                                                                                       // 12979
			// if null, don't override start value                                                                              // 12980
			if ( endValue === null ) {                                                                                          // 12981
				return;                                                                                                            // 12982
			}                                                                                                                   // 12983
			// if null - use end                                                                                                // 12984
			if ( startValue === null ) {                                                                                        // 12985
				result[ index ] = endValue;                                                                                        // 12986
			} else {                                                                                                            // 12987
				if ( type.mod ) {                                                                                                  // 12988
					if ( endValue - startValue > type.mod / 2 ) {                                                                     // 12989
						startValue += type.mod;                                                                                          // 12990
					} else if ( startValue - endValue > type.mod / 2 ) {                                                              // 12991
						startValue -= type.mod;                                                                                          // 12992
					}                                                                                                                 // 12993
				}                                                                                                                  // 12994
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );                                // 12995
			}                                                                                                                   // 12996
		});                                                                                                                  // 12997
		return this[ spaceName ]( result );                                                                                  // 12998
	},                                                                                                                    // 12999
	blend: function( opaque ) {                                                                                           // 13000
		// if we are already opaque - return ourself                                                                         // 13001
		if ( this._rgba[ 3 ] === 1 ) {                                                                                       // 13002
			return this;                                                                                                        // 13003
		}                                                                                                                    // 13004
                                                                                                                       // 13005
		var rgb = this._rgba.slice(),                                                                                        // 13006
			a = rgb.pop(),                                                                                                      // 13007
			blend = color( opaque )._rgba;                                                                                      // 13008
                                                                                                                       // 13009
		return color( jQuery.map( rgb, function( v, i ) {                                                                    // 13010
			return ( 1 - a ) * blend[ i ] + a * v;                                                                              // 13011
		}));                                                                                                                 // 13012
	},                                                                                                                    // 13013
	toRgbaString: function() {                                                                                            // 13014
		var prefix = "rgba(",                                                                                                // 13015
			rgba = jQuery.map( this._rgba, function( v, i ) {                                                                   // 13016
				return v == null ? ( i > 2 ? 1 : 0 ) : v;                                                                          // 13017
			});                                                                                                                 // 13018
                                                                                                                       // 13019
		if ( rgba[ 3 ] === 1 ) {                                                                                             // 13020
			rgba.pop();                                                                                                         // 13021
			prefix = "rgb(";                                                                                                    // 13022
		}                                                                                                                    // 13023
                                                                                                                       // 13024
		return prefix + rgba.join() + ")";                                                                                   // 13025
	},                                                                                                                    // 13026
	toHslaString: function() {                                                                                            // 13027
		var prefix = "hsla(",                                                                                                // 13028
			hsla = jQuery.map( this.hsla(), function( v, i ) {                                                                  // 13029
				if ( v == null ) {                                                                                                 // 13030
					v = i > 2 ? 1 : 0;                                                                                                // 13031
				}                                                                                                                  // 13032
                                                                                                                       // 13033
				// catch 1 and 2                                                                                                   // 13034
				if ( i && i < 3 ) {                                                                                                // 13035
					v = Math.round( v * 100 ) + "%";                                                                                  // 13036
				}                                                                                                                  // 13037
				return v;                                                                                                          // 13038
			});                                                                                                                 // 13039
                                                                                                                       // 13040
		if ( hsla[ 3 ] === 1 ) {                                                                                             // 13041
			hsla.pop();                                                                                                         // 13042
			prefix = "hsl(";                                                                                                    // 13043
		}                                                                                                                    // 13044
		return prefix + hsla.join() + ")";                                                                                   // 13045
	},                                                                                                                    // 13046
	toHexString: function( includeAlpha ) {                                                                               // 13047
		var rgba = this._rgba.slice(),                                                                                       // 13048
			alpha = rgba.pop();                                                                                                 // 13049
                                                                                                                       // 13050
		if ( includeAlpha ) {                                                                                                // 13051
			rgba.push( ~~( alpha * 255 ) );                                                                                     // 13052
		}                                                                                                                    // 13053
                                                                                                                       // 13054
		return "#" + jQuery.map( rgba, function( v ) {                                                                       // 13055
                                                                                                                       // 13056
			// default to 0 when nulls exist                                                                                    // 13057
			v = ( v || 0 ).toString( 16 );                                                                                      // 13058
			return v.length === 1 ? "0" + v : v;                                                                                // 13059
		}).join("");                                                                                                         // 13060
	},                                                                                                                    // 13061
	toString: function() {                                                                                                // 13062
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();                                                  // 13063
	}                                                                                                                     // 13064
});                                                                                                                    // 13065
color.fn.parse.prototype = color.fn;                                                                                   // 13066
                                                                                                                       // 13067
// hsla conversions adapted from:                                                                                      // 13068
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021     // 13069
                                                                                                                       // 13070
function hue2rgb( p, q, h ) {                                                                                          // 13071
	h = ( h + 1 ) % 1;                                                                                                    // 13072
	if ( h * 6 < 1 ) {                                                                                                    // 13073
		return p + (q - p) * h * 6;                                                                                          // 13074
	}                                                                                                                     // 13075
	if ( h * 2 < 1) {                                                                                                     // 13076
		return q;                                                                                                            // 13077
	}                                                                                                                     // 13078
	if ( h * 3 < 2 ) {                                                                                                    // 13079
		return p + (q - p) * ((2/3) - h) * 6;                                                                                // 13080
	}                                                                                                                     // 13081
	return p;                                                                                                             // 13082
}                                                                                                                      // 13083
                                                                                                                       // 13084
spaces.hsla.to = function ( rgba ) {                                                                                   // 13085
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {                                                  // 13086
		return [ null, null, null, rgba[ 3 ] ];                                                                              // 13087
	}                                                                                                                     // 13088
	var r = rgba[ 0 ] / 255,                                                                                              // 13089
		g = rgba[ 1 ] / 255,                                                                                                 // 13090
		b = rgba[ 2 ] / 255,                                                                                                 // 13091
		a = rgba[ 3 ],                                                                                                       // 13092
		max = Math.max( r, g, b ),                                                                                           // 13093
		min = Math.min( r, g, b ),                                                                                           // 13094
		diff = max - min,                                                                                                    // 13095
		add = max + min,                                                                                                     // 13096
		l = add * 0.5,                                                                                                       // 13097
		h, s;                                                                                                                // 13098
                                                                                                                       // 13099
	if ( min === max ) {                                                                                                  // 13100
		h = 0;                                                                                                               // 13101
	} else if ( r === max ) {                                                                                             // 13102
		h = ( 60 * ( g - b ) / diff ) + 360;                                                                                 // 13103
	} else if ( g === max ) {                                                                                             // 13104
		h = ( 60 * ( b - r ) / diff ) + 120;                                                                                 // 13105
	} else {                                                                                                              // 13106
		h = ( 60 * ( r - g ) / diff ) + 240;                                                                                 // 13107
	}                                                                                                                     // 13108
                                                                                                                       // 13109
	if ( l === 0 || l === 1 ) {                                                                                           // 13110
		s = l;                                                                                                               // 13111
	} else if ( l <= 0.5 ) {                                                                                              // 13112
		s = diff / add;                                                                                                      // 13113
	} else {                                                                                                              // 13114
		s = diff / ( 2 - add );                                                                                              // 13115
	}                                                                                                                     // 13116
	return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];                                                              // 13117
};                                                                                                                     // 13118
                                                                                                                       // 13119
spaces.hsla.from = function ( hsla ) {                                                                                 // 13120
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {                                                  // 13121
		return [ null, null, null, hsla[ 3 ] ];                                                                              // 13122
	}                                                                                                                     // 13123
	var h = hsla[ 0 ] / 360,                                                                                              // 13124
		s = hsla[ 1 ],                                                                                                       // 13125
		l = hsla[ 2 ],                                                                                                       // 13126
		a = hsla[ 3 ],                                                                                                       // 13127
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,                                                                        // 13128
		p = 2 * l - q;                                                                                                       // 13129
                                                                                                                       // 13130
	return [                                                                                                              // 13131
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),                                                                  // 13132
		Math.round( hue2rgb( p, q, h ) * 255 ),                                                                              // 13133
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),                                                                  // 13134
		a                                                                                                                    // 13135
	];                                                                                                                    // 13136
};                                                                                                                     // 13137
                                                                                                                       // 13138
                                                                                                                       // 13139
each( spaces, function( spaceName, space ) {                                                                           // 13140
	var props = space.props,                                                                                              // 13141
		cache = space.cache,                                                                                                 // 13142
		to = space.to,                                                                                                       // 13143
		from = space.from;                                                                                                   // 13144
                                                                                                                       // 13145
	// makes rgba() and hsla()                                                                                            // 13146
	color.fn[ spaceName ] = function( value ) {                                                                           // 13147
                                                                                                                       // 13148
		// generate a cache for this space if it doesn't exist                                                               // 13149
		if ( to && !this[ cache ] ) {                                                                                        // 13150
			this[ cache ] = to( this._rgba );                                                                                   // 13151
		}                                                                                                                    // 13152
		if ( value === undefined ) {                                                                                         // 13153
			return this[ cache ].slice();                                                                                       // 13154
		}                                                                                                                    // 13155
                                                                                                                       // 13156
		var ret,                                                                                                             // 13157
			type = jQuery.type( value ),                                                                                        // 13158
			arr = ( type === "array" || type === "object" ) ? value : arguments,                                                // 13159
			local = this[ cache ].slice();                                                                                      // 13160
                                                                                                                       // 13161
		each( props, function( key, prop ) {                                                                                 // 13162
			var val = arr[ type === "object" ? key : prop.idx ];                                                                // 13163
			if ( val == null ) {                                                                                                // 13164
				val = local[ prop.idx ];                                                                                           // 13165
			}                                                                                                                   // 13166
			local[ prop.idx ] = clamp( val, prop );                                                                             // 13167
		});                                                                                                                  // 13168
                                                                                                                       // 13169
		if ( from ) {                                                                                                        // 13170
			ret = color( from( local ) );                                                                                       // 13171
			ret[ cache ] = local;                                                                                               // 13172
			return ret;                                                                                                         // 13173
		} else {                                                                                                             // 13174
			return color( local );                                                                                              // 13175
		}                                                                                                                    // 13176
	};                                                                                                                    // 13177
                                                                                                                       // 13178
	// makes red() green() blue() alpha() hue() saturation() lightness()                                                  // 13179
	each( props, function( key, prop ) {                                                                                  // 13180
		// alpha is included in more than one space                                                                          // 13181
		if ( color.fn[ key ] ) {                                                                                             // 13182
			return;                                                                                                             // 13183
		}                                                                                                                    // 13184
		color.fn[ key ] = function( value ) {                                                                                // 13185
			var vtype = jQuery.type( value ),                                                                                   // 13186
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),                                           // 13187
				local = this[ fn ](),                                                                                              // 13188
				cur = local[ prop.idx ],                                                                                           // 13189
				match;                                                                                                             // 13190
                                                                                                                       // 13191
			if ( vtype === "undefined" ) {                                                                                      // 13192
				return cur;                                                                                                        // 13193
			}                                                                                                                   // 13194
                                                                                                                       // 13195
			if ( vtype === "function" ) {                                                                                       // 13196
				value = value.call( this, cur );                                                                                   // 13197
				vtype = jQuery.type( value );                                                                                      // 13198
			}                                                                                                                   // 13199
			if ( value == null && prop.empty ) {                                                                                // 13200
				return this;                                                                                                       // 13201
			}                                                                                                                   // 13202
			if ( vtype === "string" ) {                                                                                         // 13203
				match = rplusequals.exec( value );                                                                                 // 13204
				if ( match ) {                                                                                                     // 13205
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );                                         // 13206
				}                                                                                                                  // 13207
			}                                                                                                                   // 13208
			local[ prop.idx ] = value;                                                                                          // 13209
			return this[ fn ]( local );                                                                                         // 13210
		};                                                                                                                   // 13211
	});                                                                                                                   // 13212
});                                                                                                                    // 13213
                                                                                                                       // 13214
// add .fx.step functions                                                                                              // 13215
each( stepHooks, function( i, hook ) {                                                                                 // 13216
	jQuery.cssHooks[ hook ] = {                                                                                           // 13217
		set: function( elem, value ) {                                                                                       // 13218
			var parsed, curElem,                                                                                                // 13219
				backgroundColor = "";                                                                                              // 13220
                                                                                                                       // 13221
			if ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) {                                     // 13222
				value = color( parsed || value );                                                                                  // 13223
				if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {                                                                   // 13224
					curElem = hook === "backgroundColor" ? elem.parentNode : elem;                                                    // 13225
					while (                                                                                                           // 13226
						(backgroundColor === "" || backgroundColor === "transparent") &&                                                 // 13227
						curElem && curElem.style                                                                                         // 13228
					) {                                                                                                               // 13229
						try {                                                                                                            // 13230
							backgroundColor = jQuery.css( curElem, "backgroundColor" );                                                     // 13231
							curElem = curElem.parentNode;                                                                                   // 13232
						} catch ( e ) {                                                                                                  // 13233
						}                                                                                                                // 13234
					}                                                                                                                 // 13235
                                                                                                                       // 13236
					value = value.blend( backgroundColor && backgroundColor !== "transparent" ?                                       // 13237
						backgroundColor :                                                                                                // 13238
						"_default" );                                                                                                    // 13239
				}                                                                                                                  // 13240
                                                                                                                       // 13241
				value = value.toRgbaString();                                                                                      // 13242
			}                                                                                                                   // 13243
			try {                                                                                                               // 13244
				elem.style[ hook ] = value;                                                                                        // 13245
			} catch( error ) {                                                                                                  // 13246
				// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'                         // 13247
			}                                                                                                                   // 13248
		}                                                                                                                    // 13249
	};                                                                                                                    // 13250
	jQuery.fx.step[ hook ] = function( fx ) {                                                                             // 13251
		if ( !fx.colorInit ) {                                                                                               // 13252
			fx.start = color( fx.elem, hook );                                                                                  // 13253
			fx.end = color( fx.end );                                                                                           // 13254
			fx.colorInit = true;                                                                                                // 13255
		}                                                                                                                    // 13256
		jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );                                       // 13257
	};                                                                                                                    // 13258
});                                                                                                                    // 13259
                                                                                                                       // 13260
jQuery.cssHooks.borderColor = {                                                                                        // 13261
	expand: function( value ) {                                                                                           // 13262
		var expanded = {};                                                                                                   // 13263
                                                                                                                       // 13264
		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {                                                    // 13265
			expanded[ "border" + part + "Color" ] = value;                                                                      // 13266
		});                                                                                                                  // 13267
		return expanded;                                                                                                     // 13268
	}                                                                                                                     // 13269
};                                                                                                                     // 13270
                                                                                                                       // 13271
// Basic color names only.                                                                                             // 13272
// Usage of any of the other color names requires adding yourself or including                                         // 13273
// jquery.color.svg-names.js.                                                                                          // 13274
colors = jQuery.Color.names = {                                                                                        // 13275
	// 4.1. Basic color keywords                                                                                          // 13276
	aqua: "#00ffff",                                                                                                      // 13277
	black: "#000000",                                                                                                     // 13278
	blue: "#0000ff",                                                                                                      // 13279
	fuchsia: "#ff00ff",                                                                                                   // 13280
	gray: "#808080",                                                                                                      // 13281
	green: "#008000",                                                                                                     // 13282
	lime: "#00ff00",                                                                                                      // 13283
	maroon: "#800000",                                                                                                    // 13284
	navy: "#000080",                                                                                                      // 13285
	olive: "#808000",                                                                                                     // 13286
	purple: "#800080",                                                                                                    // 13287
	red: "#ff0000",                                                                                                       // 13288
	silver: "#c0c0c0",                                                                                                    // 13289
	teal: "#008080",                                                                                                      // 13290
	white: "#ffffff",                                                                                                     // 13291
	yellow: "#ffff00",                                                                                                    // 13292
                                                                                                                       // 13293
	// 4.2.3. "transparent" color keyword                                                                                 // 13294
	transparent: [ null, null, null, 0 ],                                                                                 // 13295
                                                                                                                       // 13296
	_default: "#ffffff"                                                                                                   // 13297
};                                                                                                                     // 13298
                                                                                                                       // 13299
})( jQuery );                                                                                                          // 13300
                                                                                                                       // 13301
                                                                                                                       // 13302
                                                                                                                       // 13303
/******************************************************************************/                                       // 13304
/****************************** CLASS ANIMATIONS ******************************/                                       // 13305
/******************************************************************************/                                       // 13306
(function() {                                                                                                          // 13307
                                                                                                                       // 13308
var classAnimationActions = [ "add", "remove", "toggle" ],                                                             // 13309
	shorthandStyles = {                                                                                                   // 13310
		border: 1,                                                                                                           // 13311
		borderBottom: 1,                                                                                                     // 13312
		borderColor: 1,                                                                                                      // 13313
		borderLeft: 1,                                                                                                       // 13314
		borderRight: 1,                                                                                                      // 13315
		borderTop: 1,                                                                                                        // 13316
		borderWidth: 1,                                                                                                      // 13317
		margin: 1,                                                                                                           // 13318
		padding: 1                                                                                                           // 13319
	};                                                                                                                    // 13320
                                                                                                                       // 13321
$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {         // 13322
	$.fx.step[ prop ] = function( fx ) {                                                                                  // 13323
		if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {                                             // 13324
			jQuery.style( fx.elem, prop, fx.end );                                                                              // 13325
			fx.setAttr = true;                                                                                                  // 13326
		}                                                                                                                    // 13327
	};                                                                                                                    // 13328
});                                                                                                                    // 13329
                                                                                                                       // 13330
function getElementStyles() {                                                                                          // 13331
	var style = this.ownerDocument.defaultView ?                                                                          // 13332
			this.ownerDocument.defaultView.getComputedStyle( this, null ) :                                                     // 13333
			this.currentStyle,                                                                                                  // 13334
		newStyle = {},                                                                                                       // 13335
		key,                                                                                                                 // 13336
		len;                                                                                                                 // 13337
                                                                                                                       // 13338
	// webkit enumerates style porperties                                                                                 // 13339
	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {                                                   // 13340
		len = style.length;                                                                                                  // 13341
		while ( len-- ) {                                                                                                    // 13342
			key = style[ len ];                                                                                                 // 13343
			if ( typeof style[ key ] === "string" ) {                                                                           // 13344
				newStyle[ $.camelCase( key ) ] = style[ key ];                                                                     // 13345
			}                                                                                                                   // 13346
		}                                                                                                                    // 13347
	} else {                                                                                                              // 13348
		for ( key in style ) {                                                                                               // 13349
			if ( typeof style[ key ] === "string" ) {                                                                           // 13350
				newStyle[ key ] = style[ key ];                                                                                    // 13351
			}                                                                                                                   // 13352
		}                                                                                                                    // 13353
	}                                                                                                                     // 13354
                                                                                                                       // 13355
	return newStyle;                                                                                                      // 13356
}                                                                                                                      // 13357
                                                                                                                       // 13358
                                                                                                                       // 13359
function styleDifference( oldStyle, newStyle ) {                                                                       // 13360
	var diff = {},                                                                                                        // 13361
		name, value;                                                                                                         // 13362
                                                                                                                       // 13363
	for ( name in newStyle ) {                                                                                            // 13364
		value = newStyle[ name ];                                                                                            // 13365
		if ( oldStyle[ name ] !== value ) {                                                                                  // 13366
			if ( !shorthandStyles[ name ] ) {                                                                                   // 13367
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {                                                        // 13368
					diff[ name ] = value;                                                                                             // 13369
				}                                                                                                                  // 13370
			}                                                                                                                   // 13371
		}                                                                                                                    // 13372
	}                                                                                                                     // 13373
                                                                                                                       // 13374
	return diff;                                                                                                          // 13375
}                                                                                                                      // 13376
                                                                                                                       // 13377
$.effects.animateClass = function( value, duration, easing, callback ) {                                               // 13378
	var o = $.speed( duration, easing, callback );                                                                        // 13379
                                                                                                                       // 13380
	return this.queue( function() {                                                                                       // 13381
		var animated = $( this ),                                                                                            // 13382
			baseClass = animated.attr( "class" ) || "",                                                                         // 13383
			applyClassChange,                                                                                                   // 13384
			allAnimations = o.children ? animated.find( "*" ).andSelf() : animated;                                             // 13385
                                                                                                                       // 13386
		// map the animated objects to store the original styles.                                                            // 13387
		allAnimations = allAnimations.map(function() {                                                                       // 13388
			var el = $( this );                                                                                                 // 13389
			return {                                                                                                            // 13390
				el: el,                                                                                                            // 13391
				start: getElementStyles.call( this )                                                                               // 13392
			};                                                                                                                  // 13393
		});                                                                                                                  // 13394
                                                                                                                       // 13395
		// apply class change                                                                                                // 13396
		applyClassChange = function() {                                                                                      // 13397
			$.each( classAnimationActions, function(i, action) {                                                                // 13398
				if ( value[ action ] ) {                                                                                           // 13399
					animated[ action + "Class" ]( value[ action ] );                                                                  // 13400
				}                                                                                                                  // 13401
			});                                                                                                                 // 13402
		};                                                                                                                   // 13403
		applyClassChange();                                                                                                  // 13404
                                                                                                                       // 13405
		// map all animated objects again - calculate new styles and diff                                                    // 13406
		allAnimations = allAnimations.map(function() {                                                                       // 13407
			this.end = getElementStyles.call( this.el[ 0 ] );                                                                   // 13408
			this.diff = styleDifference( this.start, this.end );                                                                // 13409
			return this;                                                                                                        // 13410
		});                                                                                                                  // 13411
                                                                                                                       // 13412
		// apply original class                                                                                              // 13413
		animated.attr( "class", baseClass );                                                                                 // 13414
                                                                                                                       // 13415
		// map all animated objects again - this time collecting a promise                                                   // 13416
		allAnimations = allAnimations.map(function() {                                                                       // 13417
			var styleInfo = this,                                                                                               // 13418
				dfd = $.Deferred(),                                                                                                // 13419
				opts = jQuery.extend({}, o, {                                                                                      // 13420
					queue: false,                                                                                                     // 13421
					complete: function() {                                                                                            // 13422
						dfd.resolve( styleInfo );                                                                                        // 13423
					}                                                                                                                 // 13424
				});                                                                                                                // 13425
                                                                                                                       // 13426
			this.el.animate( this.diff, opts );                                                                                 // 13427
			return dfd.promise();                                                                                               // 13428
		});                                                                                                                  // 13429
                                                                                                                       // 13430
		// once all animations have completed:                                                                               // 13431
		$.when.apply( $, allAnimations.get() ).done(function() {                                                             // 13432
                                                                                                                       // 13433
			// set the final class                                                                                              // 13434
			applyClassChange();                                                                                                 // 13435
                                                                                                                       // 13436
			// for each animated element,                                                                                       // 13437
			// clear all css properties that were animated                                                                      // 13438
			$.each( arguments, function() {                                                                                     // 13439
				var el = this.el;                                                                                                  // 13440
				$.each( this.diff, function(key) {                                                                                 // 13441
					el.css( key, '' );                                                                                                // 13442
				});                                                                                                                // 13443
			});                                                                                                                 // 13444
                                                                                                                       // 13445
			// this is guarnteed to be there if you use jQuery.speed()                                                          // 13446
			// it also handles dequeuing the next anim...                                                                       // 13447
			o.complete.call( animated[ 0 ] );                                                                                   // 13448
		});                                                                                                                  // 13449
	});                                                                                                                   // 13450
};                                                                                                                     // 13451
                                                                                                                       // 13452
$.fn.extend({                                                                                                          // 13453
	_addClass: $.fn.addClass,                                                                                             // 13454
	addClass: function( classNames, speed, easing, callback ) {                                                           // 13455
		return speed ?                                                                                                       // 13456
			$.effects.animateClass.call( this,                                                                                  // 13457
				{ add: classNames }, speed, easing, callback ) :                                                                   // 13458
			this._addClass( classNames );                                                                                       // 13459
	},                                                                                                                    // 13460
                                                                                                                       // 13461
	_removeClass: $.fn.removeClass,                                                                                       // 13462
	removeClass: function( classNames, speed, easing, callback ) {                                                        // 13463
		return speed ?                                                                                                       // 13464
			$.effects.animateClass.call( this,                                                                                  // 13465
				{ remove: classNames }, speed, easing, callback ) :                                                                // 13466
			this._removeClass( classNames );                                                                                    // 13467
	},                                                                                                                    // 13468
                                                                                                                       // 13469
	_toggleClass: $.fn.toggleClass,                                                                                       // 13470
	toggleClass: function( classNames, force, speed, easing, callback ) {                                                 // 13471
		if ( typeof force === "boolean" || force === undefined ) {                                                           // 13472
			if ( !speed ) {                                                                                                     // 13473
				// without speed parameter                                                                                         // 13474
				return this._toggleClass( classNames, force );                                                                     // 13475
			} else {                                                                                                            // 13476
				return $.effects.animateClass.call( this,                                                                          // 13477
					(force ? { add: classNames } : { remove: classNames }),                                                           // 13478
					speed, easing, callback );                                                                                        // 13479
			}                                                                                                                   // 13480
		} else {                                                                                                             // 13481
			// without force parameter                                                                                          // 13482
			return $.effects.animateClass.call( this,                                                                           // 13483
				{ toggle: classNames }, force, speed, easing );                                                                    // 13484
		}                                                                                                                    // 13485
	},                                                                                                                    // 13486
                                                                                                                       // 13487
	switchClass: function( remove, add, speed, easing, callback) {                                                        // 13488
		return $.effects.animateClass.call( this, {                                                                          // 13489
			add: add,                                                                                                           // 13490
			remove: remove                                                                                                      // 13491
		}, speed, easing, callback );                                                                                        // 13492
	}                                                                                                                     // 13493
});                                                                                                                    // 13494
                                                                                                                       // 13495
})();                                                                                                                  // 13496
                                                                                                                       // 13497
/******************************************************************************/                                       // 13498
/*********************************** EFFECTS **********************************/                                       // 13499
/******************************************************************************/                                       // 13500
                                                                                                                       // 13501
(function() {                                                                                                          // 13502
                                                                                                                       // 13503
$.extend( $.effects, {                                                                                                 // 13504
	version: "1.9.2",                                                                                                     // 13505
                                                                                                                       // 13506
	// Saves a set of properties in a data storage                                                                        // 13507
	save: function( element, set ) {                                                                                      // 13508
		for( var i=0; i < set.length; i++ ) {                                                                                // 13509
			if ( set[ i ] !== null ) {                                                                                          // 13510
				element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );                                              // 13511
			}                                                                                                                   // 13512
		}                                                                                                                    // 13513
	},                                                                                                                    // 13514
                                                                                                                       // 13515
	// Restores a set of previously saved properties from a data storage                                                  // 13516
	restore: function( element, set ) {                                                                                   // 13517
		var val, i;                                                                                                          // 13518
		for( i=0; i < set.length; i++ ) {                                                                                    // 13519
			if ( set[ i ] !== null ) {                                                                                          // 13520
				val = element.data( dataSpace + set[ i ] );                                                                        // 13521
				// support: jQuery 1.6.2                                                                                           // 13522
				// http://bugs.jquery.com/ticket/9917                                                                              // 13523
				// jQuery 1.6.2 incorrectly returns undefined for any falsy value.                                                 // 13524
				// We can't differentiate between "" and 0 here, so we just assume                                                 // 13525
				// empty string since it's likely to be a more common value...                                                     // 13526
				if ( val === undefined ) {                                                                                         // 13527
					val = "";                                                                                                         // 13528
				}                                                                                                                  // 13529
				element.css( set[ i ], val );                                                                                      // 13530
			}                                                                                                                   // 13531
		}                                                                                                                    // 13532
	},                                                                                                                    // 13533
                                                                                                                       // 13534
	setMode: function( el, mode ) {                                                                                       // 13535
		if (mode === "toggle") {                                                                                             // 13536
			mode = el.is( ":hidden" ) ? "show" : "hide";                                                                        // 13537
		}                                                                                                                    // 13538
		return mode;                                                                                                         // 13539
	},                                                                                                                    // 13540
                                                                                                                       // 13541
	// Translates a [top,left] array into a baseline value                                                                // 13542
	// this should be a little more flexible in the future to handle a string & hash                                      // 13543
	getBaseline: function( origin, original ) {                                                                           // 13544
		var y, x;                                                                                                            // 13545
		switch ( origin[ 0 ] ) {                                                                                             // 13546
			case "top": y = 0; break;                                                                                           // 13547
			case "middle": y = 0.5; break;                                                                                      // 13548
			case "bottom": y = 1; break;                                                                                        // 13549
			default: y = origin[ 0 ] / original.height;                                                                         // 13550
		}                                                                                                                    // 13551
		switch ( origin[ 1 ] ) {                                                                                             // 13552
			case "left": x = 0; break;                                                                                          // 13553
			case "center": x = 0.5; break;                                                                                      // 13554
			case "right": x = 1; break;                                                                                         // 13555
			default: x = origin[ 1 ] / original.width;                                                                          // 13556
		}                                                                                                                    // 13557
		return {                                                                                                             // 13558
			x: x,                                                                                                               // 13559
			y: y                                                                                                                // 13560
		};                                                                                                                   // 13561
	},                                                                                                                    // 13562
                                                                                                                       // 13563
	// Wraps the element around a wrapper that copies position properties                                                 // 13564
	createWrapper: function( element ) {                                                                                  // 13565
                                                                                                                       // 13566
		// if the element is already wrapped, return it                                                                      // 13567
		if ( element.parent().is( ".ui-effects-wrapper" )) {                                                                 // 13568
			return element.parent();                                                                                            // 13569
		}                                                                                                                    // 13570
                                                                                                                       // 13571
		// wrap the element                                                                                                  // 13572
		var props = {                                                                                                        // 13573
				width: element.outerWidth(true),                                                                                   // 13574
				height: element.outerHeight(true),                                                                                 // 13575
				"float": element.css( "float" )                                                                                    // 13576
			},                                                                                                                  // 13577
			wrapper = $( "<div></div>" )                                                                                        // 13578
				.addClass( "ui-effects-wrapper" )                                                                                  // 13579
				.css({                                                                                                             // 13580
					fontSize: "100%",                                                                                                 // 13581
					background: "transparent",                                                                                        // 13582
					border: "none",                                                                                                   // 13583
					margin: 0,                                                                                                        // 13584
					padding: 0                                                                                                        // 13585
				}),                                                                                                                // 13586
			// Store the size in case width/height are defined in % - Fixes #5245                                               // 13587
			size = {                                                                                                            // 13588
				width: element.width(),                                                                                            // 13589
				height: element.height()                                                                                           // 13590
			},                                                                                                                  // 13591
			active = document.activeElement;                                                                                    // 13592
                                                                                                                       // 13593
		// support: Firefox                                                                                                  // 13594
		// Firefox incorrectly exposes anonymous content                                                                     // 13595
		// https://bugzilla.mozilla.org/show_bug.cgi?id=561664                                                               // 13596
		try {                                                                                                                // 13597
			active.id;                                                                                                          // 13598
		} catch( e ) {                                                                                                       // 13599
			active = document.body;                                                                                             // 13600
		}                                                                                                                    // 13601
                                                                                                                       // 13602
		element.wrap( wrapper );                                                                                             // 13603
                                                                                                                       // 13604
		// Fixes #7595 - Elements lose focus when wrapped.                                                                   // 13605
		if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {                                               // 13606
			$( active ).focus();                                                                                                // 13607
		}                                                                                                                    // 13608
                                                                                                                       // 13609
		wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element
                                                                                                                       // 13611
		// transfer positioning properties to the wrapper                                                                    // 13612
		if ( element.css( "position" ) === "static" ) {                                                                      // 13613
			wrapper.css({ position: "relative" });                                                                              // 13614
			element.css({ position: "relative" });                                                                              // 13615
		} else {                                                                                                             // 13616
			$.extend( props, {                                                                                                  // 13617
				position: element.css( "position" ),                                                                               // 13618
				zIndex: element.css( "z-index" )                                                                                   // 13619
			});                                                                                                                 // 13620
			$.each([ "top", "left", "bottom", "right" ], function(i, pos) {                                                     // 13621
				props[ pos ] = element.css( pos );                                                                                 // 13622
				if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {                                                                     // 13623
					props[ pos ] = "auto";                                                                                            // 13624
				}                                                                                                                  // 13625
			});                                                                                                                 // 13626
			element.css({                                                                                                       // 13627
				position: "relative",                                                                                              // 13628
				top: 0,                                                                                                            // 13629
				left: 0,                                                                                                           // 13630
				right: "auto",                                                                                                     // 13631
				bottom: "auto"                                                                                                     // 13632
			});                                                                                                                 // 13633
		}                                                                                                                    // 13634
		element.css(size);                                                                                                   // 13635
                                                                                                                       // 13636
		return wrapper.css( props ).show();                                                                                  // 13637
	},                                                                                                                    // 13638
                                                                                                                       // 13639
	removeWrapper: function( element ) {                                                                                  // 13640
		var active = document.activeElement;                                                                                 // 13641
                                                                                                                       // 13642
		if ( element.parent().is( ".ui-effects-wrapper" ) ) {                                                                // 13643
			element.parent().replaceWith( element );                                                                            // 13644
                                                                                                                       // 13645
			// Fixes #7595 - Elements lose focus when wrapped.                                                                  // 13646
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {                                              // 13647
				$( active ).focus();                                                                                               // 13648
			}                                                                                                                   // 13649
		}                                                                                                                    // 13650
                                                                                                                       // 13651
                                                                                                                       // 13652
		return element;                                                                                                      // 13653
	},                                                                                                                    // 13654
                                                                                                                       // 13655
	setTransition: function( element, list, factor, value ) {                                                             // 13656
		value = value || {};                                                                                                 // 13657
		$.each( list, function( i, x ) {                                                                                     // 13658
			var unit = element.cssUnit( x );                                                                                    // 13659
			if ( unit[ 0 ] > 0 ) {                                                                                              // 13660
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];                                                                       // 13661
			}                                                                                                                   // 13662
		});                                                                                                                  // 13663
		return value;                                                                                                        // 13664
	}                                                                                                                     // 13665
});                                                                                                                    // 13666
                                                                                                                       // 13667
// return an effect options object for the given parameters:                                                           // 13668
function _normalizeArguments( effect, options, speed, callback ) {                                                     // 13669
                                                                                                                       // 13670
	// allow passing all options as the first parameter                                                                   // 13671
	if ( $.isPlainObject( effect ) ) {                                                                                    // 13672
		options = effect;                                                                                                    // 13673
		effect = effect.effect;                                                                                              // 13674
	}                                                                                                                     // 13675
                                                                                                                       // 13676
	// convert to an object                                                                                               // 13677
	effect = { effect: effect };                                                                                          // 13678
                                                                                                                       // 13679
	// catch (effect, null, ...)                                                                                          // 13680
	if ( options == null ) {                                                                                              // 13681
		options = {};                                                                                                        // 13682
	}                                                                                                                     // 13683
                                                                                                                       // 13684
	// catch (effect, callback)                                                                                           // 13685
	if ( $.isFunction( options ) ) {                                                                                      // 13686
		callback = options;                                                                                                  // 13687
		speed = null;                                                                                                        // 13688
		options = {};                                                                                                        // 13689
	}                                                                                                                     // 13690
                                                                                                                       // 13691
	// catch (effect, speed, ?)                                                                                           // 13692
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {                                                        // 13693
		callback = speed;                                                                                                    // 13694
		speed = options;                                                                                                     // 13695
		options = {};                                                                                                        // 13696
	}                                                                                                                     // 13697
                                                                                                                       // 13698
	// catch (effect, options, callback)                                                                                  // 13699
	if ( $.isFunction( speed ) ) {                                                                                        // 13700
		callback = speed;                                                                                                    // 13701
		speed = null;                                                                                                        // 13702
	}                                                                                                                     // 13703
                                                                                                                       // 13704
	// add options to effect                                                                                              // 13705
	if ( options ) {                                                                                                      // 13706
		$.extend( effect, options );                                                                                         // 13707
	}                                                                                                                     // 13708
                                                                                                                       // 13709
	speed = speed || options.duration;                                                                                    // 13710
	effect.duration = $.fx.off ? 0 :                                                                                      // 13711
		typeof speed === "number" ? speed :                                                                                  // 13712
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :                                                                        // 13713
		$.fx.speeds._default;                                                                                                // 13714
                                                                                                                       // 13715
	effect.complete = callback || options.complete;                                                                       // 13716
                                                                                                                       // 13717
	return effect;                                                                                                        // 13718
}                                                                                                                      // 13719
                                                                                                                       // 13720
function standardSpeed( speed ) {                                                                                      // 13721
	// valid standard speeds                                                                                              // 13722
	if ( !speed || typeof speed === "number" || $.fx.speeds[ speed ] ) {                                                  // 13723
		return true;                                                                                                         // 13724
	}                                                                                                                     // 13725
                                                                                                                       // 13726
	// invalid strings - treat as "normal" speed                                                                          // 13727
	if ( typeof speed === "string" && !$.effects.effect[ speed ] ) {                                                      // 13728
		// TODO: remove in 2.0 (#7115)                                                                                       // 13729
		if ( backCompat && $.effects[ speed ] ) {                                                                            // 13730
			return false;                                                                                                       // 13731
		}                                                                                                                    // 13732
		return true;                                                                                                         // 13733
	}                                                                                                                     // 13734
                                                                                                                       // 13735
	return false;                                                                                                         // 13736
}                                                                                                                      // 13737
                                                                                                                       // 13738
$.fn.extend({                                                                                                          // 13739
	effect: function( /* effect, options, speed, callback */ ) {                                                          // 13740
		var args = _normalizeArguments.apply( this, arguments ),                                                             // 13741
			mode = args.mode,                                                                                                   // 13742
			queue = args.queue,                                                                                                 // 13743
			effectMethod = $.effects.effect[ args.effect ],                                                                     // 13744
                                                                                                                       // 13745
			// DEPRECATED: remove in 2.0 (#7115)                                                                                // 13746
			oldEffectMethod = !effectMethod && backCompat && $.effects[ args.effect ];                                          // 13747
                                                                                                                       // 13748
		if ( $.fx.off || !( effectMethod || oldEffectMethod ) ) {                                                            // 13749
			// delegate to the original method (e.g., .show()) if possible                                                      // 13750
			if ( mode ) {                                                                                                       // 13751
				return this[ mode ]( args.duration, args.complete );                                                               // 13752
			} else {                                                                                                            // 13753
				return this.each( function() {                                                                                     // 13754
					if ( args.complete ) {                                                                                            // 13755
						args.complete.call( this );                                                                                      // 13756
					}                                                                                                                 // 13757
				});                                                                                                                // 13758
			}                                                                                                                   // 13759
		}                                                                                                                    // 13760
                                                                                                                       // 13761
		function run( next ) {                                                                                               // 13762
			var elem = $( this ),                                                                                               // 13763
				complete = args.complete,                                                                                          // 13764
				mode = args.mode;                                                                                                  // 13765
                                                                                                                       // 13766
			function done() {                                                                                                   // 13767
				if ( $.isFunction( complete ) ) {                                                                                  // 13768
					complete.call( elem[0] );                                                                                         // 13769
				}                                                                                                                  // 13770
				if ( $.isFunction( next ) ) {                                                                                      // 13771
					next();                                                                                                           // 13772
				}                                                                                                                  // 13773
			}                                                                                                                   // 13774
                                                                                                                       // 13775
			// if the element is hiddden and mode is hide,                                                                      // 13776
			// or element is visible and mode is show                                                                           // 13777
			if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {                                                   // 13778
				done();                                                                                                            // 13779
			} else {                                                                                                            // 13780
				effectMethod.call( elem[0], args, done );                                                                          // 13781
			}                                                                                                                   // 13782
		}                                                                                                                    // 13783
                                                                                                                       // 13784
		// TODO: remove this check in 2.0, effectMethod will always be true                                                  // 13785
		if ( effectMethod ) {                                                                                                // 13786
			return queue === false ? this.each( run ) : this.queue( queue || "fx", run );                                       // 13787
		} else {                                                                                                             // 13788
			// DEPRECATED: remove in 2.0 (#7115)                                                                                // 13789
			return oldEffectMethod.call(this, {                                                                                 // 13790
				options: args,                                                                                                     // 13791
				duration: args.duration,                                                                                           // 13792
				callback: args.complete,                                                                                           // 13793
				mode: args.mode                                                                                                    // 13794
			});                                                                                                                 // 13795
		}                                                                                                                    // 13796
	},                                                                                                                    // 13797
                                                                                                                       // 13798
	_show: $.fn.show,                                                                                                     // 13799
	show: function( speed ) {                                                                                             // 13800
		if ( standardSpeed( speed ) ) {                                                                                      // 13801
			return this._show.apply( this, arguments );                                                                         // 13802
		} else {                                                                                                             // 13803
			var args = _normalizeArguments.apply( this, arguments );                                                            // 13804
			args.mode = "show";                                                                                                 // 13805
			return this.effect.call( this, args );                                                                              // 13806
		}                                                                                                                    // 13807
	},                                                                                                                    // 13808
                                                                                                                       // 13809
	_hide: $.fn.hide,                                                                                                     // 13810
	hide: function( speed ) {                                                                                             // 13811
		if ( standardSpeed( speed ) ) {                                                                                      // 13812
			return this._hide.apply( this, arguments );                                                                         // 13813
		} else {                                                                                                             // 13814
			var args = _normalizeArguments.apply( this, arguments );                                                            // 13815
			args.mode = "hide";                                                                                                 // 13816
			return this.effect.call( this, args );                                                                              // 13817
		}                                                                                                                    // 13818
	},                                                                                                                    // 13819
                                                                                                                       // 13820
	// jQuery core overloads toggle and creates _toggle                                                                   // 13821
	__toggle: $.fn.toggle,                                                                                                // 13822
	toggle: function( speed ) {                                                                                           // 13823
		if ( standardSpeed( speed ) || typeof speed === "boolean" || $.isFunction( speed ) ) {                               // 13824
			return this.__toggle.apply( this, arguments );                                                                      // 13825
		} else {                                                                                                             // 13826
			var args = _normalizeArguments.apply( this, arguments );                                                            // 13827
			args.mode = "toggle";                                                                                               // 13828
			return this.effect.call( this, args );                                                                              // 13829
		}                                                                                                                    // 13830
	},                                                                                                                    // 13831
                                                                                                                       // 13832
	// helper functions                                                                                                   // 13833
	cssUnit: function(key) {                                                                                              // 13834
		var style = this.css( key ),                                                                                         // 13835
			val = [];                                                                                                           // 13836
                                                                                                                       // 13837
		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {                                                             // 13838
			if ( style.indexOf( unit ) > 0 ) {                                                                                  // 13839
				val = [ parseFloat( style ), unit ];                                                                               // 13840
			}                                                                                                                   // 13841
		});                                                                                                                  // 13842
		return val;                                                                                                          // 13843
	}                                                                                                                     // 13844
});                                                                                                                    // 13845
                                                                                                                       // 13846
})();                                                                                                                  // 13847
                                                                                                                       // 13848
/******************************************************************************/                                       // 13849
/*********************************** EASING ***********************************/                                       // 13850
/******************************************************************************/                                       // 13851
                                                                                                                       // 13852
(function() {                                                                                                          // 13853
                                                                                                                       // 13854
// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)                                   // 13855
                                                                                                                       // 13856
var baseEasings = {};                                                                                                  // 13857
                                                                                                                       // 13858
$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {                                           // 13859
	baseEasings[ name ] = function( p ) {                                                                                 // 13860
		return Math.pow( p, i + 2 );                                                                                         // 13861
	};                                                                                                                    // 13862
});                                                                                                                    // 13863
                                                                                                                       // 13864
$.extend( baseEasings, {                                                                                               // 13865
	Sine: function ( p ) {                                                                                                // 13866
		return 1 - Math.cos( p * Math.PI / 2 );                                                                              // 13867
	},                                                                                                                    // 13868
	Circ: function ( p ) {                                                                                                // 13869
		return 1 - Math.sqrt( 1 - p * p );                                                                                   // 13870
	},                                                                                                                    // 13871
	Elastic: function( p ) {                                                                                              // 13872
		return p === 0 || p === 1 ? p :                                                                                      // 13873
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );                                    // 13874
	},                                                                                                                    // 13875
	Back: function( p ) {                                                                                                 // 13876
		return p * p * ( 3 * p - 2 );                                                                                        // 13877
	},                                                                                                                    // 13878
	Bounce: function ( p ) {                                                                                              // 13879
		var pow2,                                                                                                            // 13880
			bounce = 4;                                                                                                         // 13881
                                                                                                                       // 13882
		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}                                                     // 13883
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );                            // 13884
	}                                                                                                                     // 13885
});                                                                                                                    // 13886
                                                                                                                       // 13887
$.each( baseEasings, function( name, easeIn ) {                                                                        // 13888
	$.easing[ "easeIn" + name ] = easeIn;                                                                                 // 13889
	$.easing[ "easeOut" + name ] = function( p ) {                                                                        // 13890
		return 1 - easeIn( 1 - p );                                                                                          // 13891
	};                                                                                                                    // 13892
	$.easing[ "easeInOut" + name ] = function( p ) {                                                                      // 13893
		return p < 0.5 ?                                                                                                     // 13894
			easeIn( p * 2 ) / 2 :                                                                                               // 13895
			1 - easeIn( p * -2 + 2 ) / 2;                                                                                       // 13896
	};                                                                                                                    // 13897
});                                                                                                                    // 13898
                                                                                                                       // 13899
})();                                                                                                                  // 13900
                                                                                                                       // 13901
})(jQuery));                                                                                                           // 13902
(function( $, undefined ) {                                                                                            // 13903
                                                                                                                       // 13904
var rvertical = /up|down|vertical/,                                                                                    // 13905
	rpositivemotion = /up|left|vertical|horizontal/;                                                                      // 13906
                                                                                                                       // 13907
$.effects.effect.blind = function( o, done ) {                                                                         // 13908
	// Create element                                                                                                     // 13909
	var el = $( this ),                                                                                                   // 13910
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 13911
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 13912
		direction = o.direction || "up",                                                                                     // 13913
		vertical = rvertical.test( direction ),                                                                              // 13914
		ref = vertical ? "height" : "width",                                                                                 // 13915
		ref2 = vertical ? "top" : "left",                                                                                    // 13916
		motion = rpositivemotion.test( direction ),                                                                          // 13917
		animation = {},                                                                                                      // 13918
		show = mode === "show",                                                                                              // 13919
		wrapper, distance, margin;                                                                                           // 13920
                                                                                                                       // 13921
	// if already wrapped, the wrapper's properties are my property. #6245                                                // 13922
	if ( el.parent().is( ".ui-effects-wrapper" ) ) {                                                                      // 13923
		$.effects.save( el.parent(), props );                                                                                // 13924
	} else {                                                                                                              // 13925
		$.effects.save( el, props );                                                                                         // 13926
	}                                                                                                                     // 13927
	el.show();                                                                                                            // 13928
	wrapper = $.effects.createWrapper( el ).css({                                                                         // 13929
		overflow: "hidden"                                                                                                   // 13930
	});                                                                                                                   // 13931
                                                                                                                       // 13932
	distance = wrapper[ ref ]();                                                                                          // 13933
	margin = parseFloat( wrapper.css( ref2 ) ) || 0;                                                                      // 13934
                                                                                                                       // 13935
	animation[ ref ] = show ? distance : 0;                                                                               // 13936
	if ( !motion ) {                                                                                                      // 13937
		el                                                                                                                   // 13938
			.css( vertical ? "bottom" : "right", 0 )                                                                            // 13939
			.css( vertical ? "top" : "left", "auto" )                                                                           // 13940
			.css({ position: "absolute" });                                                                                     // 13941
                                                                                                                       // 13942
		animation[ ref2 ] = show ? margin : distance + margin;                                                               // 13943
	}                                                                                                                     // 13944
                                                                                                                       // 13945
	// start at 0 if we are showing                                                                                       // 13946
	if ( show ) {                                                                                                         // 13947
		wrapper.css( ref, 0 );                                                                                               // 13948
		if ( ! motion ) {                                                                                                    // 13949
			wrapper.css( ref2, margin + distance );                                                                             // 13950
		}                                                                                                                    // 13951
	}                                                                                                                     // 13952
                                                                                                                       // 13953
	// Animate                                                                                                            // 13954
	wrapper.animate( animation, {                                                                                         // 13955
		duration: o.duration,                                                                                                // 13956
		easing: o.easing,                                                                                                    // 13957
		queue: false,                                                                                                        // 13958
		complete: function() {                                                                                               // 13959
			if ( mode === "hide" ) {                                                                                            // 13960
				el.hide();                                                                                                         // 13961
			}                                                                                                                   // 13962
			$.effects.restore( el, props );                                                                                     // 13963
			$.effects.removeWrapper( el );                                                                                      // 13964
			done();                                                                                                             // 13965
		}                                                                                                                    // 13966
	});                                                                                                                   // 13967
                                                                                                                       // 13968
};                                                                                                                     // 13969
                                                                                                                       // 13970
})(jQuery);                                                                                                            // 13971
(function( $, undefined ) {                                                                                            // 13972
                                                                                                                       // 13973
$.effects.effect.bounce = function( o, done ) {                                                                        // 13974
	var el = $( this ),                                                                                                   // 13975
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 13976
                                                                                                                       // 13977
		// defaults:                                                                                                         // 13978
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 13979
		hide = mode === "hide",                                                                                              // 13980
		show = mode === "show",                                                                                              // 13981
		direction = o.direction || "up",                                                                                     // 13982
		distance = o.distance,                                                                                               // 13983
		times = o.times || 5,                                                                                                // 13984
                                                                                                                       // 13985
		// number of internal animations                                                                                     // 13986
		anims = times * 2 + ( show || hide ? 1 : 0 ),                                                                        // 13987
		speed = o.duration / anims,                                                                                          // 13988
		easing = o.easing,                                                                                                   // 13989
                                                                                                                       // 13990
		// utility:                                                                                                          // 13991
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",                                               // 13992
		motion = ( direction === "up" || direction === "left" ),                                                             // 13993
		i,                                                                                                                   // 13994
		upAnim,                                                                                                              // 13995
		downAnim,                                                                                                            // 13996
                                                                                                                       // 13997
		// we will need to re-assemble the queue to stack our animations in place                                            // 13998
		queue = el.queue(),                                                                                                  // 13999
		queuelen = queue.length;                                                                                             // 14000
                                                                                                                       // 14001
	// Avoid touching opacity to prevent clearType and PNG issues in IE                                                   // 14002
	if ( show || hide ) {                                                                                                 // 14003
		props.push( "opacity" );                                                                                             // 14004
	}                                                                                                                     // 14005
                                                                                                                       // 14006
	$.effects.save( el, props );                                                                                          // 14007
	el.show();                                                                                                            // 14008
	$.effects.createWrapper( el ); // Create Wrapper                                                                      // 14009
                                                                                                                       // 14010
	// default distance for the BIGGEST bounce is the outer Distance / 3                                                  // 14011
	if ( !distance ) {                                                                                                    // 14012
		distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;                                                 // 14013
	}                                                                                                                     // 14014
                                                                                                                       // 14015
	if ( show ) {                                                                                                         // 14016
		downAnim = { opacity: 1 };                                                                                           // 14017
		downAnim[ ref ] = 0;                                                                                                 // 14018
                                                                                                                       // 14019
		// if we are showing, force opacity 0 and set the initial position                                                   // 14020
		// then do the "first" animation                                                                                     // 14021
		el.css( "opacity", 0 )                                                                                               // 14022
			.css( ref, motion ? -distance * 2 : distance * 2 )                                                                  // 14023
			.animate( downAnim, speed, easing );                                                                                // 14024
	}                                                                                                                     // 14025
                                                                                                                       // 14026
	// start at the smallest distance if we are hiding                                                                    // 14027
	if ( hide ) {                                                                                                         // 14028
		distance = distance / Math.pow( 2, times - 1 );                                                                      // 14029
	}                                                                                                                     // 14030
                                                                                                                       // 14031
	downAnim = {};                                                                                                        // 14032
	downAnim[ ref ] = 0;                                                                                                  // 14033
	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here                                      // 14034
	for ( i = 0; i < times; i++ ) {                                                                                       // 14035
		upAnim = {};                                                                                                         // 14036
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;                                                                 // 14037
                                                                                                                       // 14038
		el.animate( upAnim, speed, easing )                                                                                  // 14039
			.animate( downAnim, speed, easing );                                                                                // 14040
                                                                                                                       // 14041
		distance = hide ? distance * 2 : distance / 2;                                                                       // 14042
	}                                                                                                                     // 14043
                                                                                                                       // 14044
	// Last Bounce when Hiding                                                                                            // 14045
	if ( hide ) {                                                                                                         // 14046
		upAnim = { opacity: 0 };                                                                                             // 14047
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;                                                                 // 14048
                                                                                                                       // 14049
		el.animate( upAnim, speed, easing );                                                                                 // 14050
	}                                                                                                                     // 14051
                                                                                                                       // 14052
	el.queue(function() {                                                                                                 // 14053
		if ( hide ) {                                                                                                        // 14054
			el.hide();                                                                                                          // 14055
		}                                                                                                                    // 14056
		$.effects.restore( el, props );                                                                                      // 14057
		$.effects.removeWrapper( el );                                                                                       // 14058
		done();                                                                                                              // 14059
	});                                                                                                                   // 14060
                                                                                                                       // 14061
	// inject all the animations we just queued to be first in line (after "inprogress")                                  // 14062
	if ( queuelen > 1) {                                                                                                  // 14063
		queue.splice.apply( queue,                                                                                           // 14064
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );                                                           // 14065
	}                                                                                                                     // 14066
	el.dequeue();                                                                                                         // 14067
                                                                                                                       // 14068
};                                                                                                                     // 14069
                                                                                                                       // 14070
})(jQuery);                                                                                                            // 14071
(function( $, undefined ) {                                                                                            // 14072
                                                                                                                       // 14073
$.effects.effect.clip = function( o, done ) {                                                                          // 14074
	// Create element                                                                                                     // 14075
	var el = $( this ),                                                                                                   // 14076
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 14077
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 14078
		show = mode === "show",                                                                                              // 14079
		direction = o.direction || "vertical",                                                                               // 14080
		vert = direction === "vertical",                                                                                     // 14081
		size = vert ? "height" : "width",                                                                                    // 14082
		position = vert ? "top" : "left",                                                                                    // 14083
		animation = {},                                                                                                      // 14084
		wrapper, animate, distance;                                                                                          // 14085
                                                                                                                       // 14086
	// Save & Show                                                                                                        // 14087
	$.effects.save( el, props );                                                                                          // 14088
	el.show();                                                                                                            // 14089
                                                                                                                       // 14090
	// Create Wrapper                                                                                                     // 14091
	wrapper = $.effects.createWrapper( el ).css({                                                                         // 14092
		overflow: "hidden"                                                                                                   // 14093
	});                                                                                                                   // 14094
	animate = ( el[0].tagName === "IMG" ) ? wrapper : el;                                                                 // 14095
	distance = animate[ size ]();                                                                                         // 14096
                                                                                                                       // 14097
	// Shift                                                                                                              // 14098
	if ( show ) {                                                                                                         // 14099
		animate.css( size, 0 );                                                                                              // 14100
		animate.css( position, distance / 2 );                                                                               // 14101
	}                                                                                                                     // 14102
                                                                                                                       // 14103
	// Create Animation Object:                                                                                           // 14104
	animation[ size ] = show ? distance : 0;                                                                              // 14105
	animation[ position ] = show ? 0 : distance / 2;                                                                      // 14106
                                                                                                                       // 14107
	// Animate                                                                                                            // 14108
	animate.animate( animation, {                                                                                         // 14109
		queue: false,                                                                                                        // 14110
		duration: o.duration,                                                                                                // 14111
		easing: o.easing,                                                                                                    // 14112
		complete: function() {                                                                                               // 14113
			if ( !show ) {                                                                                                      // 14114
				el.hide();                                                                                                         // 14115
			}                                                                                                                   // 14116
			$.effects.restore( el, props );                                                                                     // 14117
			$.effects.removeWrapper( el );                                                                                      // 14118
			done();                                                                                                             // 14119
		}                                                                                                                    // 14120
	});                                                                                                                   // 14121
                                                                                                                       // 14122
};                                                                                                                     // 14123
                                                                                                                       // 14124
})(jQuery);                                                                                                            // 14125
(function( $, undefined ) {                                                                                            // 14126
                                                                                                                       // 14127
$.effects.effect.drop = function( o, done ) {                                                                          // 14128
                                                                                                                       // 14129
	var el = $( this ),                                                                                                   // 14130
		props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],                              // 14131
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 14132
		show = mode === "show",                                                                                              // 14133
		direction = o.direction || "left",                                                                                   // 14134
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",                                               // 14135
		motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",                                             // 14136
		animation = {                                                                                                        // 14137
			opacity: show ? 1 : 0                                                                                               // 14138
		},                                                                                                                   // 14139
		distance;                                                                                                            // 14140
                                                                                                                       // 14141
	// Adjust                                                                                                             // 14142
	$.effects.save( el, props );                                                                                          // 14143
	el.show();                                                                                                            // 14144
	$.effects.createWrapper( el );                                                                                        // 14145
                                                                                                                       // 14146
	distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;                               // 14147
                                                                                                                       // 14148
	if ( show ) {                                                                                                         // 14149
		el                                                                                                                   // 14150
			.css( "opacity", 0 )                                                                                                // 14151
			.css( ref, motion === "pos" ? -distance : distance );                                                               // 14152
	}                                                                                                                     // 14153
                                                                                                                       // 14154
	// Animation                                                                                                          // 14155
	animation[ ref ] = ( show ?                                                                                           // 14156
		( motion === "pos" ? "+=" : "-=" ) :                                                                                 // 14157
		( motion === "pos" ? "-=" : "+=" ) ) +                                                                               // 14158
		distance;                                                                                                            // 14159
                                                                                                                       // 14160
	// Animate                                                                                                            // 14161
	el.animate( animation, {                                                                                              // 14162
		queue: false,                                                                                                        // 14163
		duration: o.duration,                                                                                                // 14164
		easing: o.easing,                                                                                                    // 14165
		complete: function() {                                                                                               // 14166
			if ( mode === "hide" ) {                                                                                            // 14167
				el.hide();                                                                                                         // 14168
			}                                                                                                                   // 14169
			$.effects.restore( el, props );                                                                                     // 14170
			$.effects.removeWrapper( el );                                                                                      // 14171
			done();                                                                                                             // 14172
		}                                                                                                                    // 14173
	});                                                                                                                   // 14174
};                                                                                                                     // 14175
                                                                                                                       // 14176
})(jQuery);                                                                                                            // 14177
(function( $, undefined ) {                                                                                            // 14178
                                                                                                                       // 14179
$.effects.effect.explode = function( o, done ) {                                                                       // 14180
                                                                                                                       // 14181
	var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,                                                        // 14182
		cells = rows,                                                                                                        // 14183
		el = $( this ),                                                                                                      // 14184
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 14185
		show = mode === "show",                                                                                              // 14186
                                                                                                                       // 14187
		// show and then visibility:hidden the element before calculating offset                                             // 14188
		offset = el.show().css( "visibility", "hidden" ).offset(),                                                           // 14189
                                                                                                                       // 14190
		// width and height of a piece                                                                                       // 14191
		width = Math.ceil( el.outerWidth() / cells ),                                                                        // 14192
		height = Math.ceil( el.outerHeight() / rows ),                                                                       // 14193
		pieces = [],                                                                                                         // 14194
                                                                                                                       // 14195
		// loop                                                                                                              // 14196
		i, j, left, top, mx, my;                                                                                             // 14197
                                                                                                                       // 14198
	// children animate complete:                                                                                         // 14199
	function childComplete() {                                                                                            // 14200
		pieces.push( this );                                                                                                 // 14201
		if ( pieces.length === rows * cells ) {                                                                              // 14202
			animComplete();                                                                                                     // 14203
		}                                                                                                                    // 14204
	}                                                                                                                     // 14205
                                                                                                                       // 14206
	// clone the element for each row and cell.                                                                           // 14207
	for( i = 0; i < rows ; i++ ) { // ===>                                                                                // 14208
		top = offset.top + i * height;                                                                                       // 14209
		my = i - ( rows - 1 ) / 2 ;                                                                                          // 14210
                                                                                                                       // 14211
		for( j = 0; j < cells ; j++ ) { // |||                                                                               // 14212
			left = offset.left + j * width;                                                                                     // 14213
			mx = j - ( cells - 1 ) / 2 ;                                                                                        // 14214
                                                                                                                       // 14215
			// Create a clone of the now hidden main element that will be absolute positioned                                   // 14216
			// within a wrapper div off the -left and -top equal to size of our pieces                                          // 14217
			el                                                                                                                  // 14218
				.clone()                                                                                                           // 14219
				.appendTo( "body" )                                                                                                // 14220
				.wrap( "<div></div>" )                                                                                             // 14221
				.css({                                                                                                             // 14222
					position: "absolute",                                                                                             // 14223
					visibility: "visible",                                                                                            // 14224
					left: -j * width,                                                                                                 // 14225
					top: -i * height                                                                                                  // 14226
				})                                                                                                                 // 14227
                                                                                                                       // 14228
			// select the wrapper - make it overflow: hidden and absolute positioned based on                                   // 14229
			// where the original was located +left and +top equal to the size of pieces                                        // 14230
				.parent()                                                                                                          // 14231
				.addClass( "ui-effects-explode" )                                                                                  // 14232
				.css({                                                                                                             // 14233
					position: "absolute",                                                                                             // 14234
					overflow: "hidden",                                                                                               // 14235
					width: width,                                                                                                     // 14236
					height: height,                                                                                                   // 14237
					left: left + ( show ? mx * width : 0 ),                                                                           // 14238
					top: top + ( show ? my * height : 0 ),                                                                            // 14239
					opacity: show ? 0 : 1                                                                                             // 14240
				}).animate({                                                                                                       // 14241
					left: left + ( show ? 0 : mx * width ),                                                                           // 14242
					top: top + ( show ? 0 : my * height ),                                                                            // 14243
					opacity: show ? 1 : 0                                                                                             // 14244
				}, o.duration || 500, o.easing, childComplete );                                                                   // 14245
		}                                                                                                                    // 14246
	}                                                                                                                     // 14247
                                                                                                                       // 14248
	function animComplete() {                                                                                             // 14249
		el.css({                                                                                                             // 14250
			visibility: "visible"                                                                                               // 14251
		});                                                                                                                  // 14252
		$( pieces ).remove();                                                                                                // 14253
		if ( !show ) {                                                                                                       // 14254
			el.hide();                                                                                                          // 14255
		}                                                                                                                    // 14256
		done();                                                                                                              // 14257
	}                                                                                                                     // 14258
};                                                                                                                     // 14259
                                                                                                                       // 14260
})(jQuery);                                                                                                            // 14261
(function( $, undefined ) {                                                                                            // 14262
                                                                                                                       // 14263
$.effects.effect.fade = function( o, done ) {                                                                          // 14264
	var el = $( this ),                                                                                                   // 14265
		mode = $.effects.setMode( el, o.mode || "toggle" );                                                                  // 14266
                                                                                                                       // 14267
	el.animate({                                                                                                          // 14268
		opacity: mode                                                                                                        // 14269
	}, {                                                                                                                  // 14270
		queue: false,                                                                                                        // 14271
		duration: o.duration,                                                                                                // 14272
		easing: o.easing,                                                                                                    // 14273
		complete: done                                                                                                       // 14274
	});                                                                                                                   // 14275
};                                                                                                                     // 14276
                                                                                                                       // 14277
})( jQuery );                                                                                                          // 14278
(function( $, undefined ) {                                                                                            // 14279
                                                                                                                       // 14280
$.effects.effect.fold = function( o, done ) {                                                                          // 14281
                                                                                                                       // 14282
	// Create element                                                                                                     // 14283
	var el = $( this ),                                                                                                   // 14284
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 14285
		mode = $.effects.setMode( el, o.mode || "hide" ),                                                                    // 14286
		show = mode === "show",                                                                                              // 14287
		hide = mode === "hide",                                                                                              // 14288
		size = o.size || 15,                                                                                                 // 14289
		percent = /([0-9]+)%/.exec( size ),                                                                                  // 14290
		horizFirst = !!o.horizFirst,                                                                                         // 14291
		widthFirst = show !== horizFirst,                                                                                    // 14292
		ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],                                                    // 14293
		duration = o.duration / 2,                                                                                           // 14294
		wrapper, distance,                                                                                                   // 14295
		animation1 = {},                                                                                                     // 14296
		animation2 = {};                                                                                                     // 14297
                                                                                                                       // 14298
	$.effects.save( el, props );                                                                                          // 14299
	el.show();                                                                                                            // 14300
                                                                                                                       // 14301
	// Create Wrapper                                                                                                     // 14302
	wrapper = $.effects.createWrapper( el ).css({                                                                         // 14303
		overflow: "hidden"                                                                                                   // 14304
	});                                                                                                                   // 14305
	distance = widthFirst ?                                                                                               // 14306
		[ wrapper.width(), wrapper.height() ] :                                                                              // 14307
		[ wrapper.height(), wrapper.width() ];                                                                               // 14308
                                                                                                                       // 14309
	if ( percent ) {                                                                                                      // 14310
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];                                                // 14311
	}                                                                                                                     // 14312
	if ( show ) {                                                                                                         // 14313
		wrapper.css( horizFirst ? {                                                                                          // 14314
			height: 0,                                                                                                          // 14315
			width: size                                                                                                         // 14316
		} : {                                                                                                                // 14317
			height: size,                                                                                                       // 14318
			width: 0                                                                                                            // 14319
		});                                                                                                                  // 14320
	}                                                                                                                     // 14321
                                                                                                                       // 14322
	// Animation                                                                                                          // 14323
	animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;                                                                 // 14324
	animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;                                                                    // 14325
                                                                                                                       // 14326
	// Animate                                                                                                            // 14327
	wrapper                                                                                                               // 14328
		.animate( animation1, duration, o.easing )                                                                           // 14329
		.animate( animation2, duration, o.easing, function() {                                                               // 14330
			if ( hide ) {                                                                                                       // 14331
				el.hide();                                                                                                         // 14332
			}                                                                                                                   // 14333
			$.effects.restore( el, props );                                                                                     // 14334
			$.effects.removeWrapper( el );                                                                                      // 14335
			done();                                                                                                             // 14336
		});                                                                                                                  // 14337
                                                                                                                       // 14338
};                                                                                                                     // 14339
                                                                                                                       // 14340
})(jQuery);                                                                                                            // 14341
(function( $, undefined ) {                                                                                            // 14342
                                                                                                                       // 14343
$.effects.effect.highlight = function( o, done ) {                                                                     // 14344
	var elem = $( this ),                                                                                                 // 14345
		props = [ "backgroundImage", "backgroundColor", "opacity" ],                                                         // 14346
		mode = $.effects.setMode( elem, o.mode || "show" ),                                                                  // 14347
		animation = {                                                                                                        // 14348
			backgroundColor: elem.css( "backgroundColor" )                                                                      // 14349
		};                                                                                                                   // 14350
                                                                                                                       // 14351
	if (mode === "hide") {                                                                                                // 14352
		animation.opacity = 0;                                                                                               // 14353
	}                                                                                                                     // 14354
                                                                                                                       // 14355
	$.effects.save( elem, props );                                                                                        // 14356
                                                                                                                       // 14357
	elem                                                                                                                  // 14358
		.show()                                                                                                              // 14359
		.css({                                                                                                               // 14360
			backgroundImage: "none",                                                                                            // 14361
			backgroundColor: o.color || "#ffff99"                                                                               // 14362
		})                                                                                                                   // 14363
		.animate( animation, {                                                                                               // 14364
			queue: false,                                                                                                       // 14365
			duration: o.duration,                                                                                               // 14366
			easing: o.easing,                                                                                                   // 14367
			complete: function() {                                                                                              // 14368
				if ( mode === "hide" ) {                                                                                           // 14369
					elem.hide();                                                                                                      // 14370
				}                                                                                                                  // 14371
				$.effects.restore( elem, props );                                                                                  // 14372
				done();                                                                                                            // 14373
			}                                                                                                                   // 14374
		});                                                                                                                  // 14375
};                                                                                                                     // 14376
                                                                                                                       // 14377
})(jQuery);                                                                                                            // 14378
(function( $, undefined ) {                                                                                            // 14379
                                                                                                                       // 14380
$.effects.effect.pulsate = function( o, done ) {                                                                       // 14381
	var elem = $( this ),                                                                                                 // 14382
		mode = $.effects.setMode( elem, o.mode || "show" ),                                                                  // 14383
		show = mode === "show",                                                                                              // 14384
		hide = mode === "hide",                                                                                              // 14385
		showhide = ( show || mode === "hide" ),                                                                              // 14386
                                                                                                                       // 14387
		// showing or hiding leaves of the "last" animation                                                                  // 14388
		anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),                                                             // 14389
		duration = o.duration / anims,                                                                                       // 14390
		animateTo = 0,                                                                                                       // 14391
		queue = elem.queue(),                                                                                                // 14392
		queuelen = queue.length,                                                                                             // 14393
		i;                                                                                                                   // 14394
                                                                                                                       // 14395
	if ( show || !elem.is(":visible")) {                                                                                  // 14396
		elem.css( "opacity", 0 ).show();                                                                                     // 14397
		animateTo = 1;                                                                                                       // 14398
	}                                                                                                                     // 14399
                                                                                                                       // 14400
	// anims - 1 opacity "toggles"                                                                                        // 14401
	for ( i = 1; i < anims; i++ ) {                                                                                       // 14402
		elem.animate({                                                                                                       // 14403
			opacity: animateTo                                                                                                  // 14404
		}, duration, o.easing );                                                                                             // 14405
		animateTo = 1 - animateTo;                                                                                           // 14406
	}                                                                                                                     // 14407
                                                                                                                       // 14408
	elem.animate({                                                                                                        // 14409
		opacity: animateTo                                                                                                   // 14410
	}, duration, o.easing);                                                                                               // 14411
                                                                                                                       // 14412
	elem.queue(function() {                                                                                               // 14413
		if ( hide ) {                                                                                                        // 14414
			elem.hide();                                                                                                        // 14415
		}                                                                                                                    // 14416
		done();                                                                                                              // 14417
	});                                                                                                                   // 14418
                                                                                                                       // 14419
	// We just queued up "anims" animations, we need to put them next in the queue                                        // 14420
	if ( queuelen > 1 ) {                                                                                                 // 14421
		queue.splice.apply( queue,                                                                                           // 14422
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );                                                           // 14423
	}                                                                                                                     // 14424
	elem.dequeue();                                                                                                       // 14425
};                                                                                                                     // 14426
                                                                                                                       // 14427
})(jQuery);                                                                                                            // 14428
(function( $, undefined ) {                                                                                            // 14429
                                                                                                                       // 14430
$.effects.effect.puff = function( o, done ) {                                                                          // 14431
	var elem = $( this ),                                                                                                 // 14432
		mode = $.effects.setMode( elem, o.mode || "hide" ),                                                                  // 14433
		hide = mode === "hide",                                                                                              // 14434
		percent = parseInt( o.percent, 10 ) || 150,                                                                          // 14435
		factor = percent / 100,                                                                                              // 14436
		original = {                                                                                                         // 14437
			height: elem.height(),                                                                                              // 14438
			width: elem.width(),                                                                                                // 14439
			outerHeight: elem.outerHeight(),                                                                                    // 14440
			outerWidth: elem.outerWidth()                                                                                       // 14441
		};                                                                                                                   // 14442
                                                                                                                       // 14443
	$.extend( o, {                                                                                                        // 14444
		effect: "scale",                                                                                                     // 14445
		queue: false,                                                                                                        // 14446
		fade: true,                                                                                                          // 14447
		mode: mode,                                                                                                          // 14448
		complete: done,                                                                                                      // 14449
		percent: hide ? percent : 100,                                                                                       // 14450
		from: hide ?                                                                                                         // 14451
			original :                                                                                                          // 14452
			{                                                                                                                   // 14453
				height: original.height * factor,                                                                                  // 14454
				width: original.width * factor,                                                                                    // 14455
				outerHeight: original.outerHeight * factor,                                                                        // 14456
				outerWidth: original.outerWidth * factor                                                                           // 14457
			}                                                                                                                   // 14458
	});                                                                                                                   // 14459
                                                                                                                       // 14460
	elem.effect( o );                                                                                                     // 14461
};                                                                                                                     // 14462
                                                                                                                       // 14463
$.effects.effect.scale = function( o, done ) {                                                                         // 14464
                                                                                                                       // 14465
	// Create element                                                                                                     // 14466
	var el = $( this ),                                                                                                   // 14467
		options = $.extend( true, {}, o ),                                                                                   // 14468
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 14469
		percent = parseInt( o.percent, 10 ) ||                                                                               // 14470
			( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),                                            // 14471
		direction = o.direction || "both",                                                                                   // 14472
		origin = o.origin,                                                                                                   // 14473
		original = {                                                                                                         // 14474
			height: el.height(),                                                                                                // 14475
			width: el.width(),                                                                                                  // 14476
			outerHeight: el.outerHeight(),                                                                                      // 14477
			outerWidth: el.outerWidth()                                                                                         // 14478
		},                                                                                                                   // 14479
		factor = {                                                                                                           // 14480
			y: direction !== "horizontal" ? (percent / 100) : 1,                                                                // 14481
			x: direction !== "vertical" ? (percent / 100) : 1                                                                   // 14482
		};                                                                                                                   // 14483
                                                                                                                       // 14484
	// We are going to pass this effect to the size effect:                                                               // 14485
	options.effect = "size";                                                                                              // 14486
	options.queue = false;                                                                                                // 14487
	options.complete = done;                                                                                              // 14488
                                                                                                                       // 14489
	// Set default origin and restore for show/hide                                                                       // 14490
	if ( mode !== "effect" ) {                                                                                            // 14491
		options.origin = origin || ["middle","center"];                                                                      // 14492
		options.restore = true;                                                                                              // 14493
	}                                                                                                                     // 14494
                                                                                                                       // 14495
	options.from = o.from || ( mode === "show" ? {                                                                        // 14496
		height: 0,                                                                                                           // 14497
		width: 0,                                                                                                            // 14498
		outerHeight: 0,                                                                                                      // 14499
		outerWidth: 0                                                                                                        // 14500
	} : original );                                                                                                       // 14501
	options.to = {                                                                                                        // 14502
		height: original.height * factor.y,                                                                                  // 14503
		width: original.width * factor.x,                                                                                    // 14504
		outerHeight: original.outerHeight * factor.y,                                                                        // 14505
		outerWidth: original.outerWidth * factor.x                                                                           // 14506
	};                                                                                                                    // 14507
                                                                                                                       // 14508
	// Fade option to support puff                                                                                        // 14509
	if ( options.fade ) {                                                                                                 // 14510
		if ( mode === "show" ) {                                                                                             // 14511
			options.from.opacity = 0;                                                                                           // 14512
			options.to.opacity = 1;                                                                                             // 14513
		}                                                                                                                    // 14514
		if ( mode === "hide" ) {                                                                                             // 14515
			options.from.opacity = 1;                                                                                           // 14516
			options.to.opacity = 0;                                                                                             // 14517
		}                                                                                                                    // 14518
	}                                                                                                                     // 14519
                                                                                                                       // 14520
	// Animate                                                                                                            // 14521
	el.effect( options );                                                                                                 // 14522
                                                                                                                       // 14523
};                                                                                                                     // 14524
                                                                                                                       // 14525
$.effects.effect.size = function( o, done ) {                                                                          // 14526
                                                                                                                       // 14527
	// Create element                                                                                                     // 14528
	var original, baseline, factor,                                                                                       // 14529
		el = $( this ),                                                                                                      // 14530
		props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],                 // 14531
                                                                                                                       // 14532
		// Always restore                                                                                                    // 14533
		props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],                                    // 14534
                                                                                                                       // 14535
		// Copy for children                                                                                                 // 14536
		props2 = [ "width", "height", "overflow" ],                                                                          // 14537
		cProps = [ "fontSize" ],                                                                                             // 14538
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],                                   // 14539
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],                                   // 14540
                                                                                                                       // 14541
		// Set options                                                                                                       // 14542
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 14543
		restore = o.restore || mode !== "effect",                                                                            // 14544
		scale = o.scale || "both",                                                                                           // 14545
		origin = o.origin || [ "middle", "center" ],                                                                         // 14546
		position = el.css( "position" ),                                                                                     // 14547
		props = restore ? props0 : props1,                                                                                   // 14548
		zero = {                                                                                                             // 14549
			height: 0,                                                                                                          // 14550
			width: 0,                                                                                                           // 14551
			outerHeight: 0,                                                                                                     // 14552
			outerWidth: 0                                                                                                       // 14553
		};                                                                                                                   // 14554
                                                                                                                       // 14555
	if ( mode === "show" ) {                                                                                              // 14556
		el.show();                                                                                                           // 14557
	}                                                                                                                     // 14558
	original = {                                                                                                          // 14559
		height: el.height(),                                                                                                 // 14560
		width: el.width(),                                                                                                   // 14561
		outerHeight: el.outerHeight(),                                                                                       // 14562
		outerWidth: el.outerWidth()                                                                                          // 14563
	};                                                                                                                    // 14564
                                                                                                                       // 14565
	if ( o.mode === "toggle" && mode === "show" ) {                                                                       // 14566
		el.from = o.to || zero;                                                                                              // 14567
		el.to = o.from || original;                                                                                          // 14568
	} else {                                                                                                              // 14569
		el.from = o.from || ( mode === "show" ? zero : original );                                                           // 14570
		el.to = o.to || ( mode === "hide" ? zero : original );                                                               // 14571
	}                                                                                                                     // 14572
                                                                                                                       // 14573
	// Set scaling factor                                                                                                 // 14574
	factor = {                                                                                                            // 14575
		from: {                                                                                                              // 14576
			y: el.from.height / original.height,                                                                                // 14577
			x: el.from.width / original.width                                                                                   // 14578
		},                                                                                                                   // 14579
		to: {                                                                                                                // 14580
			y: el.to.height / original.height,                                                                                  // 14581
			x: el.to.width / original.width                                                                                     // 14582
		}                                                                                                                    // 14583
	};                                                                                                                    // 14584
                                                                                                                       // 14585
	// Scale the css box                                                                                                  // 14586
	if ( scale === "box" || scale === "both" ) {                                                                          // 14587
                                                                                                                       // 14588
		// Vertical props scaling                                                                                            // 14589
		if ( factor.from.y !== factor.to.y ) {                                                                               // 14590
			props = props.concat( vProps );                                                                                     // 14591
			el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );                                            // 14592
			el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );                                                  // 14593
		}                                                                                                                    // 14594
                                                                                                                       // 14595
		// Horizontal props scaling                                                                                          // 14596
		if ( factor.from.x !== factor.to.x ) {                                                                               // 14597
			props = props.concat( hProps );                                                                                     // 14598
			el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );                                            // 14599
			el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );                                                  // 14600
		}                                                                                                                    // 14601
	}                                                                                                                     // 14602
                                                                                                                       // 14603
	// Scale the content                                                                                                  // 14604
	if ( scale === "content" || scale === "both" ) {                                                                      // 14605
                                                                                                                       // 14606
		// Vertical props scaling                                                                                            // 14607
		if ( factor.from.y !== factor.to.y ) {                                                                               // 14608
			props = props.concat( cProps ).concat( props2 );                                                                    // 14609
			el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );                                            // 14610
			el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );                                                  // 14611
		}                                                                                                                    // 14612
	}                                                                                                                     // 14613
                                                                                                                       // 14614
	$.effects.save( el, props );                                                                                          // 14615
	el.show();                                                                                                            // 14616
	$.effects.createWrapper( el );                                                                                        // 14617
	el.css( "overflow", "hidden" ).css( el.from );                                                                        // 14618
                                                                                                                       // 14619
	// Adjust                                                                                                             // 14620
	if (origin) { // Calculate baseline shifts                                                                            // 14621
		baseline = $.effects.getBaseline( origin, original );                                                                // 14622
		el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;                                              // 14623
		el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;                                               // 14624
		el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;                                               // 14625
		el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;                                                // 14626
	}                                                                                                                     // 14627
	el.css( el.from ); // set top & left                                                                                  // 14628
                                                                                                                       // 14629
	// Animate                                                                                                            // 14630
	if ( scale === "content" || scale === "both" ) { // Scale the children                                                // 14631
                                                                                                                       // 14632
		// Add margins/font-size                                                                                             // 14633
		vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);                                              // 14634
		hProps = hProps.concat([ "marginLeft", "marginRight" ]);                                                             // 14635
		props2 = props0.concat(vProps).concat(hProps);                                                                       // 14636
                                                                                                                       // 14637
		el.find( "*[width]" ).each( function(){                                                                              // 14638
			var child = $( this ),                                                                                              // 14639
				c_original = {                                                                                                     // 14640
					height: child.height(),                                                                                           // 14641
					width: child.width(),                                                                                             // 14642
					outerHeight: child.outerHeight(),                                                                                 // 14643
					outerWidth: child.outerWidth()                                                                                    // 14644
				};                                                                                                                 // 14645
			if (restore) {                                                                                                      // 14646
				$.effects.save(child, props2);                                                                                     // 14647
			}                                                                                                                   // 14648
                                                                                                                       // 14649
			child.from = {                                                                                                      // 14650
				height: c_original.height * factor.from.y,                                                                         // 14651
				width: c_original.width * factor.from.x,                                                                           // 14652
				outerHeight: c_original.outerHeight * factor.from.y,                                                               // 14653
				outerWidth: c_original.outerWidth * factor.from.x                                                                  // 14654
			};                                                                                                                  // 14655
			child.to = {                                                                                                        // 14656
				height: c_original.height * factor.to.y,                                                                           // 14657
				width: c_original.width * factor.to.x,                                                                             // 14658
				outerHeight: c_original.height * factor.to.y,                                                                      // 14659
				outerWidth: c_original.width * factor.to.x                                                                         // 14660
			};                                                                                                                  // 14661
                                                                                                                       // 14662
			// Vertical props scaling                                                                                           // 14663
			if ( factor.from.y !== factor.to.y ) {                                                                              // 14664
				child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );                                  // 14665
				child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );                                        // 14666
			}                                                                                                                   // 14667
                                                                                                                       // 14668
			// Horizontal props scaling                                                                                         // 14669
			if ( factor.from.x !== factor.to.x ) {                                                                              // 14670
				child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );                                  // 14671
				child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );                                        // 14672
			}                                                                                                                   // 14673
                                                                                                                       // 14674
			// Animate children                                                                                                 // 14675
			child.css( child.from );                                                                                            // 14676
			child.animate( child.to, o.duration, o.easing, function() {                                                         // 14677
                                                                                                                       // 14678
				// Restore children                                                                                                // 14679
				if ( restore ) {                                                                                                   // 14680
					$.effects.restore( child, props2 );                                                                               // 14681
				}                                                                                                                  // 14682
			});                                                                                                                 // 14683
		});                                                                                                                  // 14684
	}                                                                                                                     // 14685
                                                                                                                       // 14686
	// Animate                                                                                                            // 14687
	el.animate( el.to, {                                                                                                  // 14688
		queue: false,                                                                                                        // 14689
		duration: o.duration,                                                                                                // 14690
		easing: o.easing,                                                                                                    // 14691
		complete: function() {                                                                                               // 14692
			if ( el.to.opacity === 0 ) {                                                                                        // 14693
				el.css( "opacity", el.from.opacity );                                                                              // 14694
			}                                                                                                                   // 14695
			if( mode === "hide" ) {                                                                                             // 14696
				el.hide();                                                                                                         // 14697
			}                                                                                                                   // 14698
			$.effects.restore( el, props );                                                                                     // 14699
			if ( !restore ) {                                                                                                   // 14700
                                                                                                                       // 14701
				// we need to calculate our new positioning based on the scaling                                                   // 14702
				if ( position === "static" ) {                                                                                     // 14703
					el.css({                                                                                                          // 14704
						position: "relative",                                                                                            // 14705
						top: el.to.top,                                                                                                  // 14706
						left: el.to.left                                                                                                 // 14707
					});                                                                                                               // 14708
				} else {                                                                                                           // 14709
					$.each([ "top", "left" ], function( idx, pos ) {                                                                  // 14710
						el.css( pos, function( _, str ) {                                                                                // 14711
							var val = parseInt( str, 10 ),                                                                                  // 14712
								toRef = idx ? el.to.left : el.to.top;                                                                          // 14713
                                                                                                                       // 14714
							// if original was "auto", recalculate the new value from wrapper                                               // 14715
							if ( str === "auto" ) {                                                                                         // 14716
								return toRef + "px";                                                                                           // 14717
							}                                                                                                               // 14718
                                                                                                                       // 14719
							return val + toRef + "px";                                                                                      // 14720
						});                                                                                                              // 14721
					});                                                                                                               // 14722
				}                                                                                                                  // 14723
			}                                                                                                                   // 14724
                                                                                                                       // 14725
			$.effects.removeWrapper( el );                                                                                      // 14726
			done();                                                                                                             // 14727
		}                                                                                                                    // 14728
	});                                                                                                                   // 14729
                                                                                                                       // 14730
};                                                                                                                     // 14731
                                                                                                                       // 14732
})(jQuery);                                                                                                            // 14733
(function( $, undefined ) {                                                                                            // 14734
                                                                                                                       // 14735
$.effects.effect.shake = function( o, done ) {                                                                         // 14736
                                                                                                                       // 14737
	var el = $( this ),                                                                                                   // 14738
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],                                         // 14739
		mode = $.effects.setMode( el, o.mode || "effect" ),                                                                  // 14740
		direction = o.direction || "left",                                                                                   // 14741
		distance = o.distance || 20,                                                                                         // 14742
		times = o.times || 3,                                                                                                // 14743
		anims = times * 2 + 1,                                                                                               // 14744
		speed = Math.round(o.duration/anims),                                                                                // 14745
		ref = (direction === "up" || direction === "down") ? "top" : "left",                                                 // 14746
		positiveMotion = (direction === "up" || direction === "left"),                                                       // 14747
		animation = {},                                                                                                      // 14748
		animation1 = {},                                                                                                     // 14749
		animation2 = {},                                                                                                     // 14750
		i,                                                                                                                   // 14751
                                                                                                                       // 14752
		// we will need to re-assemble the queue to stack our animations in place                                            // 14753
		queue = el.queue(),                                                                                                  // 14754
		queuelen = queue.length;                                                                                             // 14755
                                                                                                                       // 14756
	$.effects.save( el, props );                                                                                          // 14757
	el.show();                                                                                                            // 14758
	$.effects.createWrapper( el );                                                                                        // 14759
                                                                                                                       // 14760
	// Animation                                                                                                          // 14761
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;                                                       // 14762
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;                                                  // 14763
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;                                                  // 14764
                                                                                                                       // 14765
	// Animate                                                                                                            // 14766
	el.animate( animation, speed, o.easing );                                                                             // 14767
                                                                                                                       // 14768
	// Shakes                                                                                                             // 14769
	for ( i = 1; i < times; i++ ) {                                                                                       // 14770
		el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );                                    // 14771
	}                                                                                                                     // 14772
	el                                                                                                                    // 14773
		.animate( animation1, speed, o.easing )                                                                              // 14774
		.animate( animation, speed / 2, o.easing )                                                                           // 14775
		.queue(function() {                                                                                                  // 14776
			if ( mode === "hide" ) {                                                                                            // 14777
				el.hide();                                                                                                         // 14778
			}                                                                                                                   // 14779
			$.effects.restore( el, props );                                                                                     // 14780
			$.effects.removeWrapper( el );                                                                                      // 14781
			done();                                                                                                             // 14782
		});                                                                                                                  // 14783
                                                                                                                       // 14784
	// inject all the animations we just queued to be first in line (after "inprogress")                                  // 14785
	if ( queuelen > 1) {                                                                                                  // 14786
		queue.splice.apply( queue,                                                                                           // 14787
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );                                                           // 14788
	}                                                                                                                     // 14789
	el.dequeue();                                                                                                         // 14790
                                                                                                                       // 14791
};                                                                                                                     // 14792
                                                                                                                       // 14793
})(jQuery);                                                                                                            // 14794
(function( $, undefined ) {                                                                                            // 14795
                                                                                                                       // 14796
$.effects.effect.slide = function( o, done ) {                                                                         // 14797
                                                                                                                       // 14798
	// Create element                                                                                                     // 14799
	var el = $( this ),                                                                                                   // 14800
		props = [ "position", "top", "bottom", "left", "right", "width", "height" ],                                         // 14801
		mode = $.effects.setMode( el, o.mode || "show" ),                                                                    // 14802
		show = mode === "show",                                                                                              // 14803
		direction = o.direction || "left",                                                                                   // 14804
		ref = (direction === "up" || direction === "down") ? "top" : "left",                                                 // 14805
		positiveMotion = (direction === "up" || direction === "left"),                                                       // 14806
		distance,                                                                                                            // 14807
		animation = {};                                                                                                      // 14808
                                                                                                                       // 14809
	// Adjust                                                                                                             // 14810
	$.effects.save( el, props );                                                                                          // 14811
	el.show();                                                                                                            // 14812
	distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );                                  // 14813
                                                                                                                       // 14814
	$.effects.createWrapper( el ).css({                                                                                   // 14815
		overflow: "hidden"                                                                                                   // 14816
	});                                                                                                                   // 14817
                                                                                                                       // 14818
	if ( show ) {                                                                                                         // 14819
		el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );                           // 14820
	}                                                                                                                     // 14821
                                                                                                                       // 14822
	// Animation                                                                                                          // 14823
	animation[ ref ] = ( show ?                                                                                           // 14824
		( positiveMotion ? "+=" : "-=") :                                                                                    // 14825
		( positiveMotion ? "-=" : "+=")) +                                                                                   // 14826
		distance;                                                                                                            // 14827
                                                                                                                       // 14828
	// Animate                                                                                                            // 14829
	el.animate( animation, {                                                                                              // 14830
		queue: false,                                                                                                        // 14831
		duration: o.duration,                                                                                                // 14832
		easing: o.easing,                                                                                                    // 14833
		complete: function() {                                                                                               // 14834
			if ( mode === "hide" ) {                                                                                            // 14835
				el.hide();                                                                                                         // 14836
			}                                                                                                                   // 14837
			$.effects.restore( el, props );                                                                                     // 14838
			$.effects.removeWrapper( el );                                                                                      // 14839
			done();                                                                                                             // 14840
		}                                                                                                                    // 14841
	});                                                                                                                   // 14842
};                                                                                                                     // 14843
                                                                                                                       // 14844
})(jQuery);                                                                                                            // 14845
(function( $, undefined ) {                                                                                            // 14846
                                                                                                                       // 14847
$.effects.effect.transfer = function( o, done ) {                                                                      // 14848
	var elem = $( this ),                                                                                                 // 14849
		target = $( o.to ),                                                                                                  // 14850
		targetFixed = target.css( "position" ) === "fixed",                                                                  // 14851
		body = $("body"),                                                                                                    // 14852
		fixTop = targetFixed ? body.scrollTop() : 0,                                                                         // 14853
		fixLeft = targetFixed ? body.scrollLeft() : 0,                                                                       // 14854
		endPosition = target.offset(),                                                                                       // 14855
		animation = {                                                                                                        // 14856
			top: endPosition.top - fixTop ,                                                                                     // 14857
			left: endPosition.left - fixLeft ,                                                                                  // 14858
			height: target.innerHeight(),                                                                                       // 14859
			width: target.innerWidth()                                                                                          // 14860
		},                                                                                                                   // 14861
		startPosition = elem.offset(),                                                                                       // 14862
		transfer = $( '<div class="ui-effects-transfer"></div>' )                                                            // 14863
			.appendTo( document.body )                                                                                          // 14864
			.addClass( o.className )                                                                                            // 14865
			.css({                                                                                                              // 14866
				top: startPosition.top - fixTop ,                                                                                  // 14867
				left: startPosition.left - fixLeft ,                                                                               // 14868
				height: elem.innerHeight(),                                                                                        // 14869
				width: elem.innerWidth(),                                                                                          // 14870
				position: targetFixed ? "fixed" : "absolute"                                                                       // 14871
			})                                                                                                                  // 14872
			.animate( animation, o.duration, o.easing, function() {                                                             // 14873
				transfer.remove();                                                                                                 // 14874
				done();                                                                                                            // 14875
			});                                                                                                                 // 14876
};                                                                                                                     // 14877
                                                                                                                       // 14878
})(jQuery);                                                                                                            // 14879
                                                                                                                       // 14880
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mrt:jquery-ui'] = {};

})();
