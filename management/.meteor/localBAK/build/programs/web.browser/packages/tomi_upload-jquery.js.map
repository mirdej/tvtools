)]}'
{"version":3,"sources":["tomi:upload-jquery/lib/vendor/jquery.ui.widget.js","tomi:upload-jquery/lib/jquery.iframe-transport.js","tomi:upload-jquery/lib/jquery.fileupload.js","tomi:upload-jquery/upload_semantic_ui.html","tomi:upload-jquery/upload_semantic_ui.js","tomi:upload-jquery/bootstrap/bootstrap_buttons.html","tomi:upload-jquery/bootstrap/bootstrap_buttons.js","tomi:upload-jquery/bootstrap/bootstrap_queue_item.html","tomi:upload-jquery/bootstrap/bootstrap_queue_item.js","tomi:upload-jquery/bootstrap/upload_bootstrap.html","tomi:upload-jquery/bootstrap/upload_bootstrap.js","tomi:upload-jquery/dropzone/dropzone.html","tomi:upload-jquery/dropzone/dropzone.js","tomi:upload-jquery/uploader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oC;AACA,qB;AACA,qB;AACA,0E;;AAEA,sB;AACA,oD;;AAEA,0C;AACA,iC;AACA,S;;AAEA,oB;AACA,oB;AACA,E;AACA,iB;AACA,G;AACA,0B;AACA,sB;AACA,E;AACA,0D;AACA,kC;AACA,4B;AACA,E;AACA,yC;AACA,G;;;AAGA,oB;AACA,sC;;AAEA,iC;AACA,2B;AACA,sB;AACA,iD;AACA,Q;;AAEA,sD;AACA,uC;AACA,oC;AACA,0C;AACA,K;;AAEA,wC;AACA,kB;AACA,G;AACA,gB;AACA,G;AACA,kB;;AAEA,8C;AACA,+D;AACA,wE;AACA,mE;AACA,wB;AACA,qC;;AAEA,+B;AACA,mC;;AAEA,oB;AACA,mB;AACA,kB;AACA,E;;AAEA,8B;AACA,6D;AACA,oC;AACA,G;;AAEA,uC;AACA,8C;AACA,sE;AACA,8C;AACA,8B;AACA,8C;AACA,G;;AAEA,oE;AACA,+D;AACA,2B;AACA,0C;AACA,G;AACA,G;AACA,4E;AACA,8C;AACA,6B;AACA,oE;AACA,8B;AACA,oC;AACA,uE;AACA,8C;AACA,wB;AACA,I;;AAEA,4B;AACA,4E;AACA,uE;AACA,mB;AACA,sE;AACA,6C;AACA,iC;AACA,oC;AACA,U;AACA,G;AACA,0C;AACA,4B;AACA,4D;AACA,M;AACA,oC;AACA,uD;AACA,M;AACA,sB;AACA,8B;AACA,qC;AACA,iB;;AAEA,yB;AACA,mC;;AAEA,iD;;AAEA,0B;AACA,oC;;AAEA,uB;AACA,K;AACA,O;AACA,I;AACA,0D;AACA,+C;AACA,uE;AACA,mD;AACA,2F;AACA,uB;AACA,2B;AACA,uB;AACA,mB;AACA,0B;AACA,I;;AAEA,2E;AACA,6E;AACA,2E;AACA,iC;AACA,6B;AACA,wE;AACA,wC;;AAEA,iE;AACA,mE;AACA,qG;AACA,K;AACA,4E;AACA,2D;AACA,gD;AACA,S;AACA,8C;AACA,E;;AAEA,sC;;AAEA,oB;AACA,E;;AAEA,sC;AACA,+C;AACA,iB;AACA,6B;AACA,M;AACA,Q;AACA,mD;AACA,sC;AACA,sC;AACA,4E;AACA,oB;AACA,qC;AACA,uD;AACA,mD;AACA,wD;AACA,mC;AACA,wC;AACA,Y;AACA,2B;AACA,K;AACA,I;AACA,G;AACA,E;AACA,e;AACA,E;;AAEA,4C;AACA,wD;AACA,qC;AACA,iD;AACA,4C;AACA,sB;;AAEA,+C;AACA,0C;AACA,4D;AACA,W;;AAEA,uB;AACA,yB;AACA,oB;AACA,yC;AACA,mC;AACA,4B;AACA,kB;AACA,K;AACA,sB;AACA,sF;AACA,qD;AACA,K;AACA,8E;AACA,2F;AACA,K;AACA,8D;AACA,kE;AACA,sD;AACA,kD;AACA,kB;AACA,kB;AACA,K;AACA,M;AACA,U;AACA,yB;AACA,4C;AACA,qB;AACA,sC;AACA,4B;AACA,uB;AACA,M;AACA,Y;AACA,2D;AACA,K;AACA,M;AACA,G;;AAEA,qB;AACA,G;AACA,E;;AAEA,iD;AACA,iC;;AAEA,sB;AACA,sB;AACA,uB;AACA,yB;AACA,W;AACA,kB;;AAEA,c;AACA,c;AACA,G;AACA,8C;AACA,6D;AACA,8B;AACA,4B;AACA,0D;AACA,qC;AACA,gB;AACA,4B;AACA,a;;AAEA,sB;AACA,uB;AACA,uB;;AAEA,2B;AACA,gD;AACA,kC;AACA,+B;AACA,sC;AACA,qB;AACA,M;AACA,K;AACA,M;AACA,qC;AACA,kC;AACA,2B;AACA,oC;AACA,kC;AACA,oF;AACA,G;;AAEA,iB;AACA,8D;AACA,e;AACA,G;AACA,2B;AACA,6B;AACA,iB;AACA,e;;AAEA,sB;AACA,kB;AACA,mD;AACA,oD;AACA,c;AACA,iC;AACA,qC;AACA,4B;AACA,wC;AACA,qD;AACA,e;AACA,iC;AACA,iC;AACA,gB;AACA,wC;AACA,0B;;AAEA,+B;AACA,8C;AACA,iD;AACA,iD;AACA,G;AACA,kB;;AAEA,qB;AACA,sB;AACA,G;;AAEA,iC;AACA,oB;AACA,S;AACA,a;AACA,K;;AAEA,iC;AACA,mD;AACA,8C;AACA,G;;AAEA,kC;AACA,kE;AACA,gB;AACA,4B;AACA,uB;AACA,wB;AACA,4E;AACA,8C;AACA,6D;AACA,yC;AACA,K;AACA,sB;AACA,mC;AACA,qE;AACA,K;AACA,6B;AACA,W;AACA,mC;AACA,2E;AACA,K;AACA,2B;AACA,I;AACA,G;;AAEA,8B;;AAEA,c;AACA,G;AACA,mC;AACA,U;;AAEA,0B;AACA,0C;AACA,G;;AAEA,c;AACA,G;AACA,qC;AACA,8B;;AAEA,6B;AACA,gB;AACA,+D;;AAEA,qE;AACA,iB;AACA,mD;AACA,mD;AACA,I;AACA,G;;AAEA,c;AACA,G;;AAEA,qB;AACA,+C;AACA,G;AACA,sB;AACA,8C;AACA,G;;AAEA,4D;AACA,sB;AACA,mB;;AAEA,qD;AACA,qD;AACA,sB;AACA,mC;AACA,iC;AACA,G;;AAEA,sD;AACA,oB;AACA,sB;AACA,0B;AACA,mC;AACA,U;AACA,4C;AACA,gD;AACA,G;;AAEA,gD;AACA,4B;AACA,uD;AACA,gD;AACA,gE;AACA,kC;AACA,6C;AACA,sD;AACA,Y;AACA,K;AACA,0E;AACA,mC;AACA,I;;AAEA,6C;AACA,uC;AACA,sC;AACA,mD;AACA,I;;AAEA,mD;AACA,mD;AACA,wB;AACA,oB;AACA,kE;AACA,W;AACA,4C;AACA,I;AACA,K;AACA,G;;AAEA,uC;AACA,qG;AACA,sD;AACA,G;;AAEA,qC;AACA,2B;AACA,yE;AACA,kC;AACA,G;AACA,sB;AACA,gD;AACA,G;;AAEA,kC;AACA,iD;AACA,sB;AACA,kC;AACA,0D;AACA,K;AACA,kC;AACA,6D;AACA,I;AACA,K;AACA,G;;AAEA,kC;AACA,iD;AACA,sB;AACA,+B;AACA,0D;AACA,K;AACA,gC;AACA,6D;AACA,I;AACA,K;AACA,G;;AAEA,0C;AACA,iB;AACA,mC;;AAEA,oB;AACA,2B;AACA,kD;AACA,S;AACA,iD;AACA,iD;AACA,oD;AACA,mC;;AAEA,yD;AACA,6B;AACA,e;AACA,yB;AACA,+B;AACA,kC;AACA,K;AACA,I;AACA,G;;AAEA,sC;AACA,uC;AACA,2E;AACA,gC;AACA,E;AACA,E;;AAEA,gF;AACA,8E;AACA,sC;AACA,iC;AACA,G;AACA,iB;AACA,0B;AACA,Y;AACA,qD;AACA,oB;AACA,qC;AACA,0B;AACA,sC;AACA,mC;AACA,G;AACA,2C;AACA,8B;AACA,wB;AACA,kC;AACA,G;AACA,oE;AACA,gC;AACA,gE;AACA,uE;AACA,U;AACA,mC;AACA,0B;AACA,qB;AACA,mC;AACA,K;AACA,W;AACA,M;AACA,G;AACA,G;AACA,G;;AAEA,sB;;;;AAIA,I;;;;;;;;;;;;;;;;;;;AC7iBA,E;AACA,uC;AACA,gD;AACA,E;AACA,mC;AACA,sB;AACA,E;AACA,kC;AACA,yC;AACA,G;;AAEA,qC;;AAEA,qB;AACA,iB;AACA,qD;AACA,+C;AACA,oC;AACA,Y;AACA,2B;AACA,+B;AACA,K;AACA,gB;AACA,iB;;AAEA,wE;AACA,oB;;AAEA,4D;AACA,kE;AACA,oE;AACA,+D;AACA,+C;AACA,4E;AACA,iE;AACA,sD;AACA,mE;AACA,6C;AACA,kD;AACA,4B;AACA,qD;AACA,uD;AACA,uC;AACA,mF;AACA,wC;AACA,qB;AACA,uB;AACA,6B;AACA,oB;AACA,sD;AACA,oE;AACA,2E;AACA,sE;AACA,iE;AACA,oD;AACA,oF;AACA,8C;AACA,wD;AACA,iF;AACA,8C;AACA,0D;AACA,mF;AACA,8C;AACA,qB;AACA,4E;AACA,wE;AACA,4E;AACA,iC;AACA,+B;AACA,4D;AACA,iF;AACA,gD;AACA,4C;AACA,uE;AACA,4E;AACA,8B;AACA,2C;AACA,uD;AACA,6C;AACA,uF;AACA,sF;AACA,qC;AACA,iE;AACA,gF;AACA,kF;AACA,uF;AACA,sF;AACA,0D;AACA,qC;AACA,6C;AACA,yD;AACA,iC;AACA,oE;AACA,8E;AACA,iD;AACA,wC;AACA,8C;AACA,wD;AACA,kC;AACA,+E;AACA,+E;AACA,qF;AACA,oD;AACA,+D;AACA,6E;AACA,iF;AACA,0D;AACA,kD;AACA,sC;AACA,+B;AACA,4B;AACA,gE;AACA,wD;AACA,0D;AACA,+C;AACA,8E;AACA,2D;AACA,6D;AACA,qD;AACA,oD;AACA,+B;AACA,yB;AACA,4E;AACA,0D;AACA,wE;AACA,wE;AACA,sE;AACA,8D;AACA,+B;AACA,oD;AACA,yE;AACA,iD;AACA,+C;AACA,8E;AACA,sC;AACA,mC;AACA,6B;AACA,iF;AACA,yE;AACA,gC;AACA,0D;AACA,uE;AACA,0E;AACA,yE;AACA,iF;AACA,iE;AACA,yB;AACA,sC;AACA,kF;AACA,sE;AACA,wE;AACA,4E;AACA,sE;AACA,iF;AACA,wC;AACA,qE;AACA,sE;AACA,yD;AACA,+B;AACA,yB;AACA,uB;AACA,gE;AACA,kB;AACA,oC;AACA,iC;AACA,4E;AACA,uE;AACA,iF;AACA,8B;AACA,2C;AACA,2D;AACA,qB;AACA,+B;AACA,sC;AACA,qB;AACA,iB;AACA,c;AACA,S;AACA,O;;AAEA,4E;AACA,yE;AACA,kB;AACA,gF;AACA,2E;AACA,0D;AACA,4E;AACA,2E;AACA,e;AACA,wF;AACA,iB;AACA,qB;AACA,8C;AACA,0D;AACA,c;AACA,8C;AACA,uE;AACA,c;AACA,8C;AACA,0D;AACA,c;AACA,6C;AACA,iD;AACA,8D;AACA,oF;AACA,mD;AACA,c;AACA,gD;AACA,wE;AACA,a;AACA,S;AACA,O;;AAEA,I;;;;;;;;;;;;;;;;;;;ACrNA,E;AACA,mC;AACA,gD;AACA,E;AACA,mC;AACA,sB;AACA,E;AACA,kC;AACA,yC;AACA,G;;AAEA,wB;AACA,+D;;AAEA,qB;AACA,e;AACA,kD;AACA,gB;AACA,gB;AACA,G;AACA,mD;AACA,2C;AACA,Y;AACA,e;AACA,wB;AACA,gB;AACA,U;AACA,uB;AACA,2B;AACA,G;AACA,gB;AACA,e;;AAEA,wC;AACA,iE;AACA,qC;AACA,2E;AACA,uC;AACA,kE;AACA,kC;AACA,sC;AACA,uC;AACA,+C;AACA,6C;;AAEA,6E;AACA,gF;AACA,4C;AACA,0E;AACA,wE;AACA,0E;AACA,sD;;AAEA,oE;AACA,+D;AACA,yD;;AAEA,8E;AACA,iC;AACA,yC;AACA,yB;AACA,uE;AACA,wC;AACA,0E;AACA,sB;AACA,e;AACA,4C;AACA,sB;AACA,2B;AACA,yB;AACA,2C;AACA,S;AACA,O;AACA,M;AACA,G;;AAEA,iF;AACA,0E;AACA,4E;AACA,8E;AACA,wB;AACA,4E;AACA,0E;AACA,qD;AACA,kC;;AAEA,c;AACA,0E;AACA,oD;AACA,4B;AACA,+D;AACA,mE;AACA,2B;AACA,yE;AACA,gE;AACA,wD;AACA,oD;AACA,2B;AACA,wE;AACA,6E;AACA,sE;AACA,iF;AACA,6B;AACA,+E;AACA,4E;AACA,0E;AACA,gD;AACA,2B;AACA,6E;AACA,kE;AACA,wC;AACA,8B;AACA,oE;AACA,+D;AACA,uC;AACA,0E;AACA,2E;AACA,wB;AACA,0C;AACA,4E;AACA,2E;AACA,uD;AACA,4C;AACA,2E;AACA,+B;AACA,+B;AACA,mD;AACA,+D;AACA,wC;AACA,4E;AACA,kC;AACA,0E;AACA,kE;AACA,0B;AACA,0E;AACA,4D;AACA,mC;AACA,0E;AACA,iD;AACA,6B;AACA,sE;AACA,kE;AACA,0D;AACA,sB;AACA,0E;AACA,2E;AACA,0E;AACA,gC;AACA,8B;AACA,2E;AACA,yE;AACA,0E;AACA,wE;AACA,0E;AACA,+B;AACA,8E;AACA,0E;AACA,wD;AACA,gC;AACA,2E;AACA,4B;AACA,gE;AACA,2B;AACA,yE;AACA,uB;;AAEA,iC;AACA,iB;AACA,wD;AACA,Q;;AAEA,oE;AACA,+D;AACA,yC;AACA,+D;AACA,sB;AACA,iD;AACA,8D;AACA,a;AACA,S;AACA,uB;AACA,Q;;AAEA,+E;AACA,2E;AACA,yE;AACA,2D;AACA,+E;AACA,iC;AACA,qC;AACA,Q;;AAEA,iF;AACA,+E;AACA,0E;AACA,8E;AACA,sC;AACA,Q;AACA,mF;AACA,0E;AACA,mF;AACA,Q;AACA,yE;AACA,sC;AACA,Q;AACA,+E;AACA,oD;AACA,0D;AACA,+B;AACA,qC;AACA,uB;AACA,S;AACA,4D;AACA,wD;AACA,2C;AACA,0B;AACA,a;AACA,S;AACA,Q;;AAEA,yB;;AAEA,2D;AACA,2E;;AAEA,4D;AACA,uE;;AAEA,yC;AACA,uE;;AAEA,sD;AACA,uE;;AAEA,mE;AACA,2E;;AAEA,6C;AACA,+E;;AAEA,oD;AACA,qF;;AAEA,8E;AACA,mE;;AAEA,4E;AACA,iE;;AAEA,wD;AACA,2E;;AAEA,uD;AACA,yE;;AAEA,qD;AACA,uE;;AAEA,yD;AACA,yE;;AAEA,6D;AACA,iF;;AAEA,+C;AACA,iF;;AAEA,4D;AACA,iF;;AAEA,gF;AACA,qF;;AAEA,2E;AACA,8E;AACA,yB;AACA,yB;AACA,kB;AACA,M;;AAEA,2E;AACA,mC;AACA,sB;AACA,kB;AACA,iB;AACA,kB;AACA,kB;AACA,4B;AACA,M;;AAEA,oD;AACA,kE;AACA,0C;AACA,M;;AAEA,gC;AACA,0E;AACA,sB;AACA,uB;AACA,0D;AACA,4C;AACA,gE;AACA,wE;AACA,+B;AACA,+B;AACA,S;AACA,4B;AACA,Q;AACA,M;;AAEA,sC;AACA,6C;AACA,2D;AACA,yC;AACA,M;;AAEA,sC;AACA,mB;AACA,oD;AACA,8C;AACA,O;AACA,wC;AACA,gC;AACA,O;AACA,kD;AACA,sB;AACA,yD;AACA,oD;AACA,W;AACA,wB;AACA,O;AACA,gB;AACA,M;;AAEA,iC;AACA,oB;AACA,4C;AACA,gC;AACA,S;AACA,mB;AACA,M;;AAEA,yC;AACA,sB;AACA,kB;AACA,iB;AACA,kB;AACA,Q;AACA,0B;AACA,0C;AACA,c;AACA,iC;AACA,O;AACA,M;;AAEA,yC;AACA,e;AACA,0B;AACA,qC;AACA,mD;AACA,uC;AACA,W;AACA,S;AACA,c;AACA,2B;AACA,O;AACA,M;;AAEA,qC;AACA,+B;AACA,qE;AACA,iB;AACA,kD;AACA,uD;AACA,iC;AACA,iB;AACA,S;AACA,yB;AACA,4B;AACA,uE;AACA,sC;AACA,8D;AACA,wC;AACA,kE;AACA,+D;AACA,c;AACA,gC;AACA,8B;AACA,U;AACA,qD;AACA,8E;AACA,c;AACA,iB;AACA,8B;AACA,U;AACA,yE;AACA,sE;AACA,2C;AACA,sB;AACA,qB;AACA,mD;AACA,c;AACA,U;AACA,wE;AACA,mE;AACA,sB;AACA,wB;AACA,sD;AACA,wB;AACA,U;AACA,O;AACA,M;;AAEA,+C;AACA,sB;AACA,iE;AACA,4E;AACA,uC;AACA,uB;AACA,qD;AACA,mC;AACA,qE;AACA,mD;AACA,+B;AACA,6B;AACA,uC;AACA,W;AACA,mC;AACA,qB;AACA,U;AACA,O;AACA,M;;AAEA,yC;AACA,qC;AACA,6E;AACA,M;;AAEA,sC;AACA,sB;AACA,iB;AACA,gC;AACA,uD;AACA,kE;AACA,2D;AACA,mD;AACA,sD;AACA,iC;AACA,gE;AACA,O;AACA,4E;AACA,2E;AACA,mC;AACA,O;AACA,uB;AACA,sE;AACA,4C;AACA,mD;AACA,kC;AACA,+D;AACA,6D;AACA,8D;AACA,0D;AACA,gD;AACA,6B;AACA,2B;AACA,8B;AACA,iC;AACA,e;AACA,kB;AACA,0D;AACA,6B;AACA,+D;AACA,uD;AACA,2B;AACA,iB;AACA,e;AACA,W;AACA,gB;AACA,iE;AACA,wC;AACA,kB;AACA,sC;AACA,wE;AACA,uD;AACA,e;AACA,W;AACA,6B;AACA,gE;AACA,kB;AACA,0D;AACA,wD;AACA,+B;AACA,qD;AACA,mD;AACA,gC;AACA,2D;AACA,yD;AACA,uB;AACA,8C;AACA,kB;AACA,e;AACA,e;AACA,W;AACA,S;AACA,gC;AACA,O;AACA,2D;AACA,0B;AACA,M;;AAEA,6C;AACA,2E;AACA,qE;AACA,8D;AACA,sE;AACA,oD;AACA,+D;AACA,2E;AACA,+B;AACA,wD;AACA,iC;AACA,W;AACA,O;AACA,M;;AAEA,2C;AACA,uC;AACA,kD;AACA,8B;AACA,uC;AACA,W;AACA,8C;AACA,S;AACA,kC;AACA,4D;AACA,mC;AACA,uE;AACA,S;AACA,c;AACA,0C;AACA,O;AACA,M;;AAEA,uC;AACA,2C;AACA,sC;AACA,uB;AACA,uB;AACA,oC;AACA,8B;AACA,mD;AACA,oD;AACA,qB;AACA,iC;AACA,mB;AACA,W;AACA,W;AACA,gC;AACA,4D;AACA,S;AACA,yC;AACA,gC;AACA,O;AACA,uB;AACA,M;;AAEA,2C;AACA,8D;AACA,uC;AACA,kD;AACA,yD;AACA,mE;AACA,oD;AACA,mC;AACA,gE;AACA,S;AACA,O;AACA,sD;AACA,yB;AACA,mE;AACA,O;AACA,yD;AACA,qC;AACA,0D;AACA,wC;AACA,sB;AACA,8D;AACA,mC;AACA,8B;AACA,O;AACA,uC;AACA,wE;AACA,O;AACA,M;;AAEA,uC;AACA,qD;AACA,sC;AACA,sC;AACA,qB;AACA,M;;AAEA,2C;AACA,iE;AACA,4C;AACA,2B;AACA,gC;AACA,O;AACA,kC;AACA,0B;AACA,O;AACA,kC;AACA,0B;AACA,O;AACA,uB;AACA,M;;AAEA,6C;AACA,2C;AACA,yC;AACA,qC;AACA,mC;AACA,wC;AACA,qB;AACA,M;;AAEA,yD;AACA,4D;AACA,+D;AACA,6B;AACA,gC;AACA,2D;AACA,qC;AACA,uC;AACA,6C;AACA,sC;AACA,O;AACA,kC;AACA,2C;AACA,M;;AAEA,8D;AACA,gD;AACA,sB;AACA,sC;AACA,gE;AACA,U;AACA,yD;AACA,wC;AACA,mD;AACA,4D;AACA,2B;AACA,uC;AACA,qC;AACA,wD;AACA,iB;AACA,6C;AACA,e;AACA,4C;AACA,S;AACA,wD;AACA,Q;AACA,iC;AACA,yC;AACA,mC;AACA,2B;AACA,uB;AACA,qD;AACA,kB;AACA,kD;AACA,S;AACA,mD;AACA,Q;AACA,gC;AACA,yB;AACA,oC;AACA,S;AACA,mC;AACA,0C;AACA,0C;AACA,Q;AACA,gC;AACA,yB;AACA,oD;AACA,S;AACA,iC;AACA,4D;AACA,S;AACA,Q;AACA,qC;AACA,wD;AACA,iE;AACA,Q;AACA,mC;AACA,8B;AACA,Q;AACA,mC;AACA,8B;AACA,Q;AACA,M;;AAEA,uD;AACA,sC;AACA,yC;AACA,mD;AACA,0C;AACA,oD;AACA,iC;AACA,gD;AACA,M;;AAEA,sD;AACA,wD;AACA,8D;AACA,4D;AACA,uB;AACA,kD;AACA,yD;AACA,sB;AACA,gC;AACA,uB;AACA,mC;AACA,yC;AACA,gC;AACA,2B;AACA,gC;AACA,c;AACA,e;AACA,uE;AACA,uB;AACA,qB;AACA,O;AACA,qB;AACA,oB;AACA,O;AACA,qB;AACA,mD;AACA,mC;AACA,gB;AACA,0B;AACA,qC;AACA,U;AACA,O;AACA,iC;AACA,4B;AACA,0D;AACA,sC;AACA,6C;AACA,4B;AACA,e;AACA,a;AACA,mB;AACA,mB;AACA,U;AACA,2D;AACA,sD;AACA,kC;AACA,iD;AACA,8C;AACA,0C;AACA,sE;AACA,6B;AACA,wD;AACA,sC;AACA,gF;AACA,8C;AACA,sD;AACA,iD;AACA,+B;AACA,iE;AACA,4D;AACA,8B;AACA,mE;AACA,oD;AACA,uC;AACA,6C;AACA,2C;AACA,qB;AACA,a;AACA,yD;AACA,8B;AACA,sC;AACA,4B;AACA,gD;AACA,kD;AACA,0B;AACA,8C;AACA,8C;AACA,uB;AACA,oB;AACA,8B;AACA,0B;AACA,2C;AACA,gB;AACA,a;AACA,Y;AACA,2D;AACA,4B;AACA,sC;AACA,wC;AACA,gD;AACA,kD;AACA,2B;AACA,wB;AACA,8C;AACA,c;AACA,a;AACA,Q;AACA,oC;AACA,mC;AACA,6B;AACA,Q;AACA,e;AACA,qB;AACA,M;;AAEA,qC;AACA,+B;AACA,gE;AACA,sD;AACA,oD;AACA,+B;AACA,6D;AACA,sD;AACA,4C;AACA,yD;AACA,mC;AACA,O;AACA,gE;AACA,6D;AACA,0C;AACA,qC;AACA,qC;AACA,oE;AACA,0E;AACA,gD;AACA,wB;AACA,+C;AACA,2C;AACA,yC;AACA,M;;AAEA,4D;AACA,0C;AACA,qC;AACA,6C;AACA,6D;AACA,yD;AACA,8C;AACA,iC;AACA,wB;AACA,sB;AACA,qB;AACA,O;AACA,gD;AACA,4D;AACA,6C;AACA,2C;AACA,M;;AAEA,iE;AACA,uC;AACA,wC;AACA,8D;AACA,2C;AACA,0D;AACA,wD;AACA,O;AACA,6C;AACA,4D;AACA,+D;AACA,2C;AACA,M;;AAEA,4E;AACA,oE;AACA,mD;AACA,6C;AACA,M;;AAEA,iC;AACA,yB;AACA,6C;AACA,O;AACA,sB;AACA,c;AACA,gB;AACA,a;AACA,a;AACA,8C;AACA,4B;AACA,6B;AACA,wD;AACA,2D;AACA,4B;AACA,qC;AACA,mB;AACA,iD;AACA,mB;AACA,yB;AACA,kE;AACA,yD;AACA,uD;AACA,+D;AACA,+D;AACA,oE;AACA,0E;AACA,6B;AACA,8B;AACA,2B;AACA,6B;AACA,uB;AACA,gB;AACA,iC;AACA,gC;AACA,mD;AACA,iE;AACA,gD;AACA,6C;AACA,mD;AACA,kC;AACA,uE;AACA,uC;AACA,0B;AACA,mB;AACA,iD;AACA,iB;AACA,e;AACA,uC;AACA,uE;AACA,2E;AACA,sC;AACA,e;AACA,e;AACA,uB;AACA,U;AACA,mC;AACA,2C;AACA,+C;AACA,gE;AACA,sD;AACA,8B;AACA,iC;AACA,iC;AACA,gB;AACA,2D;AACA,gC;AACA,S;AACA,0E;AACA,wE;AACA,wE;AACA,kC;AACA,kD;AACA,uB;AACA,uB;AACA,wD;AACA,a;AACA,0B;AACA,W;AACA,+B;AACA,U;AACA,0C;AACA,O;AACA,oB;AACA,M;;AAEA,gC;AACA,sB;AACA,sB;AACA,mD;AACA,2B;AACA,mC;AACA,8C;AACA,qD;AACA,4D;AACA,sB;AACA,gD;AACA,qB;AACA,uB;AACA,gB;AACA,U;AACA,c;AACA,uE;AACA,8B;AACA,O;AACA,8F;AACA,0B;AACA,mC;AACA,sE;AACA,qB;AACA,0B;AACA,kD;AACA,kD;AACA,yD;AACA,uC;AACA,uC;AACA,W;AACA,4C;AACA,S;AACA,2D;AACA,qB;AACA,0B;AACA,iD;AACA,gD;AACA,sC;AACA,uE;AACA,4C;AACA,gD;AACA,uD;AACA,yC;AACA,yC;AACA,a;AACA,8C;AACA,sB;AACA,0B;AACA,W;AACA,S;AACA,c;AACA,iC;AACA,O;AACA,iC;AACA,0D;AACA,yC;AACA,sD;AACA,gD;AACA,0C;AACA,0C;AACA,gD;AACA,+B;AACA,gB;AACA,8C;AACA,iB;AACA,U;AACA,sB;AACA,S;AACA,oB;AACA,M;;AAEA,wC;AACA,iC;AACA,uC;AACA,4E;AACA,uC;AACA,uD;AACA,iE;AACA,8C;AACA,uC;AACA,yD;AACA,0C;AACA,iE;AACA,qE;AACA,wB;AACA,4E;AACA,8B;AACA,+B;AACA,S;AACA,kB;AACA,S;AACA,qE;AACA,yD;AACA,yC;AACA,kC;AACA,O;AACA,M;;AAEA,kD;AACA,sB;AACA,2B;AACA,qC;AACA,8B;AACA,4B;AACA,W;AACA,oD;AACA,0D;AACA,sD;AACA,gD;AACA,2B;AACA,U;AACA,6C;AACA,sC;AACA,oB;AACA,mC;AACA,mC;AACA,iC;AACA,kC;AACA,U;AACA,mC;AACA,oD;AACA,kC;AACA,sC;AACA,oB;AACA,gD;AACA,4B;AACA,a;AACA,2B;AACA,U;AACA,gC;AACA,wB;AACA,yB;AACA,0B;AACA,8C;AACA,0C;AACA,mC;AACA,gB;AACA,sC;AACA,qC;AACA,8B;AACA,2B;AACA,S;AACA,qC;AACA,yC;AACA,sB;AACA,c;AACA,oD;AACA,2C;AACA,wB;AACA,O;AACA,2B;AACA,M;;AAEA,sD;AACA,sB;AACA,0B;AACA,U;AACA,yC;AACA,wD;AACA,U;AACA,0B;AACA,8C;AACA,e;AACA,qB;AACA,Y;AACA,W;AACA,M;;AAEA,+C;AACA,wC;AACA,qC;AACA,gE;AACA,+B;AACA,2C;AACA,wC;AACA,sB;AACA,wC;AACA,8C;AACA,0B;AACA,qD;AACA,+C;AACA,e;AACA,2B;AACA,a;AACA,qC;AACA,Y;AACA,U;AACA,O;AACA,kC;AACA,uC;AACA,kB;AACA,M;;AAEA,oD;AACA,+B;AACA,sD;AACA,oC;AACA,c;AACA,c;AACA,sC;AACA,oD;AACA,O;AACA,mD;AACA,0B;AACA,wC;AACA,qB;AACA,oD;AACA,S;AACA,uE;AACA,oE;AACA,iE;AACA,qD;AACA,oE;AACA,yD;AACA,8C;AACA,oC;AACA,oC;AACA,W;AACA,O;AACA,mD;AACA,M;;AAEA,8C;AACA,gE;AACA,wD;AACA,O;AACA,0B;AACA,U;AACA,uD;AACA,0B;AACA,8C;AACA,e;AACA,qB;AACA,Y;AACA,W;AACA,M;;AAEA,6B;AACA,sB;AACA,gB;AACA,iC;AACA,gC;AACA,U;AACA,uE;AACA,2B;AACA,4C;AACA,uC;AACA,S;AACA,0B;AACA,qB;AACA,mD;AACA,gB;AACA,wB;AACA,+B;AACA,S;AACA,S;AACA,M;;AAEA,4B;AACA,qE;AACA,8C;AACA,2B;AACA,kC;AACA,8C;AACA,wD;AACA,qB;AACA,kC;AACA,W;AACA,W;AACA,0B;AACA,oB;AACA,kD;AACA,gB;AACA,wB;AACA,+B;AACA,S;AACA,O;AACA,M;;AAEA,2B;AACA,uE;AACA,sB;AACA,sC;AACA,kB;AACA,4E;AACA,2B;AACA,qE;AACA,6B;AACA,4B;AACA,qB;AACA,mD;AACA,kB;AACA,0B;AACA,iC;AACA,W;AACA,W;AACA,O;AACA,M;;AAEA,4C;;AAEA,8C;;AAEA,8C;;AAEA,qC;AACA,4C;AACA,yC;AACA,qC;AACA,6B;AACA,uE;AACA,uC;AACA,mE;AACA,sC;AACA,W;AACA,0C;AACA,8B;AACA,W;AACA,O;AACA,gC;AACA,0C;AACA,gC;AACA,W;AACA,O;AACA,M;;AAEA,wC;AACA,4E;AACA,iD;AACA,kD;AACA,M;;AAEA,uC;AACA,+D;AACA,mB;AACA,qC;AACA,O;AACA,8B;AACA,mB;AACA,mC;AACA,kC;AACA,O;AACA,M;;AAEA,sC;AACA,iC;AACA,4C;AACA,mE;AACA,iE;AACA,qD;AACA,iD;AACA,O;AACA,6C;AACA,+C;AACA,O;AACA,8C;AACA,iD;AACA,O;AACA,M;;AAEA,gC;AACA,iC;AACA,gC;AACA,oB;AACA,oD;AACA,M;;AAEA,4C;AACA,2D;AACA,yC;AACA,M;;AAEA,sC;AACA,sB;AACA,+B;AACA,oD;AACA,0D;AACA,a;AACA,qB;AACA,+B;AACA,2C;AACA,sD;AACA,kE;AACA,8C;AACA,mD;AACA,6C;AACA,a;AACA,iC;AACA,W;AACA,S;AACA,Q;AACA,M;;AAEA,0B;AACA,iC;AACA,iC;AACA,uB;AACA,iD;AACA,uC;AACA,qC;AACA,gC;AACA,M;;AAEA,mE;AACA,oC;AACA,yB;AACA,0B;AACA,M;;AAEA,mE;AACA,kC;AACA,qE;AACA,+B;AACA,2B;AACA,4B;AACA,M;;AAEA,uE;AACA,2E;AACA,qE;AACA,8C;AACA,0B;AACA,sB;AACA,2C;AACA,e;AACA,O;AACA,0C;AACA,yE;AACA,6B;AACA,kC;AACA,W;AACA,c;AACA,6C;AACA,gC;AACA,O;AACA,M;;AAEA,wE;AACA,2E;AACA,kF;AACA,+C;AACA,oE;AACA,2B;AACA,2C;AACA,4C;AACA,0B;AACA,+B;AACA,oC;AACA,kB;AACA,oB;AACA,uC;AACA,2B;AACA,wB;AACA,mC;AACA,a;AACA,+C;AACA,2B;AACA,Y;AACA,yD;AACA,8B;AACA,4B;AACA,uB;AACA,e;AACA,kC;AACA,6B;AACA,uB;AACA,e;AACA,iC;AACA,+C;AACA,yB;AACA,sD;AACA,yD;AACA,kB;AACA,2D;AACA,6D;AACA,iB;AACA,gB;AACA,a;AACA,Y;AACA,+C;AACA,S;AACA,6C;AACA,gC;AACA,0C;AACA,S;AACA,O;AACA,8D;AACA,K;;AAEA,K;;AAEA,I;;;;;;;;;;;;;;;;;;;;ACl7CA,2C;AACA,0F;AACA,kB;AACA,oB;AACA,mB;AACA,kC;AACA,6B;AACA,qC;AACA,iC;AACA,8B;AACA,mI;AACA,sC;AACA,wH;AACA,iB;AACA,6B;AACA,2B;AACA,2B;AACA,yC;AACA,4D;AACA,M;AACA,wB;AACA,0D;AACA,K;AACA,wuB;AACA,I;;;;;;;;;;;;;;;;;;;ACzBA,uC;AACA,uC;AACA,6B;AACA,G;AACA,G;;AAEA,uD;AACA,6B;AACA,E;;;;;;;;;;;;;;;;;;;;;ACPA,0C;AACA,wF;AACA,kB;AACA,8B;AACA,+C;AACA,iB;AACA,gD;AACA,sD;AACA,mB;AACA,2C;AACA,iD;AACA,uC;AACA,4C;AACA,0F;AACA,mB;AACA,sD;AACA,sD;AACA,qB;AACA,4D;AACA,gE;AACA,uB;AACA,uD;AACA,2B;AACA,4D;AACA,mD;AACA,iD;AACA,mH;AACA,uB;AACA,uD;AACA,2B;AACA,wD;AACA,mD;AACA,iD;AACA,mH;AACA,+B;AACA,qB;AACA,iD;AACA,mD;AACA,6C;AACA,2C;AACA,sD;AACA,yB;AACA,mB;AACA,iB;AACA,qC;AACA,qD;AACA,iC;AACA,yC;AACA,yE;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACnDA,uC;AACA,sB;AACA,6B;AACA,I;AACA,2B;AACA,kC;AACA,I;AACA,yB;AACA,gC;AACA,I;AACA,iC;AACA,wC;AACA,G;AACA,G;;AAEA,sC;AACA,iC;AACA,iE;AACA,I;AACA,gC;AACA,gE;AACA,I;AACA,iC;AACA,oE;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACxBA,6C;AACA,8F;AACA,kB;AACA,mB;AACA,2B;AACA,4B;AACA,6B;AACA,0C;AACA,iC;AACA,sE;AACA,wB;AACA,yB;AACA,2B;AACA,uB;AACA,yD;AACA,K;AACA,8F;AACA,6B;AACA,kD;AACA,2E;AACA,wF;AACA,Y;AACA,wD;AACA,wD;AACA,2E;AACA,M;AACA,iB;AACA,uE;AACA,gB;AACA,I;;;;;;;;;;;;;;;;;;;AC9BA,0C;AACA,2B;AACA,2D;AACA,6B;AACA,oF;AACA,0H;AACA,I;AACA,2B;AACA,oB;AACA,Y;AACA,2B;AACA,kE;AACA,mE;AACA,Q;AACA,gC;AACA,iE;AACA,Q;AACA,8B;AACA,wE;AACA,Q;AACA,qC;AACA,oB;AACA,O;AACA,K;AACA,I;AACA,0B;AACA,6E;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC3BA,yC;AACA,sF;AACA,kB;AACA,oB;AACA,mB;AACA,kC;AACA,+B;AACA,0B;AACA,qJ;AACA,sD;AACA,wE;AACA,iB;AACA,6B;AACA,0B;AACA,yD;AACA,M;AACA,yC;AACA,4D;AACA,M;AACA,kC;AACA,2D;AACA,M;AACA,wB;AACA,0D;AACA,K;AACA,uD;AACA,iB;AACA,0C;AACA,qC;AACA,sE;AACA,wB;AACA,yB;AACA,2B;AACA,uB;AACA,yD;AACA,K;AACA,0G;AACA,6B;AACA,sD;AACA,2E;AACA,oG;AACA,Y;AACA,wD;AACA,qD;AACA,M;AACA,iB;AACA,uE;AACA,0D;AACA,oD;AACA,iB;AACA,qC;AACA,qC;AACA,mD;AACA,mC;AACA,2B;AACA,oD;AACA,uD;AACA,mB;AACA,qE;AACA,gB;AACA,iD;AACA,mD;AACA,U;AACA,qB;AACA,8E;AACA,iC;AACA,yD;AACA,gB;AACA,I;;;;;;;;;;;;;;;;;;;ACrEA,sF;AACA,oD;AACA,2B;AACA,E;;AAEA,sC;AACA,4B;AACA,wB;AACA,sD;AACA,Y;AACA,wD;AACA,K;AACA,yC;AACA,I;AACA,2B;AACA,yC;;AAEA,0C;AACA,2B;AACA,gB;AACA,K;;AAEA,6B;AACA,0F;AACA,sI;AACA,I;AACA,0B;AACA,2D;AACA,I;AACA,2B;AACA,oB;AACA,Y;AACA,2B;AACA,8C;AACA,Q;AACA,gC;AACA,+C;AACA,Q;AACA,8B;AACA,sD;AACA,Q;AACA,qC;AACA,qB;AACA,O;AACA,K;AACA,I;AACA,4B;AACA,gC;AACA,I;AACA,2B;AACA,2C;AACA,G;AACA,G;;AAEA,qD;AACA,6B;AACA,E;;;;;;;;;;;;;;;;;;;;;ACvDA,iC;AACA,sE;AACA,kB;AACA,oB;AACA,mB;AACA,kC;AACA,+B;AACA,iB;AACA,6B;AACA,qB;AACA,yC;AACA,4D;AACA,M;AACA,kC;AACA,2D;AACA,M;AACA,wB;AACA,0D;AACA,M;AACA,0B;AACA,8B;AACA,8B;AACA,4B;AACA,2E;AACA,iB;AACA,I;;;;;;;;;;;;;;;;;;;AC1BA,sF;AACA,4C;AACA,gC;AACA,6B;;AAEA,qB;AACA,2B;AACA,E;;AAEA,sF;AACA,8B;AACA,2B;AACA,yC;;AAEA,0C;AACA,6D;AACA,+B;AACA,K;AACA,mC;AACA,G;AACA,G;;AAEA,6C;AACA,iC;AACA,6B;;AAEA,8C;AACA,6C;AACA,oC;AACA,oB;AACA,uC;AACA,mB;AACA,8B;AACA,K;AACA,U;AACA,4B;AACA,K;AACA,sB;AACA,sB;AACA,Q;AACA,2C;AACA,qB;AACA,gC;AACA,c;AACA,O;AACA,6B;AACA,2B;;AAEA,qC;AACA,gB;AACA,sC;AACA,K;AACA,qD;AACA,oC;AACA,uC;AACA,Y;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;ACzDA,Y;AACA,sB;AACA,wC;AACA,0C;AACA,uC;AACA,kC;AACA,U;AACA,oB;AACA,e;AACA,kD;AACA,oC;AACA,I;AACA,kC;AACA,G;AACA,G;AACA,I;AACA,iB;AACA,Y;AACA,6E;AACA,I;AACA,iC;AACA,4B;;AAEA,qC;;AAEA,kB;;AAEA,kD;;AAEA,6B;AACA,wD;;AAEA,6B;AACA,8C;AACA,gE;AACA,M;AACA,qD;AACA,0G;AACA,M;AACA,gD;AACA,mE;AACA,O;AACA,K;AACA,G;AACA,oD;AACA,iJ;AACA,G;AACA,qC;AACA,qB;;AAEA,2B;AACA,kB;AACA,6C;AACA,kC;AACA,4B;AACA,gC;AACA,iB;AACA,I;AACA,K;;AAEA,sB;AACA,iC;;AAEA,gB;AACA,4B;AACA,G;AACA,mC;AACA,qB;;AAEA,kB;AACA,kD;AACA,kC;AACA,oD;;AAEA,0C;AACA,2D;AACA,iC;;AAEA,qC;AACA,+F;AACA,I;AACA,K;;AAEA,6B;AACA,c;AACA,kF;AACA,G;AACA,G;AACA,mB;AACA,oD;AACA,4C;AACA,4C;AACA,uB;AACA,+C;AACA,mC;AACA,+B;AACA,oF;AACA,G;AACA,sB;AACA,sF;AACA,kC;AACA,wD;AACA,4D;AACA,2D;AACA,mD;;;AAGA,yG;AACA,oD;;AAEA,2F;AACA,mE;AACA,4C;AACA,2B;AACA,oB;AACA,sC;AACA,4B;AACA,+B;;AAEA,+D;AACA,+C;AACA,qB;AACA,sB;AACA,uF;AACA,sC;AACA,uD;AACA,O;;AAEA,e;AACA,yC;;AAEA,2B;AACA,yD;;AAEA,4C;AACA,oC;AACA,gD;AACA,K;;AAEA,oC;AACA,6B;AACA,gC;;AAEA,oE;;AAEA,sD;AACA,oC;AACA,O;AACA,K;AACA,6B;AACA,gC;AACA,K;AACA,iC;AACA,mE;AACA,uD;AACA,a;AACA,a;AACA,oB;AACA,6D;AACA,2B;AACA,Q;AACA,K;AACA,K;AACA,oC;AACA,oC;AACA,mB;AACA,4D;AACA,6B;AACA,K;AACA,sE;AACA,+C;AACA,mD;AACA,O;AACA,K;AACA,sF;AACA,8D;AACA,+B;AACA,mC;AACA,mD;AACA,kE;;AAEA,+C;AACA,qD;AACA,O;AACA,I;AACA,I;AACA,0C;AACA,oE;AACA,G;AACA,0B;AACA,C;;AAEA,gC;AACA,iC;AACA,c;AACA,uE;AACA,mD;AACA,sE;AACA,C","file":"/packages/tomi:upload-jquery.js","sourcesContent":["/*! jQuery UI - v1.11.1 - 2014-09-17\n* http://jqueryui.com\n* Includes: widget.js\n* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */\n\n(function( factory ) {\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([ \"jquery\" ], factory );\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n}(function( $ ) {\n/*!\n * jQuery UI Widget 1.11.1\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/jQuery.widget/\n */\n\n\nvar widget_uuid = 0,\n\twidget_slice = Array.prototype.slice;\n\n$.cleanData = (function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; (elem = elems[i]) != null; i++ ) {\n\t\t\ttry {\n\n\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\tevents = $._data( elem, \"events\" );\n\t\t\t\tif ( events && events.remove ) {\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t\t}\n\n\t\t\t// http://bugs.jquery.com/ticket/8235\n\t\t\t} catch( e ) {}\n\t\t}\n\t\torig( elems );\n\t};\n})( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar fullName, existingConstructor, constructor, basePrototype,\n\t\t// proxiedPrototype allows the provided prototype to remain unmodified\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)\n\t\tproxiedPrototype = {},\n\t\tnamespace = name.split( \".\" )[ 0 ];\n\n\tname = name.split( \".\" )[ 1 ];\n\tfullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\t// create selector for plugin\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\t\t// allow instantiation without \"new\" keyword\n\t\tif ( !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\t// extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\t\t// copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\t\t// track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t});\n\n\tbasePrototype = new base();\n\t// we need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( !$.isFunction( value ) ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = (function() {\n\t\t\tvar _super = function() {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t\t},\n\t\t\t\t_superApply = function( args ) {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t\t};\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super,\n\t\t\t\t\t__superApply = this._superApply,\n\t\t\t\t\treturnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t})();\n\t});\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t});\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto );\n\t\t});\n\t\t// remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widget_slice.call( arguments, 1 ),\n\t\tinputIndex = 0,\n\t\tinputLength = input.length,\n\t\tkey,\n\t\tvalue;\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\",\n\t\t\targs = widget_slice.call( arguments, 1 ),\n\t\t\treturnValue = this;\n\n\t\t// allow multiple hashes to be passed on init\n\t\toptions = !isMethodCall && args.length ?\n\t\t\t$.widget.extend.apply( null, [ options ].concat(args) ) :\n\t\t\toptions;\n\n\t\tif ( isMethodCall ) {\n\t\t\tthis.each(function() {\n\t\t\t\tvar methodValue,\n\t\t\t\t\tinstance = $.data( this, fullName );\n\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\treturnValue = instance;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ( !instance ) {\n\t\t\t\t\treturn $.error( \"cannot call methods on \" + name + \" prior to initialization; \" +\n\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t}\n\t\t\t\tif ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name + \" widget instance\" );\n\t\t\t\t}\n\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\tmethodValue;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.each(function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\toptions: {\n\t\tdisabled: false,\n\n\t\t// callbacks\n\t\tcreate: null\n\t},\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widget_uuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.document = $( element.style ?\n\t\t\t\t// element within the document\n\t\t\t\telement.ownerDocument :\n\t\t\t\t// element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[0].defaultView || this.document[0].parentWindow );\n\t\t}\n\n\t\tthis._create();\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\t_getCreateOptions: $.noop,\n\t_getCreateEventData: $.noop,\n\t_create: $.noop,\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tthis._destroy();\n\t\t// we can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName )\n\t\t\t// support: jquery <1.6.3\n\t\t\t// http://bugs.jquery.com/ticket/9413\n\t\t\t.removeData( $.camelCase( this.widgetFullName ) );\n\t\tthis.widget()\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" )\n\t\t\t.removeClass(\n\t\t\t\tthis.widgetFullName + \"-disabled \" +\n\t\t\t\t\"ui-state-disabled\" );\n\n\t\t// clean up events and states\n\t\tthis.bindings.unbind( this.eventNamespace );\n\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t},\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key,\n\t\t\tparts,\n\t\t\tcurOption,\n\t\t\ti;\n\n\t\tif ( arguments.length === 0 ) {\n\t\t\t// don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\t\t\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\t_setOption: function( key, value ) {\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis.widget()\n\t\t\t\t.toggleClass( this.widgetFullName + \"-disabled\", !!value );\n\n\t\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\t\tif ( value ) {\n\t\t\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\t\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions({ disabled: false });\n\t},\n\tdisable: function() {\n\t\treturn this._setOptions({ disabled: true });\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement,\n\t\t\tinstance = this;\n\n\t\t// no suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// no element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\t\t\t\t// allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ ),\n\t\t\t\teventName = match[1] + instance.eventNamespace,\n\t\t\t\tselector = match[2];\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.delegate( selector, eventName, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.bind( eventName, handlerProxy );\n\t\t\t}\n\t\t});\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = (eventName || \"\").split( \" \" ).join( this.eventNamespace + \" \" ) + this.eventNamespace;\n\t\telement.unbind( eventName ).undelegate( eventName );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-hover\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig,\n\t\t\tcallback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\t\t// the original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( $.isFunction( callback ) &&\n\t\t\tcallback.apply( this.element[0], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\t\tvar hasOptions,\n\t\t\teffectName = !options ?\n\t\t\t\tmethod :\n\t\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\t\tdefaultEffect :\n\t\t\t\t\toptions.effect || defaultEffect;\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t}\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue(function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t});\n\t\t}\n\t};\n});\n\nvar widget = $.widget;\n\n\n\n}));\n","/*\n * jQuery Iframe Transport Plugin 1.8.2\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* global define, window, document */\n\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define(['jquery'], factory);\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Helper variable to create unique names for the transport iframes:\n    var counter = 0;\n\n    // The iframe transport accepts four additional options:\n    // options.fileInput: a jQuery collection of file input fields\n    // options.paramName: the parameter name for the file form data,\n    //  overrides the name property of the file input field(s),\n    //  can be a string or an array of strings.\n    // options.formData: an array of objects with name and value properties,\n    //  equivalent to the return data of .serializeArray(), e.g.:\n    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]\n    // options.initialIframeSrc: the URL of the initial iframe src,\n    //  by default set to \"javascript:false;\"\n    $.ajaxTransport('iframe', function (options) {\n        if (options.async) {\n            // javascript:false as initial iframe src\n            // prevents warning popups on HTTPS in IE6:\n            /*jshint scripturl: true */\n            var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',\n            /*jshint scripturl: false */\n                form,\n                iframe,\n                addParamChar;\n            return {\n                send: function (_, completeCallback) {\n                    form = $('<form style=\"display:none;\"></form>');\n                    form.attr('accept-charset', options.formAcceptCharset);\n                    addParamChar = /\\?/.test(options.url) ? '&' : '?';\n                    // XDomainRequest only supports GET and POST:\n                    if (options.type === 'DELETE') {\n                        options.url = options.url + addParamChar + '_method=DELETE';\n                        options.type = 'POST';\n                    } else if (options.type === 'PUT') {\n                        options.url = options.url + addParamChar + '_method=PUT';\n                        options.type = 'POST';\n                    } else if (options.type === 'PATCH') {\n                        options.url = options.url + addParamChar + '_method=PATCH';\n                        options.type = 'POST';\n                    }\n                    // IE versions below IE8 cannot set the name property of\n                    // elements that have already been added to the DOM,\n                    // so we set the name along with the iframe HTML markup:\n                    counter += 1;\n                    iframe = $(\n                        '<iframe src=\"' + initialIframeSrc +\n                            '\" name=\"iframe-transport-' + counter + '\"></iframe>'\n                    ).bind('load', function () {\n                        var fileInputClones,\n                            paramNames = $.isArray(options.paramName) ?\n                                    options.paramName : [options.paramName];\n                        iframe\n                            .unbind('load')\n                            .bind('load', function () {\n                                var response;\n                                // Wrap in a try/catch block to catch exceptions thrown\n                                // when trying to access cross-domain iframe contents:\n                                try {\n                                    response = iframe.contents();\n                                    // Google Chrome and Firefox do not throw an\n                                    // exception when calling iframe.contents() on\n                                    // cross-domain requests, so we unify the response:\n                                    if (!response.length || !response[0].firstChild) {\n                                        throw new Error();\n                                    }\n                                } catch (e) {\n                                    response = undefined;\n                                }\n                                // The complete callback returns the\n                                // iframe content document as response object:\n                                completeCallback(\n                                    200,\n                                    'success',\n                                    {'iframe': response}\n                                );\n                                // Fix for IE endless progress bar activity bug\n                                // (happens on form submits to iframe targets):\n                                $('<iframe src=\"' + initialIframeSrc + '\"></iframe>')\n                                    .appendTo(form);\n                                window.setTimeout(function () {\n                                    // Removing the form in a setTimeout call\n                                    // allows Chrome's developer tools to display\n                                    // the response result\n                                    form.remove();\n                                }, 0);\n                            });\n                        form\n                            .prop('target', iframe.prop('name'))\n                            .prop('action', options.url)\n                            .prop('method', options.type);\n                        if (options.formData) {\n                            $.each(options.formData, function (index, field) {\n                                $('<input type=\"hidden\"/>')\n                                    .prop('name', field.name)\n                                    .val(field.value)\n                                    .appendTo(form);\n                            });\n                        }\n                        if (options.fileInput && options.fileInput.length &&\n                                options.type === 'POST') {\n                            fileInputClones = options.fileInput.clone();\n                            // Insert a clone for each file input field:\n                            options.fileInput.after(function (index) {\n                                return fileInputClones[index];\n                            });\n                            if (options.paramName) {\n                                options.fileInput.each(function (index) {\n                                    $(this).prop(\n                                        'name',\n                                        paramNames[index] || options.paramName\n                                    );\n                                });\n                            }\n                            // Appending the file input fields to the hidden form\n                            // removes them from their original location:\n                            form\n                                .append(options.fileInput)\n                                .prop('enctype', 'multipart/form-data')\n                                // enctype must be set as encoding for IE:\n                                .prop('encoding', 'multipart/form-data');\n                            // Remove the HTML5 form attribute from the input(s):\n                            options.fileInput.removeAttr('form');\n                        }\n                        form.submit();\n                        // Insert the file input fields at their original location\n                        // by replacing the clones with the originals:\n                        if (fileInputClones && fileInputClones.length) {\n                            options.fileInput.each(function (index, input) {\n                                var clone = $(fileInputClones[index]);\n                                // Restore the original name and form properties:\n                                $(input)\n                                    .prop('name', clone.prop('name'))\n                                    .attr('form', clone.attr('form'));\n                                clone.replaceWith(input);\n                            });\n                        }\n                    });\n                    form.append(iframe).appendTo(document.body);\n                },\n                abort: function () {\n                    if (iframe) {\n                        // javascript:false as iframe src aborts the request\n                        // and prevents warning popups on HTTPS in IE6.\n                        // concat is used to avoid the \"Script URL\" JSLint error:\n                        iframe\n                            .unbind('load')\n                            .prop('src', initialIframeSrc);\n                    }\n                    if (form) {\n                        form.remove();\n                    }\n                }\n            };\n        }\n    });\n\n    // The iframe transport returns the iframe content document as response.\n    // The following adds converters from iframe to text, json, html, xml\n    // and script.\n    // Please note that the Content-Type for JSON responses has to be text/plain\n    // or text/html, if the browser doesn't include application/json in the\n    // Accept header, else IE will show a download dialog.\n    // The Content-Type for XML responses on the other hand has to be always\n    // application/xml or text/xml, so IE properly parses the XML response.\n    // See also\n    // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation\n    $.ajaxSetup({\n        converters: {\n            'iframe text': function (iframe) {\n                return iframe && $(iframe[0].body).text();\n            },\n            'iframe json': function (iframe) {\n                return iframe && $.parseJSON($(iframe[0].body).text());\n            },\n            'iframe html': function (iframe) {\n                return iframe && $(iframe[0].body).html();\n            },\n            'iframe xml': function (iframe) {\n                var xmlDoc = iframe && iframe[0];\n                return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :\n                        $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||\n                            $(xmlDoc.body).html());\n            },\n            'iframe script': function (iframe) {\n                return iframe && $.globalEval($(iframe[0].body).text());\n            }\n        }\n    });\n\n}));\n","/*\n * jQuery File Upload Plugin 5.42.0\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, window, document, location, Blob, FormData */\n\n(function (factory) {\n  'use strict';\n  // Added by me so that it compiles with velocity\n  if (!window) {\n    window = {};\n  }\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define([\n      'jquery',\n      'jquery.ui.widget'\n    ], factory);\n  } else {\n    // Browser globals:\n    factory(window.jQuery);\n  }\n}(function ($) {\n  'use strict';\n\n  // Detect file input support, based on\n  // http://viljamis.com/blog/2012/file-upload-support-on-mobile/\n  $.support.fileInput = !(new RegExp(\n    // Handle devices which give false positives for the feature detection:\n    '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n    '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n    '|(w(eb)?OSBrowser)|(webOS)' +\n    '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n  ).test(window.navigator.userAgent) ||\n    // Feature detection for all other devices:\n  $('<input type=\"file\">').prop('disabled'));\n\n  // The FileReader API is not actually used, but works as feature detection,\n  // as some Safari versions (5?) support XHR file uploads via the FormData API,\n  // but not non-multipart XHR file uploads.\n  // window.XMLHttpRequestUpload is not available on IE10, so we check for\n  // window.ProgressEvent instead to detect XHR2 file upload capability:\n  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n  $.support.xhrFormDataFileUpload = !!window.FormData;\n\n  // Detect support for Blob slicing (required for chunked uploads):\n  $.support.blobSlice = window.Blob && (Blob.prototype.slice ||\n  Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n  // Helper function to create drag handlers for dragover/dragenter/dragleave:\n  function getDragHandler(type) {\n    var isDragOver = type === 'dragover';\n    return function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var dataTransfer = e.dataTransfer;\n      if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&\n        this._trigger(\n          type,\n          $.Event(type, {delegatedEvent: e})\n        ) !== false) {\n        e.preventDefault();\n        if (isDragOver) {\n          dataTransfer.dropEffect = 'copy';\n        }\n      }\n    };\n  }\n\n  // The fileupload widget listens for change events on file input fields defined\n  // via fileInput setting and paste or drop events of the given dropZone.\n  // In addition to the default jQuery Widget methods, the fileupload widget\n  // exposes the \"add\" and \"send\" methods, to add or directly send files using\n  // the fileupload API.\n  // By default, files added via file input selection, paste, drag & drop or\n  // \"add\" method are uploaded immediately, but it is possible to override\n  // the \"add\" callback option to queue file uploads.\n  $.widget('blueimp.fileupload', {\n\n    options: {\n      // The drop target element(s), by the default the complete document.\n      // Set to null to disable drag & drop support:\n      dropZone: $(document),\n      // The paste target element(s), by the default undefined.\n      // Set to a DOM node or jQuery object to enable file pasting:\n      pasteZone: undefined,\n      // The file input field(s), that are listened to for change events.\n      // If undefined, it is set to the file input fields inside\n      // of the widget element on plugin initialization.\n      // Set to null to disable the change listener.\n      fileInput: undefined,\n      // By default, the file input field is replaced with a clone after\n      // each input field change event. This is required for iframe transport\n      // queues and allows change events to be fired for the same file\n      // selection, but can be disabled by setting the following option to false:\n      replaceFileInput: true,\n      // The parameter name for the file form data (the request argument name).\n      // If undefined or empty, the name property of the file input field is\n      // used, or \"files[]\" if the file input name property is also empty,\n      // can be a string or an array of strings:\n      paramName: undefined,\n      // By default, each file of a selection is uploaded using an individual\n      // request for XHR type uploads. Set to false to upload file\n      // selections in one request each:\n      singleFileUploads: true,\n      // To limit the number of files uploaded with one XHR request,\n      // set the following option to an integer greater than 0:\n      limitMultiFileUploads: undefined,\n      // The following option limits the number of files uploaded with one\n      // XHR request to keep the request size under or equal to the defined\n      // limit in bytes:\n      limitMultiFileUploadSize: undefined,\n      // Multipart file uploads add a number of bytes to each uploaded file,\n      // therefore the following option adds an overhead for each file used\n      // in the limitMultiFileUploadSize configuration:\n      limitMultiFileUploadSizeOverhead: 512,\n      // Set the following option to true to issue all file upload requests\n      // in a sequential order:\n      sequentialUploads: false,\n      // To limit the number of concurrent uploads,\n      // set the following option to an integer greater than 0:\n      limitConcurrentUploads: undefined,\n      // Set the following option to true to force iframe transport uploads:\n      forceIframeTransport: false,\n      // Set the following option to the location of a redirect url on the\n      // origin server, for cross-domain iframe transport uploads:\n      redirect: undefined,\n      // The parameter name for the redirect url, sent as part of the form\n      // data and set to 'redirect' if this option is empty:\n      redirectParamName: undefined,\n      // Set the following option to the location of a postMessage window,\n      // to enable postMessage transport uploads:\n      postMessage: undefined,\n      // By default, XHR file uploads are sent as multipart/form-data.\n      // The iframe transport is always using multipart/form-data.\n      // Set to false to enable non-multipart XHR uploads:\n      multipart: true,\n      // To upload large files in smaller chunks, set the following option\n      // to a preferred maximum chunk size. If set to 0, null or undefined,\n      // or the browser does not support the required Blob API, files will\n      // be uploaded as a whole.\n      maxChunkSize: undefined,\n      // When a non-multipart upload or a chunked multipart upload has been\n      // aborted, this option can be used to resume the upload by setting\n      // it to the size of the already uploaded bytes. This option is most\n      // useful when modifying the options object inside of the \"add\" or\n      // \"send\" callbacks, as the options are cloned for each file upload.\n      uploadedBytes: undefined,\n      // By default, failed (abort or error) file uploads are removed from the\n      // global progress calculation. Set the following option to false to\n      // prevent recalculating the global progress data:\n      recalculateProgress: true,\n      // Interval in milliseconds to calculate and trigger progress events:\n      progressInterval: 100,\n      // Interval in milliseconds to calculate progress bitrate:\n      bitrateInterval: 500,\n      // By default, uploads are started automatically when adding files:\n      autoUpload: true,\n\n      // Error and info messages:\n      messages: {\n        uploadedBytes: 'Uploaded bytes exceed file size'\n      },\n\n      // Translation function, gets the message key to be translated\n      // and an object with context specific data as arguments:\n      i18n: function (message, context) {\n        message = this.messages[message] || message.toString();\n        if (context) {\n          $.each(context, function (key, value) {\n            message = message.replace('{' + key + '}', value);\n          });\n        }\n        return message;\n      },\n\n      // Additional form data to be sent along with the file uploads can be set\n      // using this option, which accepts an array of objects with name and\n      // value properties, a function returning such an array, a FormData\n      // object (for XHR file uploads), or a simple object.\n      // The form of the first fileInput is given as parameter to the function:\n      formData: function (form) {\n        return form.serializeArray();\n      },\n\n      // The add callback is invoked as soon as files are added to the fileupload\n      // widget (via file input selection, drag & drop, paste or add API call).\n      // If the singleFileUploads option is enabled, this callback will be\n      // called once for each file in the selection for XHR file uploads, else\n      // once for each file selection.\n      //\n      // The upload starts when the submit method is invoked on the data parameter.\n      // The data object contains a files property holding the added files\n      // and allows you to override plugin options as well as define ajax settings.\n      //\n      // Listeners for this callback can also be bound the following way:\n      // .bind('fileuploadadd', func);\n      //\n      // data.submit() returns a Promise object and allows to attach additional\n      // handlers using jQuery's Deferred callbacks:\n      // data.submit().done(func).fail(func).always(func);\n      add: function (e, data) {\n        if (e.isDefaultPrevented()) {\n          return false;\n        }\n        if (data.autoUpload || (data.autoUpload !== false &&\n          $(this).fileupload('option', 'autoUpload'))) {\n          data.process().done(function () {\n            data.submit();\n          });\n        }\n      },\n\n      // Other callbacks:\n\n      // Callback for the submit event of each file upload:\n      // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n      // Callback for the start of each file upload request:\n      // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n      // Callback for successful uploads:\n      // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n      // Callback for failed (abort or error) uploads:\n      // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n      // Callback for completed (success, abort or error) requests:\n      // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n      // Callback for upload progress events:\n      // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n      // Callback for global upload progress events:\n      // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n      // Callback for uploads start, equivalent to the global ajaxStart event:\n      // start: function (e) {}, // .bind('fileuploadstart', func);\n\n      // Callback for uploads stop, equivalent to the global ajaxStop event:\n      // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n      // Callback for change events of the fileInput(s):\n      // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n      // Callback for paste events to the pasteZone(s):\n      // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n      // Callback for drop events of the dropZone(s):\n      // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n      // Callback for dragover events of the dropZone(s):\n      // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n      // Callback for the start of each chunk upload request:\n      // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n      // Callback for successful chunk uploads:\n      // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n      // Callback for failed (abort or error) chunk uploads:\n      // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n      // Callback for completed (success, abort or error) chunk upload requests:\n      // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n      // The plugin options are used as settings object for the ajax calls.\n      // The following are jQuery ajax settings required for the file uploads:\n      processData: false,\n      contentType: false,\n      cache: false\n    },\n\n    // A list of options that require reinitializing event listeners and/or\n    // special initialization code:\n    _specialOptions: [\n      'fileInput',\n      'dropZone',\n      'pasteZone',\n      'multipart',\n      'forceIframeTransport'\n    ],\n\n    _blobSlice: $.support.blobSlice && function () {\n      var slice = this.slice || this.webkitSlice || this.mozSlice;\n      return slice.apply(this, arguments);\n    },\n\n    _BitrateTimer: function () {\n      this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\n      this.loaded = 0;\n      this.bitrate = 0;\n      this.getBitrate = function (now, loaded, interval) {\n        var timeDiff = now - this.timestamp;\n        if (!this.bitrate || !interval || timeDiff > interval) {\n          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n          this.loaded = loaded;\n          this.timestamp = now;\n        }\n        return this.bitrate;\n      };\n    },\n\n    _isXHRUpload: function (options) {\n      return !options.forceIframeTransport &&\n        ((!options.multipart && $.support.xhrFileUpload) ||\n        $.support.xhrFormDataFileUpload);\n    },\n\n    _getFormData: function (options) {\n      var formData;\n      if ($.type(options.formData) === 'function') {\n        return options.formData(options.form);\n      }\n      if ($.isArray(options.formData)) {\n        return options.formData;\n      }\n      if ($.type(options.formData) === 'object') {\n        formData = [];\n        $.each(options.formData, function (name, value) {\n          formData.push({name: name, value: value});\n        });\n        return formData;\n      }\n      return [];\n    },\n\n    _getTotal: function (files) {\n      var total = 0;\n      $.each(files, function (index, file) {\n        total += file.size || 1;\n      });\n      return total;\n    },\n\n    _initProgressObject: function (obj) {\n      var progress = {\n        loaded: 0,\n        total: 0,\n        bitrate: 0\n      };\n      if (obj._progress) {\n        $.extend(obj._progress, progress);\n      } else {\n        obj._progress = progress;\n      }\n    },\n\n    _initResponseObject: function (obj) {\n      var prop;\n      if (obj._response) {\n        for (prop in obj._response) {\n          if (obj._response.hasOwnProperty(prop)) {\n            delete obj._response[prop];\n          }\n        }\n      } else {\n        obj._response = {};\n      }\n    },\n\n    _onProgress: function (e, data) {\n      if (e.lengthComputable) {\n        var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\n          loaded;\n        if (data._time && data.progressInterval &&\n          (now - data._time < data.progressInterval) &&\n          e.loaded !== e.total) {\n          return;\n        }\n        data._time = now;\n        loaded = Math.floor(\n          e.loaded / e.total * (data.chunkSize || data._progress.total)\n        ) + (data.uploadedBytes || 0);\n        // Add the difference from the previously loaded state\n        // to the global loaded counter:\n        this._progress.loaded += (loaded - data._progress.loaded);\n        this._progress.bitrate = this._bitrateTimer.getBitrate(\n          now,\n          this._progress.loaded,\n          data.bitrateInterval\n        );\n        data._progress.loaded = data.loaded = loaded;\n        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n          now,\n          loaded,\n          data.bitrateInterval\n        );\n        // Trigger a custom progress event with a total data property set\n        // to the file size(s) of the current upload and a loaded data\n        // property calculated accordingly:\n        this._trigger(\n          'progress',\n          $.Event('progress', {delegatedEvent: e}),\n          data\n        );\n        // Trigger a global progress event for all current file uploads,\n        // including ajax calls queued for sequential file uploads:\n        this._trigger(\n          'progressall',\n          $.Event('progressall', {delegatedEvent: e}),\n          this._progress\n        );\n      }\n    },\n\n    _initProgressListener: function (options) {\n      var that = this,\n        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      // Accesss to the native XHR object is required to add event listeners\n      // for the upload progress event:\n      if (xhr.upload) {\n        $(xhr.upload).bind('progress', function (e) {\n          var oe = e.originalEvent;\n          // Make sure the progress event properties get copied over:\n          e.lengthComputable = oe.lengthComputable;\n          e.loaded = oe.loaded;\n          e.total = oe.total;\n          that._onProgress(e, options);\n        });\n        options.xhr = function () {\n          return xhr;\n        };\n      }\n    },\n\n    _isInstanceOf: function (type, obj) {\n      // Cross-frame instanceof check\n      return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n    },\n\n    _initXHRData: function (options) {\n      var that = this,\n        formData,\n        file = options.files[0],\n      // Ignore non-multipart setting if not supported:\n        multipart = options.multipart || !$.support.xhrFileUpload,\n        paramName = $.type(options.paramName) === 'array' ?\n          options.paramName[0] : options.paramName;\n      options.headers = $.extend({}, options.headers);\n      if (options.contentRange) {\n        options.headers['Content-Range'] = options.contentRange;\n      }\n      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n        options.headers['Content-Disposition'] = 'attachment; filename=\"' +\n        encodeURI(file.name) + '\"';\n      }\n      if (!multipart) {\n        options.contentType = file.type || 'application/octet-stream';\n        options.data = options.blob || file;\n      } else if ($.support.xhrFormDataFileUpload) {\n        if (options.postMessage) {\n          // window.postMessage does not allow sending FormData\n          // objects, so we just add the File/Blob objects to\n          // the formData array and let the postMessage window\n          // create the FormData object out of this array:\n          formData = this._getFormData(options);\n          if (options.blob) {\n            formData.push({\n              name: paramName,\n              value: options.blob\n            });\n          } else {\n            $.each(options.files, function (index, file) {\n              formData.push({\n                name: ($.type(options.paramName) === 'array' &&\n                options.paramName[index]) || paramName,\n                value: file\n              });\n            });\n          }\n        } else {\n          if (that._isInstanceOf('FormData', options.formData)) {\n            formData = options.formData;\n          } else {\n            formData = new FormData();\n            $.each(this._getFormData(options), function (index, field) {\n              formData.append(field.name, field.value);\n            });\n          }\n          if (options.blob) {\n            formData.append(paramName, options.blob, file.name);\n          } else {\n            $.each(options.files, function (index, file) {\n              // This check allows the tests to run with\n              // dummy objects:\n              if (that._isInstanceOf('File', file) ||\n                that._isInstanceOf('Blob', file)) {\n                formData.append(\n                  ($.type(options.paramName) === 'array' &&\n                  options.paramName[index]) || paramName,\n                  file,\n                  file.uploadName || file.name\n                );\n              }\n            });\n          }\n        }\n        options.data = formData;\n      }\n      // Blob reference is not needed anymore, free memory:\n      options.blob = null;\n    },\n\n    _initIframeSettings: function (options) {\n      var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n      // Setting the dataType to iframe enables the iframe transport:\n      options.dataType = 'iframe ' + (options.dataType || '');\n      // The iframe transport accepts a serialized array as form data:\n      options.formData = this._getFormData(options);\n      // Add redirect url to form data on cross-domain uploads:\n      if (options.redirect && targetHost && targetHost !== location.host) {\n        options.formData.push({\n          name: options.redirectParamName || 'redirect',\n          value: options.redirect\n        });\n      }\n    },\n\n    _initDataSettings: function (options) {\n      if (this._isXHRUpload(options)) {\n        if (!this._chunkedUpload(options, true)) {\n          if (!options.data) {\n            this._initXHRData(options);\n          }\n          this._initProgressListener(options);\n        }\n        if (options.postMessage) {\n          // Setting the dataType to postmessage enables the\n          // postMessage transport:\n          options.dataType = 'postmessage ' + (options.dataType || '');\n        }\n      } else {\n        this._initIframeSettings(options);\n      }\n    },\n\n    _getParamName: function (options) {\n      var fileInput = $(options.fileInput),\n        paramName = options.paramName;\n      if (!paramName) {\n        paramName = [];\n        fileInput.each(function () {\n          var input = $(this),\n            name = input.prop('name') || 'files[]',\n            i = (input.prop('files') || [1]).length;\n          while (i) {\n            paramName.push(name);\n            i -= 1;\n          }\n        });\n        if (!paramName.length) {\n          paramName = [fileInput.prop('name') || 'files[]'];\n        }\n      } else if (!$.isArray(paramName)) {\n        paramName = [paramName];\n      }\n      return paramName;\n    },\n\n    _initFormSettings: function (options) {\n      // Retrieve missing options from the input field and the\n      // associated form, if available:\n      if (!options.form || !options.form.length) {\n        options.form = $(options.fileInput.prop('form'));\n        // If the given file input doesn't have an associated form,\n        // use the default widget file input's form:\n        if (!options.form.length) {\n          options.form = $(this.options.fileInput.prop('form'));\n        }\n      }\n      options.paramName = this._getParamName(options);\n      if (!options.url) {\n        options.url = options.form.prop('action') || location.href;\n      }\n      // The HTTP request method must be \"POST\" or \"PUT\":\n      options.type = (options.type ||\n      ($.type(options.form.prop('method')) === 'string' &&\n      options.form.prop('method')) || ''\n      ).toUpperCase();\n      if (options.type !== 'POST' && options.type !== 'PUT' &&\n        options.type !== 'PATCH') {\n        options.type = 'POST';\n      }\n      if (!options.formAcceptCharset) {\n        options.formAcceptCharset = options.form.attr('accept-charset');\n      }\n    },\n\n    _getAJAXSettings: function (data) {\n      var options = $.extend({}, this.options, data);\n      this._initFormSettings(options);\n      this._initDataSettings(options);\n      return options;\n    },\n\n    // jQuery 1.6 doesn't provide .state(),\n    // while jQuery 1.8+ removed .isRejected() and .isResolved():\n    _getDeferredState: function (deferred) {\n      if (deferred.state) {\n        return deferred.state();\n      }\n      if (deferred.isResolved()) {\n        return 'resolved';\n      }\n      if (deferred.isRejected()) {\n        return 'rejected';\n      }\n      return 'pending';\n    },\n\n    // Maps jqXHR callbacks to the equivalent\n    // methods of the given Promise object:\n    _enhancePromise: function (promise) {\n      promise.success = promise.done;\n      promise.error = promise.fail;\n      promise.complete = promise.always;\n      return promise;\n    },\n\n    // Creates and returns a Promise object enhanced with\n    // the jqXHR methods abort, success, error and complete:\n    _getXHRPromise: function (resolveOrReject, context, args) {\n      var dfd = $.Deferred(),\n        promise = dfd.promise();\n      context = context || this.options.context || promise;\n      if (resolveOrReject === true) {\n        dfd.resolveWith(context, args);\n      } else if (resolveOrReject === false) {\n        dfd.rejectWith(context, args);\n      }\n      promise.abort = dfd.promise;\n      return this._enhancePromise(promise);\n    },\n\n    // Adds convenience methods to the data callback argument:\n    _addConvenienceMethods: function (e, data) {\n      var that = this,\n        getPromise = function (args) {\n          return $.Deferred().resolveWith(that, args).promise();\n        };\n      data.process = function (resolveFunc, rejectFunc) {\n        if (resolveFunc || rejectFunc) {\n          data._processQueue = this._processQueue =\n            (this._processQueue || getPromise([this])).pipe(\n              function () {\n                if (data.errorThrown) {\n                  return $.Deferred()\n                    .rejectWith(that, [data]).promise();\n                }\n                return getPromise(arguments);\n              }\n            ).pipe(resolveFunc, rejectFunc);\n        }\n        return this._processQueue || getPromise([this]);\n      };\n      data.submit = function () {\n        if (this.state() !== 'pending') {\n          data.jqXHR = this.jqXHR =\n            (that._trigger(\n              'submit',\n              $.Event('submit', {delegatedEvent: e}),\n              this\n            ) !== false) && that._onSend(e, this);\n        }\n        return this.jqXHR || that._getXHRPromise();\n      };\n      data.abort = function () {\n        if (this.jqXHR) {\n          return this.jqXHR.abort();\n        }\n        this.errorThrown = 'abort';\n        that._trigger('fail', null, this);\n        return that._getXHRPromise(false);\n      };\n      data.state = function () {\n        if (this.jqXHR) {\n          return that._getDeferredState(this.jqXHR);\n        }\n        if (this._processQueue) {\n          return that._getDeferredState(this._processQueue);\n        }\n      };\n      data.processing = function () {\n        return !this.jqXHR && this._processQueue && that\n            ._getDeferredState(this._processQueue) === 'pending';\n      };\n      data.progress = function () {\n        return this._progress;\n      };\n      data.response = function () {\n        return this._response;\n      };\n    },\n\n    // Parses the Range header from the server response\n    // and returns the uploaded bytes:\n    _getUploadedBytes: function (jqXHR) {\n      var range = jqXHR.getResponseHeader('Range'),\n        parts = range && range.split('-'),\n        upperBytesPos = parts && parts.length > 1 &&\n          parseInt(parts[1], 10);\n      return upperBytesPos && upperBytesPos + 1;\n    },\n\n    // Uploads a file in multiple, sequential requests\n    // by splitting the file up in multiple blob chunks.\n    // If the second parameter is true, only tests if the file\n    // should be uploaded in chunks, but does not invoke any\n    // upload requests:\n    _chunkedUpload: function (options, testOnly) {\n      options.uploadedBytes = options.uploadedBytes || 0;\n      var that = this,\n        file = options.files[0],\n        fs = file.size,\n        ub = options.uploadedBytes,\n        mcs = options.maxChunkSize || fs,\n        slice = this._blobSlice,\n        dfd = $.Deferred(),\n        promise = dfd.promise(),\n        jqXHR,\n        upload;\n      if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||\n        options.data) {\n        return false;\n      }\n      if (testOnly) {\n        return true;\n      }\n      if (ub >= fs) {\n        file.error = options.i18n('uploadedBytes');\n        return this._getXHRPromise(\n          false,\n          options.context,\n          [null, 'error', file.error]\n        );\n      }\n      // The chunk upload method:\n      upload = function () {\n        // Clone the options object for each chunk upload:\n        var o = $.extend({}, options),\n          currentLoaded = o._progress.loaded;\n        o.blob = slice.call(\n          file,\n          ub,\n          ub + mcs,\n          file.type\n        );\n        // Store the current chunk size, as the blob itself\n        // will be dereferenced after data processing:\n        o.chunkSize = o.blob.size;\n        // Expose the chunk bytes position range:\n        o.contentRange = 'bytes ' + ub + '-' +\n        (ub + o.chunkSize - 1) + '/' + fs;\n        // Process the upload data (the blob and potential form data):\n        that._initXHRData(o);\n        // Add progress listeners for this chunk upload:\n        that._initProgressListener(o);\n        jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n        that._getXHRPromise(false, o.context))\n          .done(function (result, textStatus, jqXHR) {\n            ub = that._getUploadedBytes(jqXHR) ||\n            (ub + o.chunkSize);\n            // Create a progress event if no final progress event\n            // with loaded equaling total has been triggered\n            // for this chunk:\n            if (currentLoaded + o.chunkSize - o._progress.loaded) {\n              that._onProgress($.Event('progress', {\n                lengthComputable: true,\n                loaded: ub - o.uploadedBytes,\n                total: ub - o.uploadedBytes\n              }), o);\n            }\n            options.uploadedBytes = o.uploadedBytes = ub;\n            o.result = result;\n            o.textStatus = textStatus;\n            o.jqXHR = jqXHR;\n            that._trigger('chunkdone', null, o);\n            that._trigger('chunkalways', null, o);\n            if (ub < fs) {\n              // File upload not yet complete,\n              // continue with the next chunk:\n              upload();\n            } else {\n              dfd.resolveWith(\n                o.context,\n                [result, textStatus, jqXHR]\n              );\n            }\n          })\n          .fail(function (jqXHR, textStatus, errorThrown) {\n            o.jqXHR = jqXHR;\n            o.textStatus = textStatus;\n            o.errorThrown = errorThrown;\n            that._trigger('chunkfail', null, o);\n            that._trigger('chunkalways', null, o);\n            dfd.rejectWith(\n              o.context,\n              [jqXHR, textStatus, errorThrown]\n            );\n          });\n      };\n      this._enhancePromise(promise);\n      promise.abort = function () {\n        return jqXHR.abort();\n      };\n      upload();\n      return promise;\n    },\n\n    _beforeSend: function (e, data) {\n      if (this._active === 0) {\n        // the start callback is triggered when an upload starts\n        // and no other uploads are currently running,\n        // equivalent to the global ajaxStart event:\n        this._trigger('start');\n        // Set timer for global bitrate progress calculation:\n        this._bitrateTimer = new this._BitrateTimer();\n        // Reset the global progress values:\n        this._progress.loaded = this._progress.total = 0;\n        this._progress.bitrate = 0;\n      }\n      // Make sure the container objects for the .response() and\n      // .progress() methods on the data object are available\n      // and reset to their initial state:\n      this._initResponseObject(data);\n      this._initProgressObject(data);\n      data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n      data._progress.total = data.total = this._getTotal(data.files) || 1;\n      data._progress.bitrate = data.bitrate = 0;\n      this._active += 1;\n      // Initialize the global progress values:\n      this._progress.loaded += data.loaded;\n      this._progress.total += data.total;\n    },\n\n    _onDone: function (result, textStatus, jqXHR, options) {\n      var total = options._progress.total,\n        response = options._response;\n      if (options._progress.loaded < total) {\n        // Create a progress event if no final progress event\n        // with loaded equaling total has been triggered:\n        this._onProgress($.Event('progress', {\n          lengthComputable: true,\n          loaded: total,\n          total: total\n        }), options);\n      }\n      response.result = options.result = result;\n      response.textStatus = options.textStatus = textStatus;\n      response.jqXHR = options.jqXHR = jqXHR;\n      this._trigger('done', null, options);\n    },\n\n    _onFail: function (jqXHR, textStatus, errorThrown, options) {\n      var response = options._response;\n      if (options.recalculateProgress) {\n        // Remove the failed (error or abort) file upload from\n        // the global progress calculation:\n        this._progress.loaded -= options._progress.loaded;\n        this._progress.total -= options._progress.total;\n      }\n      response.jqXHR = options.jqXHR = jqXHR;\n      response.textStatus = options.textStatus = textStatus;\n      response.errorThrown = options.errorThrown = errorThrown;\n      this._trigger('fail', null, options);\n    },\n\n    _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n      // jqXHRorResult, textStatus and jqXHRorError are added to the\n      // options object via done and fail callbacks\n      this._trigger('always', null, options);\n    },\n\n    _onSend: function (e, data) {\n      if (!data.submit) {\n        this._addConvenienceMethods(e, data);\n      }\n      var that = this,\n        jqXHR,\n        aborted,\n        slot,\n        pipe,\n        options = that._getAJAXSettings(data),\n        send = function () {\n          that._sending += 1;\n          // Set timer for bitrate progress calculation:\n          options._bitrateTimer = new that._BitrateTimer();\n          jqXHR = jqXHR || (\n          ((aborted || that._trigger(\n            'send',\n            $.Event('send', {delegatedEvent: e}),\n            options\n          ) === false) &&\n          that._getXHRPromise(false, options.context, aborted)) ||\n          that._chunkedUpload(options) || $.ajax(options)\n          ).done(function (result, textStatus, jqXHR) {\n              that._onDone(result, textStatus, jqXHR, options);\n            }).fail(function (jqXHR, textStatus, errorThrown) {\n              that._onFail(jqXHR, textStatus, errorThrown, options);\n            }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n              that._onAlways(\n                jqXHRorResult,\n                textStatus,\n                jqXHRorError,\n                options\n              );\n              that._sending -= 1;\n              that._active -= 1;\n              if (options.limitConcurrentUploads &&\n                options.limitConcurrentUploads > that._sending) {\n                // Start the next queued upload,\n                // that has not been aborted:\n                var nextSlot = that._slots.shift();\n                while (nextSlot) {\n                  if (that._getDeferredState(nextSlot) === 'pending') {\n                    nextSlot.resolve();\n                    break;\n                  }\n                  nextSlot = that._slots.shift();\n                }\n              }\n              if (that._active === 0) {\n                // The stop callback is triggered when all uploads have\n                // been completed, equivalent to the global ajaxStop event:\n                that._trigger('stop');\n              }\n            });\n          return jqXHR;\n        };\n      this._beforeSend(e, options);\n      if (this.options.sequentialUploads ||\n        (this.options.limitConcurrentUploads &&\n        this.options.limitConcurrentUploads <= this._sending)) {\n        if (this.options.limitConcurrentUploads > 1) {\n          slot = $.Deferred();\n          this._slots.push(slot);\n          pipe = slot.pipe(send);\n        } else {\n          this._sequence = this._sequence.pipe(send, send);\n          pipe = this._sequence;\n        }\n        // Return the piped Promise object, enhanced with an abort method,\n        // which is delegated to the jqXHR object of the current upload,\n        // and jqXHR callbacks mapped to the equivalent Promise methods:\n        pipe.abort = function () {\n          aborted = [undefined, 'abort', 'abort'];\n          if (!jqXHR) {\n            if (slot) {\n              slot.rejectWith(options.context, aborted);\n            }\n            return send();\n          }\n          return jqXHR.abort();\n        };\n        return this._enhancePromise(pipe);\n      }\n      return send();\n    },\n\n    _onAdd: function (e, data) {\n      var that = this,\n        result = true,\n        options = $.extend({}, this.options, data),\n        files = data.files,\n        filesLength = files.length,\n        limit = options.limitMultiFileUploads,\n        limitSize = options.limitMultiFileUploadSize,\n        overhead = options.limitMultiFileUploadSizeOverhead,\n        batchSize = 0,\n        paramName = this._getParamName(options),\n        paramNameSet,\n        paramNameSlice,\n        fileSet,\n        i,\n        j = 0;\n      if (limitSize && (!filesLength || files[0].size === undefined)) {\n        limitSize = undefined;\n      }\n      if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {\n        fileSet = [files];\n        paramNameSet = [paramName];\n      } else if (!(options.singleFileUploads || limitSize) && limit) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i += limit) {\n          fileSet.push(files.slice(i, i + limit));\n          paramNameSlice = paramName.slice(i, i + limit);\n          if (!paramNameSlice.length) {\n            paramNameSlice = paramName;\n          }\n          paramNameSet.push(paramNameSlice);\n        }\n      } else if (!options.singleFileUploads && limitSize) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i = i + 1) {\n          batchSize += files[i].size + overhead;\n          if (i + 1 === filesLength ||\n            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\n            (limit && i + 1 - j >= limit)) {\n            fileSet.push(files.slice(j, i + 1));\n            paramNameSlice = paramName.slice(j, i + 1);\n            if (!paramNameSlice.length) {\n              paramNameSlice = paramName;\n            }\n            paramNameSet.push(paramNameSlice);\n            j = i + 1;\n            batchSize = 0;\n          }\n        }\n      } else {\n        paramNameSet = paramName;\n      }\n      data.originalFiles = files;\n      $.each(fileSet || files, function (index, element) {\n        var newData = $.extend({}, data);\n        newData.files = fileSet ? element : [element];\n        newData.paramName = paramNameSet[index];\n        that._initResponseObject(newData);\n        that._initProgressObject(newData);\n        that._addConvenienceMethods(e, newData);\n        result = that._trigger(\n          'add',\n          $.Event('add', {delegatedEvent: e}),\n          newData\n        );\n        return result;\n      });\n      return result;\n    },\n\n    _replaceFileInput: function (data) {\n      var input = data.fileInput,\n        inputClone = input.clone(true);\n      // Add a reference for the new cloned file input to the data argument:\n      data.fileInputClone = inputClone;\n      $('<form></form>').append(inputClone)[0].reset();\n      // Detaching allows to insert the fileInput on another form\n      // without loosing the file input value:\n      input.after(inputClone).detach();\n      // Avoid memory leaks with the detached file input:\n      $.cleanData(input.unbind('remove'));\n      // Replace the original file input element in the fileInput\n      // elements set with the clone, which has been copied including\n      // event handlers:\n      this.options.fileInput = this.options.fileInput.map(function (i, el) {\n        if (el === input[0]) {\n          return inputClone[0];\n        }\n        return el;\n      });\n      // If the widget has been initialized on the file input itself,\n      // override this.element with the file input clone:\n      if (input[0] === this.element[0]) {\n        this.element = inputClone;\n      }\n    },\n\n    _handleFileTreeEntry: function (entry, path) {\n      var that = this,\n        dfd = $.Deferred(),\n        errorHandler = function (e) {\n          if (e && !e.entry) {\n            e.entry = entry;\n          }\n          // Since $.when returns immediately if one\n          // Deferred is rejected, we use resolve instead.\n          // This allows valid files and invalid items\n          // to be returned together in one set:\n          dfd.resolve([e]);\n        },\n        successHandler = function (entries) {\n          that._handleFileTreeEntries(\n            entries,\n            path + entry.name + '/'\n          ).done(function (files) {\n              dfd.resolve(files);\n            }).fail(errorHandler);\n        },\n        readEntries = function () {\n          dirReader.readEntries(function (results) {\n            if (!results.length) {\n              successHandler(entries);\n            } else {\n              entries = entries.concat(results);\n              readEntries();\n            }\n          }, errorHandler);\n        },\n        dirReader, entries = [];\n      path = path || '';\n      if (entry.isFile) {\n        if (entry._file) {\n          // Workaround for Chrome bug #149735\n          entry._file.relativePath = path;\n          dfd.resolve(entry._file);\n        } else {\n          entry.file(function (file) {\n            file.relativePath = path;\n            dfd.resolve(file);\n          }, errorHandler);\n        }\n      } else if (entry.isDirectory) {\n        dirReader = entry.createReader();\n        readEntries();\n      } else {\n        // Return an empy list for file system items\n        // other than files or directories:\n        dfd.resolve([]);\n      }\n      return dfd.promise();\n    },\n\n    _handleFileTreeEntries: function (entries, path) {\n      var that = this;\n      return $.when.apply(\n        $,\n        $.map(entries, function (entry) {\n          return that._handleFileTreeEntry(entry, path);\n        })\n      ).pipe(function () {\n          return Array.prototype.concat.apply(\n            [],\n            arguments\n          );\n        });\n    },\n\n    _getDroppedFiles: function (dataTransfer) {\n      dataTransfer = dataTransfer || {};\n      var items = dataTransfer.items;\n      if (items && items.length && (items[0].webkitGetAsEntry ||\n        items[0].getAsEntry)) {\n        return this._handleFileTreeEntries(\n          $.map(items, function (item) {\n            var entry;\n            if (item.webkitGetAsEntry) {\n              entry = item.webkitGetAsEntry();\n              if (entry) {\n                // Workaround for Chrome bug #149735:\n                entry._file = item.getAsFile();\n              }\n              return entry;\n            }\n            return item.getAsEntry();\n          })\n        );\n      }\n      return $.Deferred().resolve(\n        $.makeArray(dataTransfer.files)\n      ).promise();\n    },\n\n    _getSingleFileInputFiles: function (fileInput) {\n      fileInput = $(fileInput);\n      var entries = fileInput.prop('webkitEntries') ||\n          fileInput.prop('entries'),\n        files,\n        value;\n      if (entries && entries.length) {\n        return this._handleFileTreeEntries(entries);\n      }\n      files = $.makeArray(fileInput.prop('files'));\n      if (!files.length) {\n        value = fileInput.prop('value');\n        if (!value) {\n          return $.Deferred().resolve([]).promise();\n        }\n        // If the files property is not available, the browser does not\n        // support the File API and we add a pseudo File object with\n        // the input value as name with path information removed:\n        files = [{name: value.replace(/^.*\\\\/, '')}];\n      } else if (files[0].name === undefined && files[0].fileName) {\n        // File normalization for Safari 4 and Firefox 3:\n        $.each(files, function (index, file) {\n          file.name = file.fileName;\n          file.size = file.fileSize;\n        });\n      }\n      return $.Deferred().resolve(files).promise();\n    },\n\n    _getFileInputFiles: function (fileInput) {\n      if (!(fileInput instanceof $) || fileInput.length === 1) {\n        return this._getSingleFileInputFiles(fileInput);\n      }\n      return $.when.apply(\n        $,\n        $.map(fileInput, this._getSingleFileInputFiles)\n      ).pipe(function () {\n          return Array.prototype.concat.apply(\n            [],\n            arguments\n          );\n        });\n    },\n\n    _onChange: function (e) {\n      var that = this,\n        data = {\n          fileInput: $(e.target),\n          form: $(e.target.form)\n        };\n      this._getFileInputFiles(data.fileInput).always(function (files) {\n        data.files = files;\n        if (that.options.replaceFileInput) {\n          that._replaceFileInput(data);\n        }\n        if (that._trigger(\n            'change',\n            $.Event('change', {delegatedEvent: e}),\n            data\n          ) !== false) {\n          that._onAdd(e, data);\n        }\n      });\n    },\n\n    _onPaste: function (e) {\n      var items = e.originalEvent && e.originalEvent.clipboardData &&\n          e.originalEvent.clipboardData.items,\n        data = {files: []};\n      if (items && items.length) {\n        $.each(items, function (index, item) {\n          var file = item.getAsFile && item.getAsFile();\n          if (file) {\n            data.files.push(file);\n          }\n        });\n        if (this._trigger(\n            'paste',\n            $.Event('paste', {delegatedEvent: e}),\n            data\n          ) !== false) {\n          this._onAdd(e, data);\n        }\n      }\n    },\n\n    _onDrop: function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var that = this,\n        dataTransfer = e.dataTransfer,\n        data = {};\n      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n        e.preventDefault();\n        this._getDroppedFiles(dataTransfer).always(function (files) {\n          data.files = files;\n          if (that._trigger(\n              'drop',\n              $.Event('drop', {delegatedEvent: e}),\n              data\n            ) !== false) {\n            that._onAdd(e, data);\n          }\n        });\n      }\n    },\n\n    _onDragOver: getDragHandler('dragover'),\n\n    _onDragEnter: getDragHandler('dragenter'),\n\n    _onDragLeave: getDragHandler('dragleave'),\n\n    _initEventHandlers: function () {\n      if (this._isXHRUpload(this.options)) {\n        this._on(this.options.dropZone, {\n          dragover: this._onDragOver,\n          drop: this._onDrop,\n          // event.preventDefault() on dragenter is required for IE10+:\n          dragenter: this._onDragEnter,\n          // dragleave is not required, but added for completeness:\n          dragleave: this._onDragLeave\n        });\n        this._on(this.options.pasteZone, {\n          paste: this._onPaste\n        });\n      }\n      if ($.support.fileInput) {\n        this._on(this.options.fileInput, {\n          change: this._onChange\n        });\n      }\n    },\n\n    _destroyEventHandlers: function () {\n      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n      this._off(this.options.pasteZone, 'paste');\n      this._off(this.options.fileInput, 'change');\n    },\n\n    _setOption: function (key, value) {\n      var reinit = $.inArray(key, this._specialOptions) !== -1;\n      if (reinit) {\n        this._destroyEventHandlers();\n      }\n      this._super(key, value);\n      if (reinit) {\n        this._initSpecialOptions();\n        this._initEventHandlers();\n      }\n    },\n\n    _initSpecialOptions: function () {\n      var options = this.options;\n      if (options.fileInput === undefined) {\n        options.fileInput = this.element.is('input[type=\"file\"]') ?\n          this.element : this.element.find('input[type=\"file\"]');\n      } else if (!(options.fileInput instanceof $)) {\n        options.fileInput = $(options.fileInput);\n      }\n      if (!(options.dropZone instanceof $)) {\n        options.dropZone = $(options.dropZone);\n      }\n      if (!(options.pasteZone instanceof $)) {\n        options.pasteZone = $(options.pasteZone);\n      }\n    },\n\n    _getRegExp: function (str) {\n      var parts = str.split('/'),\n        modifiers = parts.pop();\n      parts.shift();\n      return new RegExp(parts.join('/'), modifiers);\n    },\n\n    _isRegExpOption: function (key, value) {\n      return key !== 'url' && $.type(value) === 'string' &&\n        /^\\/.*\\/[igm]{0,3}$/.test(value);\n    },\n\n    _initDataAttributes: function () {\n      var that = this,\n        options = this.options,\n        clone = $(this.element[0].cloneNode(false));\n      // Initialize options set via HTML5 data-attributes:\n      $.each(\n        clone.data(),\n        function (key, value) {\n          var dataAttributeName = 'data-' +\n              // Convert camelCase to hyphen-ated key:\n            key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n          if (clone.attr(dataAttributeName)) {\n            if (that._isRegExpOption(key, value)) {\n              value = that._getRegExp(value);\n            }\n            options[key] = value;\n          }\n        }\n      );\n    },\n\n    _create: function () {\n      this._initDataAttributes();\n      this._initSpecialOptions();\n      this._slots = [];\n      this._sequence = this._getXHRPromise(true);\n      this._sending = this._active = 0;\n      this._initProgressObject(this);\n      this._initEventHandlers();\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the number of active uploads:\n    active: function () {\n      return this._active;\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the widget upload progress.\n    // It returns an object with loaded, total and bitrate properties\n    // for the running uploads:\n    progress: function () {\n      return this._progress;\n    },\n\n    // This method is exposed to the widget API and allows adding files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files property and can contain additional options:\n    // .fileupload('add', {files: filesList});\n    add: function (data) {\n      var that = this;\n      if (!data || this.options.disabled) {\n        return;\n      }\n      if (data.fileInput && !data.files) {\n        this._getFileInputFiles(data.fileInput).always(function (files) {\n          data.files = files;\n          that._onAdd(null, data);\n        });\n      } else {\n        data.files = $.makeArray(data.files);\n        this._onAdd(null, data);\n      }\n    },\n\n    // This method is exposed to the widget API and allows sending files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files or fileInput property and can contain additional options:\n    // .fileupload('send', {files: filesList});\n    // The method returns a Promise object for the file upload call.\n    send: function (data) {\n      if (data && !this.options.disabled) {\n        if (data.fileInput && !data.files) {\n          var that = this,\n            dfd = $.Deferred(),\n            promise = dfd.promise(),\n            jqXHR,\n            aborted;\n          promise.abort = function () {\n            aborted = true;\n            if (jqXHR) {\n              return jqXHR.abort();\n            }\n            dfd.reject(null, 'abort', 'abort');\n            return promise;\n          };\n          this._getFileInputFiles(data.fileInput).always(\n            function (files) {\n              if (aborted) {\n                return;\n              }\n              if (!files.length) {\n                dfd.reject();\n                return;\n              }\n              data.files = files;\n              jqXHR = that._onSend(null, data);\n              jqXHR.then(\n                function (result, textStatus, jqXHR) {\n                  dfd.resolve(result, textStatus, jqXHR);\n                },\n                function (jqXHR, textStatus, errorThrown) {\n                  dfd.reject(jqXHR, textStatus, errorThrown);\n                }\n              );\n            }\n          );\n          return this._enhancePromise(promise);\n        }\n        data.files = $.makeArray(data.files);\n        if (data.files.length) {\n          return this._onSend(null, data);\n        }\n      }\n      return this._getXHRPromise(false, data && data.context);\n    }\n\n  });\n\n}));\n","\nTemplate.__checkName(\"upload_semantic_ui\");\nTemplate[\"upload_semantic_ui\"] = new Template(\"Template.upload_semantic_ui\", (function() {\n  var view = this;\n  return HTML.FORM({\n    method: \"POST\",\n    enctype: \"multipart/form-data\"\n  }, \"\\n        \", HTML.DIV({\n    \"class\": \"field uploadFilePicker\"\n  }, \"\\n            \", HTML.DIV({\n    \"class\": \"ui action input\"\n  }, \"\\n                \", HTML.Raw('<input type=\"text\" id=\"_attachmentName\" disabled=\"true\">'), \"\\n                \", HTML.LABEL({\n    \"class\": \"ui icon button btn-file\"\n  }, \"\\n                    \", HTML.Raw('<i class=\"attachment basic icon\"></i>'), \"\\n                    \", HTML.INPUT({\n    type: \"file\",\n    \"class\": \"jqUploadclass\",\n    name: \"attachmentName\",\n    style: \"display: none\",\n    \"data-content-category\": function() {\n      return Spacebars.mustache(view.lookup(\"contentType\"));\n    },\n    accept: function() {\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));\n    }\n  }), \"\\n                \"), \"\\n            \"), \"\\n        \"), HTML.Raw('\\n        <div class=\"ui grid field uploadProgressHolder\" style=\"display: none\">\\n            <div class=\"column fourteen wide\">\\n                <div class=\"ui striped progress\" style=\"position: relative\">\\n                    <div style=\"position: absolute; left: 35%\" class=\"uploadProgressLabel\"></div>\\n                    <div class=\"bar uploadProgressBar\"></div>\\n                </div>\\n            </div>\\n            <div class=\"column one wide fluid\">\\n                <button class=\"ui icon red small button cancelUpload\" id=\"cancelUpload\">\\n                    <i class=\"stop icon\"></i>\\n                </button>\\n            </div>\\n        </div>\\n    '));\n}));\n","Template['upload_semantic_ui'].events({\n  'click .cancelUpload': function (e) {\n    Uploader.cancelUpload(e);\n  }\n});\n\nTemplate['upload_semantic_ui'].rendered = function () {\n  Uploader.render.call(this);\n};\n\n","\nTemplate.__checkName(\"bootstrap_buttons\");\nTemplate[\"bootstrap_buttons\"] = new Template(\"Template.bootstrap_buttons\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"idle\"));\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"cancelled\"));\n    }, function() {\n      return [ \"\\n            \", HTML.DIV({\n        \"class\": \"btn btn-warning upload-control\"\n      }, \"\\n                \", HTML.I({\n        \"class\": \"glyphicon glyphicon-cross\"\n      }), \"\\n                \", HTML.SPAN(\"Cancelled\"), \"\\n            \"), \"\\n        \" ];\n    }, function() {\n      return [ \"\\n            \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"waiting\"));\n      }, function() {\n        return [ \"\\n                \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"removeFromQueue\"));\n        }, function() {\n          return [ \"\\n                    \", HTML.DIV({\n            type: \"submit\",\n            \"class\": \"btn btn-default upload-control remove\"\n          }, \"\\n                        \", HTML.I({\n            \"class\": \"glyphicon glyphicon-remove\"\n          }), \"\\n                        \", HTML.SPAN(\"Remove\"), \"\\n                    \"), \"\\n                \" ];\n        }, function() {\n          return [ \"\\n                    \", HTML.DIV({\n            type: \"submit\",\n            \"class\": \"btn btn-info upload-control start\"\n          }, \"\\n                        \", HTML.I({\n            \"class\": \"glyphicon glyphicon-upload\"\n          }), \"\\n                        \", HTML.SPAN(\"Upload\"), \"\\n                    \"), \"\\n                \" ];\n        }), \"\\n            \" ];\n      }, function() {\n        return [ \"\\n                \", HTML.DIV({\n          \"class\": \"btn btn-default upload-control\"\n        }, \"\\n                    \", HTML.I({\n          \"class\": \"glyphicon glyphicon-ok\"\n        }), \"\\n                \"), \"\\n            \" ];\n      }), \"\\n        \" ];\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"btn btn-danger upload-control cancel\"\n    }, \"\\n            \", HTML.I({\n      \"class\": \"glyphicon glyphicon-stop\"\n    }), \"\\n            \", HTML.SPAN(\"Cancel\"), \"\\n        \"), \"\\n    \" ];\n  });\n}));\n","Template['bootstrap_buttons'].helpers({\n  'idle': function() {\n    return this.state.idle();\n  },\n  'cancelled': function() {\n    return this.state.cancelled();\n  },\n  'waiting': function() {\n    return this.state.waiting();\n  },\n  'removeFromQueue': function() {\n    return this.state.removeFromQueue();\n  }\n});\n\nTemplate['bootstrap_buttons'].events({\n  'click .cancel': function (e) {\n    Uploader.cancelUpload.call(this.uploadContext, e, this.name);\n  },\n  'click .start': function (e) {\n    Uploader.startUpload.call(this.uploadContext, e, this.name);\n  },\n  'click .remove': function (e) {\n    Uploader.removeFromQueue.call(this.uploadContext, e, this.name);\n  }\n});","\nTemplate.__checkName(\"bootstrap_queue_item\");\nTemplate[\"bootstrap_queue_item\"] = new Template(\"Template.bootstrap_queue_item\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"uploadPanel\",\n    style: \"margin-top: 6px\"\n  }, \"\\n        \", HTML.DIV({\n    \"class\": \"form-control upload-control\"\n  }, \"\\n            \", HTML.DIV({\n    \"class\": \"progress-bar progress-bar-success progress-bar-striped\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    style: function() {\n      return Spacebars.mustache(view.lookup(\"progress\"));\n    }\n  }, \"\\n                \", HTML.Raw(\"&nbsp;\"), \"\\n            \"), \"\\n            \", HTML.DIV({\n    \"class\": \"progress-label\"\n  }, \"\\n                \", Blaze.View(function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));\n  }), \"\\n            \"), \"\\n        \"), \"\\n\\n        \", Blaze._TemplateWith(function() {\n    return {\n      state: Spacebars.call(view.lookup(\"buttonState\")),\n      uploadContext: Spacebars.call(view.lookup(\"...\")),\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"item\", \"name\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"bootstrap_buttons\"));\n  }), \"\\n    \");\n}));\n","Template['bootstrap_queue_item'].helpers({\n  'infoLabel': function() {\n    var progress = this.parent.queue[this.item.name].get();\n    return progress.running ?\n      Uploader.formatProgress(this.item.name, progress.progress, progress.bitrate) :\n      (this.item.name + '&nbsp;<span style=\"font-size: smaller; color: grey\">' + bytesToSize(this.item.size) + '</span>');\n  },\n  buttonState: function() {\n    var that = this;\n    return {\n      'idle': function () {\n        return !that.parent.queue[that.item.name].get().running ||\n          that.parent.queue[that.item.name].get().progress === 100;\n      },\n      'cancelled': function () {\n        return that.parent.queue[that.item.name].get().cancelled;\n      },\n      'waiting': function () {\n        return that.parent.queue[that.item.name].get().progress !== 100;\n      },\n      'removeFromQueue': function() {\n        return true;\n      }\n    }\n  },\n  'progress': function() {\n    return 'width:' + this.parent.queue[this.item.name].get().progress + '%';\n  }\n});","\nTemplate.__checkName(\"upload_bootstrap\");\nTemplate[\"upload_bootstrap\"] = new Template(\"Template.upload_bootstrap\", (function() {\n  var view = this;\n  return HTML.FORM({\n    method: \"POST\",\n    enctype: \"multipart/form-data\"\n  }, \"\\n\\n        \", HTML.DIV({\n    \"class\": \"uploadPanel\"\n  }, \"\\n            \", HTML.Raw(\"<!-- The fileinput-button span is used to style the file input field as button -->\"), \"\\n\\n            \", HTML.DIV({\n    \"class\": \"btn btn-primary btn-file upload-control\"\n  }, \"\\n                Browse\", HTML.Raw(\"&hellip;\"), \" \", HTML.INPUT({\n    type: \"file\",\n    \"class\": \"jqUploadclass\",\n    multiple: function() {\n      return Spacebars.mustache(view.lookup(\"multiple\"));\n    },\n    \"data-content-category\": function() {\n      return Spacebars.mustache(view.lookup(\"contentType\"));\n    },\n    \"data-form-data\": function() {\n      return Spacebars.mustache(view.lookup(\"submitData\"));\n    },\n    accept: function() {\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));\n    }\n  }), \"\\n            \"), \"\\n\\n            \", HTML.DIV({\n    type: \"text\",\n    \"class\": \"form-control upload-control\"\n  }, \"\\n                \", HTML.DIV({\n    \"class\": \"progress-bar progress-bar-success progress-bar-striped\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    style: function() {\n      return Spacebars.mustache(view.lookup(\"progress\"));\n    }\n  }, \"\\n                    \", HTML.Raw(\"&nbsp;\"), \"\\n                \"), \"\\n                \", HTML.DIV({\n    \"class\": \"progress-label\"\n  }, \"\\n                    \", Blaze.View(function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));\n  }), \"\\n                \"), \"\\n            \"), \"\\n\\n            \", Blaze._TemplateWith(function() {\n    return {\n      state: Spacebars.call(view.lookup(\"buttonState\")),\n      uploadContext: Spacebars.call(view.lookup(\".\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"bootstrap_buttons\"));\n  }), \"\\n        \"), \"\\n\\n        \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"showQueue\"));\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"panel panel-default\",\n      style: \"margin-top: 1px; background: #efefef\"\n    }, \"\\n            \", HTML.DIV({\n      \"class\": \"panel-body\"\n    }, \"\\n                \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"queueItems\"));\n    }, function() {\n      return [ \"\\n                \", Blaze._TemplateWith(function() {\n        return {\n          item: Spacebars.call(view.lookup(\".\")),\n          parent: Spacebars.call(view.lookup(\"..\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"bootstrap_queue_item\"));\n      }), \"\\n                \" ];\n    }), \"\\n            \"), \"\\n        \"), \"\\n        \" ];\n  }), \"\\n    \");\n}));\n","// each upload_multiple template instance holds its own local collection of files list\nTemplate['upload_bootstrap'].created = function () {\n  Uploader.init.call(this);\n};\n\nTemplate['upload_bootstrap'].helpers({\n  'submitData': function() {\n    if (this.formData) {\n      this.formData['contentType'] = this.contentType;\n    } else {\n      this.formData = { contentType: this.contentType };\n    }\n    return JSON.stringify(this.formData);\n  },\n  'infoLabel': function() {\n    var progress = this.globalInfo.get();\n\n    // we may have not yet selected a file\n    if (!this.info.get()) {\n      return \"\";\n    }\n\n    return progress.running ?\n      Uploader.formatProgress(this.info.get().name, progress.progress, progress.bitrate) :\n      (this.info.get().name + '&nbsp;<span style=\"font-size: smaller; color: grey\">' + bytesToSize(this.info.get().size) + '</span>');\n  },\n  'progress': function() {\n    return 'width:' + this.globalInfo.get().progress + '%';\n  },\n  buttonState: function() {\n    var that = this;\n    return {\n      'idle': function () {\n        return !that.globalInfo.get().running;\n      },\n      'cancelled': function () {\n        return that.globalInfo.get().cancelled;\n      },\n      'waiting': function () {\n        return that.globalInfo.get().progress !== 100;\n      },\n      'removeFromQueue': function() {\n        return false;\n      }\n    }\n  },\n  'queueItems': function() {\n    return this.queueView.get();\n  },\n  'showQueue': function() {\n    return this.queueView.get().length > 1;\n  }\n});\n\nTemplate['upload_bootstrap'].rendered = function () {\n  Uploader.render.call(this);\n};\n\n","\nTemplate.__checkName(\"dropzone\");\nTemplate[\"dropzone\"] = new Template(\"Template.dropzone\", (function() {\n  var view = this;\n  return HTML.FORM({\n    method: \"POST\",\n    enctype: \"multipart/form-data\"\n  }, \"\\n        \", HTML.INPUT({\n    type: \"file\",\n    \"class\": \"jqUploadclass\",\n    multiple: \"true\",\n    \"data-content-category\": function() {\n      return Spacebars.mustache(view.lookup(\"contentType\"));\n    },\n    \"data-form-data\": function() {\n      return Spacebars.mustache(view.lookup(\"submitData\"));\n    },\n    accept: function() {\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));\n    },\n    style: \"display: none\"\n  }), \"\\n        \", HTML.DIV({\n    \"class\": \"jqDropZone fade\"\n  }, Blaze.View(function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));\n  })), \"\\n    \");\n}));\n","// each upload_multiple template instance holds its own local collection of files list\nTemplate['dropzone'].created = function () {\n  // start automatically on drop\n  this.data.autoStart = true;\n\n  // init the control\n  Uploader.init.call(this);\n};\n\n// each upload_multiple template instance holds its own local collection of files list\nTemplate['dropzone'].helpers({\n  'infoLabel': function() {\n    var progress = this.globalInfo.get();\n\n    // we may have not yet selected a file\n    if (progress.progress == 0 || progress.progress == 100) {\n      return \"Drop files here\";\n    }\n    return progress.progress + \"%\";\n  }\n});\n\nTemplate['dropzone'].rendered = function () {\n  // initialise the uploader area\n  Uploader.render.call(this);\n\n  // allow visual clues for drag and drop area\n  $(document).bind('dragover', function (e) {\n    var dropZone = $('.jqDropZone'),\n      foundDropzone,\n      timeout = window.dropZoneTimeout;\n    if (!timeout) {\n      dropZone.addClass('in');\n    }\n    else {\n      clearTimeout(timeout);\n    }\n    var found = false,\n      node = e.target;\n    do {\n      if ($(node).hasClass('jqDropZone')) {\n        found = true;\n        foundDropzone = $(node);\n        break;\n      }\n      node = node.parentNode;\n    } while (node != null);\n\n    dropZone.removeClass('in hover');\n    if (found) {\n      foundDropzone.addClass('hover');\n    }\n    window.dropZoneTimeout = setTimeout(function () {\n      window.dropZoneTimeout = null;\n      dropZone.removeClass('in hover');\n    }, 100);\n  });\n};","Uploader = {\n\tuploadUrl: '/upload',\n\tcreateName: function(templateContext) {\n\t\tif (templateContext.queue.length == 1) {\n\t\t\tvar file = templateContext.queue[0];\n\t\t\ttemplateContext.info.set(file);\n\t\t} else {\n\t\t\t// calculate size\n\t\t\tvar file = {\n\t\t\t\tname: templateContext.queue.length + ' files',\n\t\t\t\tsize: templateContext.queue.size\n\t\t\t}\n\t\t\ttemplateContext.info.set(file);\n\t\t}\n\t},\n\t/**\n\t * Starts upload\n\t * @param e\n\t * @param {string} name Name of the file in the queue that we want to upload\n\t */\n\tstartUpload: function(e, name) {\n\t\tif (e) e.preventDefault();\n\n\t\tif (this.queue.length == 0) return;\n\n\t\tvar that = this;\n\n\t\t$.each(this.queue, function (index, queueItem) {\n\n\t\t\tvar data = queueItem.data;\n\t\t\tif (name && data.files[0].name !== name) return true;\n\n\t\t\tdata.jqXHR = data.submit()\n\t\t\t\t.done(function (data, textStatus, jqXHR) {\n\t\t\t\t\tconsole.log('data.sumbit.done: textStatus= ' + textStatus);\n\t\t\t\t})\n\t\t\t\t.fail(function (jqXHR, textStatus, errorThrown) {\n\t\t\t\t\tconsole.log('data.sumbit.fail: ' + jqXHR.responseText + ' ' + jqXHR.status + ' ' + jqXHR.statusText);\n\t\t\t\t})\n\t\t\t\t.always(function (data, textStatus, jqXHR) {\n\t\t\t\t\tconsole.log('data.sumbit.always:  textStatus= ' + textStatus);\n\t\t\t\t});\n\t\t});\n\t},\n\tformatProgress: function(file, progress, bitrate) {\n\t\treturn progress + \"%&nbsp;of&nbsp;\" + file + \"&nbsp;<span style='font-size:smaller'>@&nbsp;\" + bytesToSize(bitrate) + \"&nbsp;/&nbsp;sec</span>\"\n\t},\n\tremoveFromQueue: function(e, name) {\n\t\te.preventDefault();\n\n\t\t// remove from data queue\n\t\tvar that = this;\n\t\t$.each(this.queue, function (index, item) {\n\t\t\t// skip all with different name\n\t\t\tif (item.name === name) {\n\t\t\t\tthat.queue.splice(index, 1);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\t// set the queueView\n\t\tthis.queueView.set(this.queue);\n\n\t\t// update name\n\t\tUploader.createName(this);\n\t},\n\tcancelUpload: function (e, name) {\n\t\te.preventDefault();\n\n\t\tvar that = this;\n\t\t$.each(this.queue, function (index, queueItem) {\n\t\t\t// skip all with different name\n\t\t\tif (name && queueItem.name !== name) return true;\n\n\t\t\t// cancel upload of non completed files\n\t\t\tif (that.queue[queueItem.name].get().progress !== 100) {\n\t\t\t\tqueueItem.data.jqXHR.abort();\n\n\t\t\t\t// set status to redraw interface\n\t\t\t\tthat.queue[queueItem.name].set({running: false, cancelled: true, progress: 0, bitrate: 0});\n\t\t\t}\n\t\t});\n\n\t\t// mark global as cancelled\n\t\tif (!name) {\n\t\t\tthis.globalInfo.set({running: false, cancelled: true, progress: 0, bitrate: 0})\n\t\t}\n\t},\n\tinit: function() {\n\t\t// this is used to view the queue in the interface\n\t\tthis.data.queueView = new ReactiveVar([]);\n\t\t// this holds all the data about the queue\n\t\tthis.data.queue = [];\n\t\t// info about the global item being processed\n\t\tthis.data.info = new ReactiveVar;\n\t\t// info about global progress\n\t\tthis.data.globalInfo = new ReactiveVar({running: false, progress: 0, bitrate: 0});\n\t},\n\trender: function () {\n\t\t// this.data holds the template context (arguments supplied to the template in HTML)\n\t\tvar templateContext = this.data;\n\t\ttemplateContext.progressBar = this.$('.progress-bar');\n\t\ttemplateContext.progressLabel = this.$('.progress-label');\n\t\ttemplateContext.uploadControl = this.$('.jqUploadclass');\n\t\ttemplateContext.dropZone = this.$('.jqDropZone');\n\n\n\t\t// attach the context to the form object (so that we can access it in the callbacks such as add() etc.)\n\t\tthis.find('form').uploadContext = templateContext;\n\n\t\t// set the upload related callbacks for HTML node that has jqUploadclass specified for it\n\t\t// Example html node: <input type=\"file\" class=\"jqUploadclass\" />\n\t\ttemplateContext.uploadControl.fileupload({\n\t\t\turl: Uploader.uploadUrl,\n\t\t\tdataType: 'json',\n\t\t\tdropZone: templateContext.dropZone,\n\t\t\tadd: function (e, data) {\n\t\t\t\tconsole.log('render.add ');\n\n\t\t\t\t// update the queue collection, so that the ui gets updated\n\t\t\t\t$.each(data.files, function (index, file) {\n\t\t\t\t\tvar item = file;\n\t\t\t\t\titem.data = data;\n\t\t\t\t\ttemplateContext.queue[file.name] = new ReactiveVar({running: false, progress: 0});\n\t\t\t\t\ttemplateContext.queue.push(item);\n\t\t\t\t\ttemplateContext.queue.size += parseInt(file.size);\n\t\t\t\t});\n\n\t\t\t\t// say name\n\t\t\t\tUploader.createName(templateContext);\n\n\t\t\t\t// set template context\n\t\t\t\ttemplateContext.queueView.set(templateContext.queue);\n\n\t\t\t\t// we can automatically start the upload\n\t\t\t\tif (templateContext.autoStart) {\n\t\t\t\t\tUploader.startUpload.call(templateContext);\n\t\t\t\t}\n\n\t\t\t}, // end of add callback handler\n\t\t\tdone: function (e, data) {\n\t\t\t\tconsole.log('render.done ');\n\n\t\t\t\ttemplateContext.globalInfo.set({running: false, progress: 100});\n\n\t\t\t\t$.each(data.result.files, function (index, file) {\n\t\t\t\t\tUploader.finished(index, file);\n\t\t\t\t});\n\t\t\t},\n\t\t\tfail: function (e, data) {\n\t\t\t\tconsole.log('render.fail ');\n\t\t\t},\n\t\t\tprogress: function (e, data) {\n\t\t\t\t// file progress is displayed only when single file is uploaded\n\t\t\t\tvar fi = templateContext.queue[data.files[0].name];\n\t\t\t\tif (fi) {\n\t\t\t\t\tfi.set({\n\t\t\t\t\t\trunning: true,\n\t\t\t\t\t\tprogress: parseInt(data.loaded / data.total * 100, 10),\n\t\t\t\t\t\tbitrate: data.bitrate\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tprogressall: function (e, data) {\n\t\t\t\ttemplateContext.globalInfo.set({\n\t\t\t\t\trunning: true,\n\t\t\t\t\tprogress: parseInt(data.loaded / data.total * 100, 10),\n\t\t\t\t\tbitrate: data.bitrate});\n\t\t\t},\n\t\t\tdrop: function (e, data) { // called when files are dropped onto ui\n\t\t\t\t$.each(data.files, function (index, file) {\n\t\t\t\t\tconsole.log(\"render.drop file: \" + file.name);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchange: function (e, data) { // called when input selection changes (file selected)\n\t\t\t\t// clear the queue, this is used to visualise all the data\n\t\t\t\ttemplateContext.queue = [];\n\t\t\t\ttemplateContext.queue.size = 0;\n\t\t\t\ttemplateContext.progressBar.css('width', '0%');\n\t\t\t\ttemplateContext.globalInfo.set({running: false, progress: 0});\n\n\t\t\t\t$.each(data.files, function (index, file) {\n\t\t\t\t\tconsole.log('render.change file: ' + file.name);\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t\t.prop('disabled', !$.support.fileInput)\n\t\t\t.parent().addClass($.support.fileInput ? undefined : 'disabled');\n\t},\n\tfinished: function () { }\n}\n\nbytesToSize = function (bytes) {\n\tif (bytes == 0) return '0 Byte';\n\tvar k = 1000;\n\tvar sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\tvar i = Math.floor(Math.log(bytes) / Math.log(k));\n\treturn (bytes / Math.pow(k, i)).toPrecision(3) + '&nbsp;' + sizes[i];\n}\n"]}