{"version":3,"sources":["lai:collection-extensions/collection-extensions.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,sC;AACA,0B;;AAEA,uC;AACA,sC;;AAEA,sD;AACA,qC;AACA,2D;AACA,6C;AACA,2B;AACA,6C;AACA,iC;AACA,+C;AACA,G;AACA,wD;AACA,2D;AACA,4C;AACA,kD;AACA,G;AACA,E;;AAEA,uD;AACA,iC;AACA,iE;AACA,iC;AACA,2B;AACA,6C;AACA,qD;AACA,+C;AACA,G;AACA,6C;AACA,2B;AACA,6C;AACA,wD;AACA,+C;AACA,G;AACA,kC;AACA,uB;AACA,wD;AACA,E;;AAEA,2D;AACA,uD;AACA,oB;AACA,iF;AACA,sE;;AAEA,4F;;AAEA,yC;AACA,yE;AACA,0B;AACA,sD;AACA,kC;AACA,0C;AACA,G;AACA,E;;AAEA,iD;AACA,8C;AACA,+D;AACA,0D;AACA,gC;AACA,kF;;AAEA,kC;AACA,sC;;AAEA,+B;AACA,iD;AACA,gE;AACA,uE;AACA,e;AACA,I;;AAEA,kC;;AAEA,iC;AACA,2C;AACA,8C;AACA,K;AACA,G;AACA,E;;AAEA,2E;AACA,uD;AACA,6B;AACA,uD;AACA,oD;AACA,0D;AACA,oC;AACA,G;AACA,E;;AAEA,mC;AACA,sD;AACA,qD;AACA,Q;AACA,uD;AACA,C;;AAEA,0C;AACA,0D;AACA,kE;AACA,C","file":"/packages/lai:collection-extensions.js","sourcesContent":["// The collection extensions namespace\nCollectionExtensions = {};\n\n// Stores all the collection extensions\nCollectionExtensions._extensions = [];\n\n// This is where you would add custom functionality to\n// Mongo.Collection/Meteor.Collection\nMeteor.addCollectionExtension = function (customFunction) {\n  if (typeof customFunction !== 'function') {\n    throw new Meteor.Error(\n      'collection-extension-wrong-argument', \n      'You must pass a function \\\n       into Meteor.addCollectionExtension().');\n  }\n  CollectionExtensions._extensions.push(customFunction);\n  // If Meteor.users exists, apply the extension right away\n  if (typeof Meteor.users !== 'undefined') {\n    customFunction.apply(Meteor.users, ['users']);\n  }\n};\n\n// Utility function to add a prototype function to your\n// Meteor/Mongo.Collection object\nMeteor.addCollectionPrototype = function (name, customFunction) {\n  if (typeof name !== 'string') {\n    throw new Meteor.Error(\n      'collection-extension-wrong-argument', \n      'You must pass a string as the first argument \\\n       into Meteor.addCollectionPrototype().');\n  }\n  if (typeof customFunction !== 'function') {\n    throw new Meteor.Error(\n      'collection-extension-wrong-argument', \n      'You must pass a function as the second argument \\\n       into Meteor.addCollectionPrototype().');\n  }\n  (typeof Mongo !== 'undefined' ? \n    Mongo.Collection : \n    Meteor.Collection).prototype[name] = customFunction;\n};\n\n// This is used to reassign the prototype of unfortunately \n// and unstoppably already instantiated Mongo instances\n// i.e. Meteor.users\nCollectionExtensions._reassignCollectionPrototype = function (instance, constr) {\n  var hasSetPrototypeOf = typeof Object.setPrototypeOf === 'function';\n\n  if (!constr) constr = typeof Mongo !== 'undefined' ? Mongo.Collection : Meteor.Collection;\n\n  // __proto__ is not available in < IE11\n  // Note: Assigning a prototype dynamically has performance implications\n  if (hasSetPrototypeOf) {\n    Object.setPrototypeOf(instance, constr.prototype);\n  } else if (instance.__proto__) {\n    instance.__proto__ = constr.prototype;\n  }\n};\n\n// This monkey-patches the Collection constructor\n// This code is the same monkey-patching code \n// that matb33:collection-hooks uses, which works pretty nicely\nCollectionExtensions._wrapCollection = function (ns, as) {\n  // Save the original prototype\n  if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null);\n\n  var constructor = as.Collection;\n  var proto = as._CollectionPrototype;\n\n  ns.Collection = function () {\n    var ret = constructor.apply(this, arguments);\n    // This is where all the collection extensions get processed\n    CollectionExtensions._processCollectionExtensions(this, arguments);\n    return ret;\n  };\n\n  ns.Collection.prototype = proto;\n\n  for (var prop in constructor) {\n    if (constructor.hasOwnProperty(prop)) {\n      ns.Collection[prop] = constructor[prop];\n    }\n  }\n};\n\nCollectionExtensions._processCollectionExtensions = function (self, args) {\n  // Using old-school operations for better performance\n  // Please don't judge me ;P\n  var args = args ? [].slice.call(args, 0) : undefined;\n  var extensions = CollectionExtensions._extensions;\n  for (var i = 0, len = extensions.length; i < len; i++) {\n    extensions[i].apply(self, args);\n  }\n};\n\nif (typeof Mongo !== 'undefined') {\n  CollectionExtensions._wrapCollection(Meteor, Mongo);\n  CollectionExtensions._wrapCollection(Mongo, Mongo);\n} else {\n  CollectionExtensions._wrapCollection(Meteor, Meteor);\n}\n\nif (typeof Meteor.users !== 'undefined') {\n  // Ensures that Meteor.users instanceof Mongo.Collection\n  CollectionExtensions._reassignCollectionPrototype(Meteor.users);\n}"]}