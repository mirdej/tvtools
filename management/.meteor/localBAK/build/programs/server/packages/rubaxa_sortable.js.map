{"version":3,"sources":["rubaxa:sortable/meteor/methods-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,a;;AAEA,c;AACA,8F;;AAEA,gB;AACA,I;AACA,+F;AACA,qE;AACA,iD;AACA,6E;AACA,yC;AACA,I;AACA,yF;AACA,gC;AACA,yD;AACA,0D;AACA,qE;AACA,G;AACA,4D;AACA,6I;AACA,G;;AAEA,uB;AACA,2B;AACA,wB;AACA,0D;AACA,oC;AACA,iF;AACA,E;AACA,G","file":"/packages/rubaxa_sortable.js","sourcesContent":["'use strict';\n\nSortable = {};\nSortable.collections = [];  // array of collection names that the client is allowed to reorder\n\nMeteor.methods({\n\t/**\n\t * Update the sortField of documents with given ids in a collection, incrementing it by incDec\n\t * @param {String} collectionName - name of the collection to update\n\t * @param {String[]} ids - array of document ids\n\t * @param {String} orderField - the name of the order field, usually \"order\"\n\t * @param {Number} incDec - pass 1 or -1\n\t */\n\t'rubaxa:sortable/collection-update': function (collectionName, ids, sortField, incDec) {\n\t\tcheck(collectionName, String);\n\t\t// don't allow the client to modify just any collection\n\t\tif (!Sortable || !Array.isArray(Sortable.collections)) {\n\t\t\tthrow new Meteor.Error(500, 'Please define Sortable.collections');\n\t\t}\n\t\tif (Sortable.collections.indexOf(collectionName) === -1) {\n\t\t\tthrow new Meteor.Error(403, 'Collection <' + collectionName + '> is not Sortable. Please add it to Sortable.collections in server code.');\n\t\t}\n\n\t\tcheck(ids, [String]);\n\t\tcheck(sortField, String);\n\t\tcheck(incDec, Number);\n\t\tvar selector = {_id: {$in: ids}}, modifier = {$inc: {}};\n\t\tmodifier.$inc[sortField] = incDec;\n\t\tMongo.Collection.get(collectionName).update(selector, modifier, {multi: true});\n\t}\n});\n"]}